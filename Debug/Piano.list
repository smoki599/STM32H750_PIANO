
Piano.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dee4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800e184  0800e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800e394  0800e394  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800e398  0800e398  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  0800e39c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000014d8  240000b4  0800e450  000200b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400158c  0800e450  0002158c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000350de  00000000  00000000  000200e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005d75  00000000  00000000  000551c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002668  00000000  00000000  0005af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00002440  00000000  00000000  0005d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000a3dc  00000000  00000000  0005f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00033ae8  00000000  00000000  00069dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a93db  00000000  00000000  0009d8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00246c7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000ad78  00000000  00000000  00246cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .stab         00000024  00000000  00000000  00251a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000004e  00000000  00000000  00251a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e16c 	.word	0x0800e16c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	0800e16c 	.word	0x0800e16c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	  /* Enable the CPU Cache */
	  CPU_CACHE_Enable();
 8000386:	f000 f8dd 	bl	8000544 <CPU_CACHE_Enable>
	  /* STM32H7xx HAL library initialization:
	       - Configure the Systick to generate an interrupt each 1 msec
	       - Set NVIC Group Priority to 4
	       - Low Level Initialization
	     */
	  HAL_Init();
 800038a:	f003 f98d 	bl	80036a8 <HAL_Init>

	  /* Configure the system clock to 400 MHz */
	  SystemClock_Config();
 800038e:	f000 f843 	bl	8000418 <SystemClock_Config>

	  /* Configure LED1 */
	  BSP_LED_Init(LED1);
 8000392:	2000      	movs	r0, #0
 8000394:	f001 f9c2 	bl	800171c <BSP_LED_Init>

	  /*##-1- LCD Initialization #################################################*/
	  /* Initialize the LCD */
	  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8000398:	2101      	movs	r1, #1
 800039a:	2000      	movs	r0, #0
 800039c:	f001 fece 	bl	800213c <BSP_LCD_Init>
	  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x90>)
 80003a2:	f000 f9f3 	bl	800078c <UTIL_LCD_SetFuncDriver>

	  /* Set Foreground Layer */
	  UTIL_LCD_SetLayer(0);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fa46 	bl	8000838 <UTIL_LCD_SetLayer>

	  /* Clear the LCD Background layer */
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80003ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003b0:	f000 facc 	bl	800094c <UTIL_LCD_Clear>
	  uint32_t x_sizee, y_sizee;

	  BSP_LCD_GetXSize(0, &x_sizee);
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	4619      	mov	r1, r3
 80003b8:	2000      	movs	r0, #0
 80003ba:	f002 f89b 	bl	80024f4 <BSP_LCD_GetXSize>
	  BSP_LCD_GetYSize(0, &y_sizee);
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f002 f8b4 	bl	8002530 <BSP_LCD_GetYSize>
	  hTSs->Width = x_sizee;
 80003c8:	4b12      	ldr	r3, [pc, #72]	; (8000414 <main+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
	  hTSs->Height = y_sizee;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <main+0x94>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	683a      	ldr	r2, [r7, #0]
 80003d6:	605a      	str	r2, [r3, #4]
	  hTSs->Orientation = TS_SWAP_XY;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <main+0x94>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2208      	movs	r2, #8
 80003de:	609a      	str	r2, [r3, #8]
	  hTSs->Accuracy = 5;
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <main+0x94>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2205      	movs	r2, #5
 80003e6:	60da      	str	r2, [r3, #12]
	  /* Touchscreen initialization */
	  BSP_TS_Init(0, hTSs);
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <main+0x94>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	2000      	movs	r0, #0
 80003f0:	f002 ff3c 	bl	800326c <BSP_TS_Init>

	  srand(time(NULL));   // Initialization, should only be called once.
 80003f4:	2000      	movs	r0, #0
 80003f6:	f00c fe8b 	bl	800d110 <time>
 80003fa:	4602      	mov	r2, r0
 80003fc:	460b      	mov	r3, r1
 80003fe:	4610      	mov	r0, r2
 8000400:	4619      	mov	r1, r3
 8000402:	f00c fe57 	bl	800d0b4 <srand>
	  HAL_IncTick();
 8000406:	f003 f9c1 	bl	800378c <HAL_IncTick>

	  /* Infinite loop */
	  while (1)
	  {
		  pianoMain();
 800040a:	f00c f9d7 	bl	800c7bc <pianoMain>
	  {
 800040e:	e7fc      	b.n	800040a <main+0x8a>
 8000410:	0800e220 	.word	0x0800e220
 8000414:	240001b0 	.word	0x240001b0

08000418 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b09e      	sub	sp, #120	; 0x78
 800041c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800041e:	2300      	movs	r3, #0
 8000420:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000424:	2002      	movs	r0, #2
 8000426:	f007 f937 	bl	8007698 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042a:	2300      	movs	r3, #0
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	4b42      	ldr	r3, [pc, #264]	; (8000538 <SystemClock_Config+0x120>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	4a41      	ldr	r2, [pc, #260]	; (8000538 <SystemClock_Config+0x120>)
 8000434:	f023 0301 	bic.w	r3, r3, #1
 8000438:	62d3      	str	r3, [r2, #44]	; 0x2c
 800043a:	4b3f      	ldr	r3, [pc, #252]	; (8000538 <SystemClock_Config+0x120>)
 800043c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	4b3d      	ldr	r3, [pc, #244]	; (800053c <SystemClock_Config+0x124>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a3c      	ldr	r2, [pc, #240]	; (800053c <SystemClock_Config+0x124>)
 800044a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b3a      	ldr	r3, [pc, #232]	; (800053c <SystemClock_Config+0x124>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800045c:	bf00      	nop
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <SystemClock_Config+0x124>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046a:	d1f8      	bne.n	800045e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	2302      	movs	r3, #2
 8000484:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000486:	2305      	movs	r3, #5
 8000488:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000496:	2302      	movs	r3, #2
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800049a:	2304      	movs	r3, #4
 800049c:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049e:	2300      	movs	r3, #0
 80004a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004a2:	2308      	movs	r3, #8
 80004a4:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80004a6:	f107 0308 	add.w	r3, r7, #8
 80004aa:	4618      	mov	r0, r3
 80004ac:	f007 f92e 	bl	800770c <HAL_RCC_OscConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004be:	f000 f8af 	bl	8000620 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80004c2:	233f      	movs	r3, #63	; 0x3f
 80004c4:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c6:	2303      	movs	r3, #3
 80004c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ce:	2308      	movs	r3, #8
 80004d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004d2:	2340      	movs	r3, #64	; 0x40
 80004d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004d6:	2340      	movs	r3, #64	; 0x40
 80004d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004de:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004e0:	2340      	movs	r3, #64	; 0x40
 80004e2:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80004e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004e8:	2104      	movs	r1, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f007 fd68 	bl	8007fc0 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80004f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004fe:	f000 f88f 	bl	8000620 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <SystemClock_Config+0x128>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <SystemClock_Config+0x128>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <SystemClock_Config+0x128>)
 8000510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <SystemClock_Config+0x128>)
 8000516:	f043 0302 	orr.w	r3, r3, #2
 800051a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <SystemClock_Config+0x128>)
 8000520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000524:	f003 0302 	and.w	r3, r3, #2
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 800052c:	f003 f97e 	bl	800382c <HAL_EnableCompensationCell>
}
 8000530:	bf00      	nop
 8000532:	3778      	adds	r7, #120	; 0x78
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	58000400 	.word	0x58000400
 800053c:	58024800 	.word	0x58024800
 8000540:	58024400 	.word	0x58024400

08000544 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11b      	bne.n	800058e <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000556:	f3bf 8f4f 	dsb	sy
}
 800055a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055c:	f3bf 8f6f 	isb	sy
}
 8000560:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000564:	2200      	movs	r2, #0
 8000566:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800056a:	f3bf 8f4f 	dsb	sy
}
 800056e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000570:	f3bf 8f6f 	isb	sy
}
 8000574:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000582:	f3bf 8f4f 	dsb	sy
}
 8000586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000588:	f3bf 8f6f 	isb	sy
}
 800058c:	e000      	b.n	8000590 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800058e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <CPU_CACHE_Enable+0xd8>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000598:	2b00      	cmp	r3, #0
 800059a:	d138      	bne.n	800060e <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <CPU_CACHE_Enable+0xd8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005a4:	f3bf 8f4f 	dsb	sy
}
 80005a8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	0b5b      	lsrs	r3, r3, #13
 80005b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ba:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005c4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	015a      	lsls	r2, r3, #5
 80005ca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005ce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005d4:	4911      	ldr	r1, [pc, #68]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005d6:	4313      	orrs	r3, r2
 80005d8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1ef      	bne.n	80005c6 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1e5      	bne.n	80005bc <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <CPU_CACHE_Enable+0xd8>)
 80005fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000600:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
}
 800060c:	e000      	b.n	8000610 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800060e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 f8d5 	bl	80017d8 <BSP_LED_On>
  while (1)
 800062e:	e7fe      	b.n	800062e <Error_Handler+0xe>

08000630 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	db04      	blt.n	8000648 <_isatty+0x18>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b02      	cmp	r3, #2
 8000642:	dc01      	bgt.n	8000648 <_isatty+0x18>
    return 1;
 8000644:	2301      	movs	r3, #1
 8000646:	e005      	b.n	8000654 <_isatty+0x24>

  errno = EBADF;
 8000648:	f00c fd02 	bl	800d050 <__errno>
 800064c:	4603      	mov	r3, r0
 800064e:	2209      	movs	r2, #9
 8000650:	601a      	str	r2, [r3, #0]
  return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <_close>:

int _close(int fd) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db04      	blt.n	8000674 <_close+0x18>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	dc01      	bgt.n	8000674 <_close+0x18>
    return 0;
 8000670:	2300      	movs	r3, #0
 8000672:	e006      	b.n	8000682 <_close+0x26>

  errno = EBADF;
 8000674:	f00c fcec 	bl	800d050 <__errno>
 8000678:	4603      	mov	r3, r0
 800067a:	2209      	movs	r2, #9
 800067c:	601a      	str	r2, [r3, #0]
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000682:	4618      	mov	r0, r3
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000696:	f00c fcdb 	bl	800d050 <__errno>
 800069a:	4603      	mov	r3, r0
 800069c:	2209      	movs	r2, #9
 800069e:	601a      	str	r2, [r3, #0]
  return -1;
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_fstat>:



int _fstat(int fd, struct stat* st) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db08      	blt.n	80006ce <_fstat+0x22>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	dc05      	bgt.n	80006ce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c8:	605a      	str	r2, [r3, #4]
    return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e005      	b.n	80006da <_fstat+0x2e>
  }

  errno = EBADF;
 80006ce:	f00c fcbf 	bl	800d050 <__errno>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2209      	movs	r2, #9
 80006d6:	601a      	str	r2, [r3, #0]
  return 0;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_read>:


int _read(int fd, char* ptr, int len) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d110      	bne.n	8000718 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_read+0x4c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fe:	2201      	movs	r2, #1
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	f00a ff73 	bl	800b5ec <HAL_UART_Receive>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <_read+0x30>
      return 1;
 8000710:	2301      	movs	r3, #1
 8000712:	e008      	b.n	8000726 <_read+0x42>
    else
      return EIO;
 8000714:	2305      	movs	r3, #5
 8000716:	e006      	b.n	8000726 <_read+0x42>
  }
  errno = EBADF;
 8000718:	f00c fc9a 	bl	800d050 <__errno>
 800071c:	4603      	mov	r3, r0
 800071e:	2209      	movs	r2, #9
 8000720:	601a      	str	r2, [r3, #0]
  return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000726:	4618      	mov	r0, r3
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	240001b4 	.word	0x240001b4

08000734 <_write>:

int _write(int fd, char* ptr, int len) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d002      	beq.n	800074c <_write+0x18>
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b02      	cmp	r3, #2
 800074a:	d111      	bne.n	8000770 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <_write+0x54>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000758:	68b9      	ldr	r1, [r7, #8]
 800075a:	f00a feb9 	bl	800b4d0 <HAL_UART_Transmit>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d101      	bne.n	800076c <_write+0x38>
      return len;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	e008      	b.n	800077e <_write+0x4a>
    else
      return EIO;
 800076c:	2305      	movs	r3, #5
 800076e:	e006      	b.n	800077e <_write+0x4a>
  }
  errno = EBADF;
 8000770:	f00c fc6e 	bl	800d050 <__errno>
 8000774:	4603      	mov	r3, r0
 8000776:	2209      	movs	r2, #9
 8000778:	601a      	str	r2, [r3, #0]
  return -1;
 800077a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800077e:	4618      	mov	r0, r3
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240001b4 	.word	0x240001b4

0800078c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a22      	ldr	r2, [pc, #136]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 800079a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4a20      	ldr	r2, [pc, #128]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007a2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	4a1e      	ldr	r2, [pc, #120]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007aa:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007b2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	4a1a      	ldr	r2, [pc, #104]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ba:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a18      	ldr	r2, [pc, #96]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007c2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ca:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007d2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007da:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e0:	4a10      	ldr	r2, [pc, #64]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007e2:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007ea:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <UTIL_LCD_SetFuncDriver+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <UTIL_LCD_SetFuncDriver+0xa0>)
 80007fe:	4611      	mov	r1, r2
 8000800:	2000      	movs	r0, #0
 8000802:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	4a09      	ldr	r2, [pc, #36]	; (8000830 <UTIL_LCD_SetFuncDriver+0xa4>)
 800080a:	4611      	mov	r1, r2
 800080c:	2000      	movs	r0, #0
 800080e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <UTIL_LCD_SetFuncDriver+0x98>)
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000816:	4611      	mov	r1, r2
 8000818:	2000      	movs	r0, #0
 800081a:	4798      	blx	r3
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	240001f8 	.word	0x240001f8
 8000828:	240001b8 	.word	0x240001b8
 800082c:	240001cc 	.word	0x240001cc
 8000830:	240001d0 	.word	0x240001d0
 8000834:	240001d4 	.word	0x240001d4

08000838 <UTIL_LCD_SetLayer>:
/**
  * @brief  Set the LCD layer.
  * @param  Layer  LCD layer
  */
void UTIL_LCD_SetLayer(uint32_t Layer)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(FuncDriver.SetLayer != NULL)
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00c      	beq.n	8000862 <UTIL_LCD_SetLayer+0x2a>
  {
    if(FuncDriver.SetLayer(DrawProp->LcdDevice, Layer) == 0)
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <UTIL_LCD_SetLayer+0x34>)
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800084e:	6912      	ldr	r2, [r2, #16]
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4610      	mov	r0, r2
 8000854:	4798      	blx	r3
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <UTIL_LCD_SetLayer+0x2a>
    {
      DrawProp->LcdLayer = Layer;
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <UTIL_LCD_SetLayer+0x38>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60d3      	str	r3, [r2, #12]
    }
  }
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	240001f8 	.word	0x240001f8
 8000870:	240001b8 	.word	0x240001b8

08000874 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b087      	sub	sp, #28
 8000878:	af02      	add	r7, sp, #8
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	2b02      	cmp	r3, #2
 8000888:	d118      	bne.n	80008bc <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <UTIL_LCD_DrawHLine+0x68>)
 800088c:	689c      	ldr	r4, [r3, #8]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 8000890:	6918      	ldr	r0, [r3, #16]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	08db      	lsrs	r3, r3, #3
 8000896:	f003 021f 	and.w	r2, r3, #31
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	0a9b      	lsrs	r3, r3, #10
 800089e:	015b      	lsls	r3, r3, #5
 80008a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80008a4:	431a      	orrs	r2, r3
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	0cdb      	lsrs	r3, r3, #19
 80008aa:	02db      	lsls	r3, r3, #11
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	68f9      	ldr	r1, [r7, #12]
 80008b8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80008ba:	e009      	b.n	80008d0 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <UTIL_LCD_DrawHLine+0x68>)
 80008be:	689c      	ldr	r4, [r3, #8]
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <UTIL_LCD_DrawHLine+0x64>)
 80008c2:	6918      	ldr	r0, [r3, #16]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	47a0      	blx	r4
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	240001b8 	.word	0x240001b8
 80008dc:	240001f8 	.word	0x240001f8

080008e0 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d118      	bne.n	8000928 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <UTIL_LCD_DrawVLine+0x68>)
 80008f8:	68dc      	ldr	r4, [r3, #12]
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 80008fc:	6918      	ldr	r0, [r3, #16]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	f003 021f 	and.w	r2, r3, #31
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	0a9b      	lsrs	r3, r3, #10
 800090a:	015b      	lsls	r3, r3, #5
 800090c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000910:	431a      	orrs	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	0cdb      	lsrs	r3, r3, #19
 8000916:	02db      	lsls	r3, r3, #11
 8000918:	b29b      	uxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	68f9      	ldr	r1, [r7, #12]
 8000924:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8000926:	e009      	b.n	800093c <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <UTIL_LCD_DrawVLine+0x68>)
 800092a:	68dc      	ldr	r4, [r3, #12]
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <UTIL_LCD_DrawVLine+0x64>)
 800092e:	6918      	ldr	r0, [r3, #16]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	47a0      	blx	r4
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	bd90      	pop	{r4, r7, pc}
 8000944:	240001b8 	.word	0x240001b8
 8000948:	240001f8 	.word	0x240001f8

0800094c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <UTIL_LCD_Clear+0x28>)
 8000956:	695a      	ldr	r2, [r3, #20]
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <UTIL_LCD_Clear+0x28>)
 800095a:	6999      	ldr	r1, [r3, #24]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	460b      	mov	r3, r1
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f831 	bl	80009cc <UTIL_LCD_FillRect>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	240001b8 	.word	0x240001b8

08000978 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f7ff ff71 	bl	8000874 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	4413      	add	r3, r2
 8000998:	1e59      	subs	r1, r3, #1
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff68 	bl	8000874 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f7ff ff98 	bl	80008e0 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	1e58      	subs	r0, r3, #1
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	f7ff ff8f 	bl	80008e0 <UTIL_LCD_DrawVLine>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d11a      	bne.n	8000a18 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <UTIL_LCD_FillRect+0x70>)
 80009e4:	691c      	ldr	r4, [r3, #16]
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 80009e8:	6918      	ldr	r0, [r3, #16]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	f003 021f 	and.w	r2, r3, #31
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	0a9b      	lsrs	r3, r3, #10
 80009f6:	015b      	lsls	r3, r3, #5
 80009f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80009fc:	431a      	orrs	r2, r3
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	0cdb      	lsrs	r3, r3, #19
 8000a02:	02db      	lsls	r3, r3, #11
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4313      	orrs	r3, r2
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	68f9      	ldr	r1, [r7, #12]
 8000a14:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8000a16:	e00b      	b.n	8000a30 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <UTIL_LCD_FillRect+0x70>)
 8000a1a:	691c      	ldr	r4, [r3, #16]
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <UTIL_LCD_FillRect+0x6c>)
 8000a1e:	6918      	ldr	r0, [r3, #16]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	47a0      	blx	r4
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	240001b8 	.word	0x240001b8
 8000a3c:	240001f8 	.word	0x240001f8

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	210f      	movs	r1, #15
 8000a68:	f06f 0001 	mvn.w	r0, #1
 8000a6c:	f002 ffc9 	bl	8003a02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x74>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <HAL_MspInit+0x78>)
 8000aa6:	f004 ff75 	bl	8005994 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	58024400 	.word	0x58024400
 8000ab8:	58021000 	.word	0x58021000

08000abc <HAL_TIM_Base_MspInit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }

}
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000acc:	d10e      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ad4:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	58024400 	.word	0x58024400

08000afc <HAL_TIM_MspPostInit>:
  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d11e      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <HAL_TIM_MspPostInit+0x68>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     -----> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	4804      	ldr	r0, [pc, #16]	; (8000b68 <HAL_TIM_MspPostInit+0x6c>)
 8000b58:	f004 ff1c 	bl	8005994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400
 8000b68:	58020000 	.word	0x58020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f002 fdf6 	bl	800378c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ba0:	f00b fd7c 	bl	800c69c <xTaskGetSchedulerState>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d001      	beq.n	8000bae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000baa:	f00b fde5 	bl	800c778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fe2c 	bl	8001814 <BSP_PB_IRQHandler>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM3_IRQHandler+0x10>)
 8000bc6:	f009 fc45 	bl	800a454 <HAL_TIM_IRQHandler>
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000164 	.word	0x24000164

08000bd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART3_IRQHandler+0x10>)
 8000bda:	f00a fdcf 	bl	800b77c <HAL_UART_IRQHandler>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	240000d0 	.word	0x240000d0

08000be8 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fe23 	bl	8001838 <BSP_AUDIO_OUT_IRQHandler>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <DMA2_Stream4_IRQHandler+0x14>)
 8000bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fc96 	bl	8004534 <HAL_DMA_IRQHandler>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	240002d8 	.word	0x240002d8

08000c10 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8000c14:	2130      	movs	r1, #48	; 0x30
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fe22 	bl	8001860 <BSP_AUDIO_IN_IRQHandler>

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f002 fa0d 	bl	8003044 <BSP_SDRAM_IRQHandler>

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  return 1;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <_kill>:

int _kill(int pid, int sig)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c48:	f00c fa02 	bl	800d050 <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2216      	movs	r2, #22
 8000c50:	601a      	str	r2, [r3, #0]
  return -1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_exit>:

void _exit (int status)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffe7 	bl	8000c3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c70:	e7fe      	b.n	8000c70 <_exit+0x12>
	...

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	; (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f00c f9d4 	bl	800d050 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	24080000 	.word	0x24080000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	24000224 	.word	0x24000224
 8000cdc:	24001590 	.word	0x24001590

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b37      	ldr	r3, [pc, #220]	; (8000dc4 <SystemInit+0xe4>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a36      	ldr	r2, [pc, #216]	; (8000dc4 <SystemInit+0xe4>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <SystemInit+0xe8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	2b06      	cmp	r3, #6
 8000cfe:	d807      	bhi.n	8000d10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <SystemInit+0xe8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f023 030f 	bic.w	r3, r3, #15
 8000d08:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <SystemInit+0xe8>)
 8000d0a:	f043 0307 	orr.w	r3, r3, #7
 8000d0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <SystemInit+0xec>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <SystemInit+0xec>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SystemInit+0xec>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <SystemInit+0xec>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	4929      	ldr	r1, [pc, #164]	; (8000dcc <SystemInit+0xec>)
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <SystemInit+0xf0>)
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2e:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <SystemInit+0xe8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <SystemInit+0xe8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 030f 	bic.w	r3, r3, #15
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <SystemInit+0xe8>)
 8000d44:	f043 0307 	orr.w	r3, r3, #7
 8000d48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <SystemInit+0xec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <SystemInit+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <SystemInit+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <SystemInit+0xec>)
 8000d5e:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <SystemInit+0xf4>)
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <SystemInit+0xec>)
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <SystemInit+0xf8>)
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <SystemInit+0xec>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <SystemInit+0xfc>)
 8000d6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <SystemInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <SystemInit+0xec>)
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <SystemInit+0xfc>)
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <SystemInit+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SystemInit+0xec>)
 8000d82:	4a16      	ldr	r2, [pc, #88]	; (8000ddc <SystemInit+0xfc>)
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <SystemInit+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <SystemInit+0xec>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <SystemInit+0xec>)
 8000d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <SystemInit+0xec>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0x100>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <SystemInit+0x104>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000daa:	d202      	bcs.n	8000db2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <SystemInit+0x108>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <SystemInit+0x10c>)
 8000db4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000db8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	52002000 	.word	0x52002000
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dd4:	02020200 	.word	0x02020200
 8000dd8:	01ff0000 	.word	0x01ff0000
 8000ddc:	01010280 	.word	0x01010280
 8000de0:	5c001000 	.word	0x5c001000
 8000de4:	ffff0000 	.word	0xffff0000
 8000de8:	51008108 	.word	0x51008108
 8000dec:	52004000 	.word	0x52004000

08000df0 <Reset_Handler>:
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0xe>
 8000df4:	f7ff ff74 	bl	8000ce0 <SystemInit>
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopFillZerobss+0x1a>)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:
 8000e02:	58d4      	ldr	r4, [r2, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:
 8000e08:	18c4      	adds	r4, r0, r3
 8000e0a:	428c      	cmp	r4, r1
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopFillZerobss+0x1e>)
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopFillZerobss+0x22>)
 8000e12:	2300      	movs	r3, #0
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:
 8000e1a:	42a2      	cmp	r2, r4
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>
 8000e1e:	f00c f91d 	bl	800d05c <__libc_init_array>
 8000e22:	f7ff faad 	bl	8000380 <main>
 8000e26:	4770      	bx	lr
 8000e28:	24080000 	.word	0x24080000
 8000e2c:	24000000 	.word	0x24000000
 8000e30:	240000b4 	.word	0x240000b4
 8000e34:	0800e39c 	.word	0x0800e39c
 8000e38:	240000b4 	.word	0x240000b4
 8000e3c:	2400158c 	.word	0x2400158c

08000e40 <ADC3_IRQHandler>:
 8000e40:	e7fe      	b.n	8000e40 <ADC3_IRQHandler>
	...

08000e44 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d103      	bne.n	8000e5c <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	e02c      	b.n	8000eb6 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	891a      	ldrh	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <FT5336_RegisterBusIO+0x7c>)
 8000e90:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <FT5336_RegisterBusIO+0x80>)
 8000e96:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d004      	beq.n	8000eb0 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4798      	blx	r3
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	e002      	b.n	8000eb6 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	080012bd 	.word	0x080012bd
 8000ec4:	080012f1 	.word	0x080012f1

08000ec8 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2205      	movs	r2, #5
 8000ee2:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000eea:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000ef2:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10d      	bne.n	8000f34 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f987 	bl	8001232 <FT5336_DisableIT>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d103      	bne.n	8000f68 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8000f68:	68fb      	ldr	r3, [r7, #12]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f103 0218 	add.w	r2, r3, #24
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f000 fa25 	bl	80013de <ft5336_radian_value>
 8000f94:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f103 0218 	add.w	r2, r3, #24
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	f000 fa2b 	bl	8001400 <ft5336_offset_left_right>
 8000faa:	4602      	mov	r2, r0
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f103 0218 	add.w	r2, r3, #24
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f000 fa2e 	bl	8001422 <ft5336_offset_up_down>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f103 0218 	add.w	r2, r3, #24
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f000 fa31 	bl	8001444 <ft5336_disatnce_left_right>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f103 0218 	add.w	r2, r3, #24
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	f000 fa34 	bl	8001466 <ft5336_distance_up_down>
 8000ffe:	4602      	mov	r2, r0
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f103 0218 	add.w	r2, r3, #24
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	4610      	mov	r0, r2
 8001016:	f000 fa37 	bl	8001488 <ft5336_distance_zoom>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3318      	adds	r3, #24
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fa3f 	bl	80014cc <ft5336_chip_id>
 800104e:	4603      	mov	r3, r0
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f908 	bl	800127c <FT5336_DetectTouch>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f103 0018 	add.w	r0, r3, #24
 800107a:	f107 0208 	add.w	r2, r7, #8
 800107e:	2304      	movs	r3, #4
 8001080:	2103      	movs	r1, #3
 8001082:	f000 f94f 	bl	8001324 <ft5336_read_reg>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e00f      	b.n	80010b4 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8001094:	7a3b      	ldrb	r3, [r7, #8]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800109c:	7a7a      	ldrb	r2, [r7, #9]
 800109e:	431a      	orrs	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 80010a4:	7abb      	ldrb	r3, [r7, #10]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80010ac:	7afa      	ldrb	r2, [r7, #11]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b08c      	sub	sp, #48	; 0x30
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 f8d5 	bl	800127c <FT5336_DetectTouch>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f103 0018 	add.w	r0, r3, #24
 80010e0:	f107 0208 	add.w	r2, r7, #8
 80010e4:	231e      	movs	r3, #30
 80010e6:	2103      	movs	r1, #3
 80010e8:	f000 f91c 	bl	8001324 <ft5336_read_reg>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f8:	e077      	b.n	80011ea <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80010fe:	e071      	b.n	80011e4 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8001100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	443b      	add	r3, r7
 800110e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	3301      	adds	r3, #1
 8001124:	3330      	adds	r3, #48	; 0x30
 8001126:	443b      	add	r3, r7
 8001128:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800112c:	ea41 0203 	orr.w	r2, r1, r3
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800113a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	3302      	adds	r3, #2
 8001146:	3330      	adds	r3, #48	; 0x30
 8001148:	443b      	add	r3, r7
 800114a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	3303      	adds	r3, #3
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	443b      	add	r3, r7
 8001164:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001168:	4319      	orrs	r1, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800116e:	3206      	adds	r2, #6
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8001174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	3330      	adds	r3, #48	; 0x30
 8001180:	443b      	add	r3, r7
 8001182:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001186:	099b      	lsrs	r3, r3, #6
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001190:	3210      	adds	r2, #16
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 8001196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	3304      	adds	r3, #4
 80011a2:	3330      	adds	r3, #48	; 0x30
 80011a4:	443b      	add	r3, r7
 80011a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011aa:	4619      	mov	r1, r3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	330a      	adds	r3, #10
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 80011b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	3305      	adds	r3, #5
 80011c4:	3330      	adds	r3, #48	; 0x30
 80011c6:	443b      	add	r3, r7
 80011c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	3314      	adds	r3, #20
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 80011de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e0:	3301      	adds	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d98a      	bls.n	8001100 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3318      	adds	r3, #24
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f8bb 	bl	8001380 <ft5336_gest_id>
 800120a:	4603      	mov	r3, r0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3318      	adds	r3, #24
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f941 	bl	80014aa <ft5336_g_mode>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3318      	adds	r3, #24
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f932 	bl	80014aa <ft5336_g_mode>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3318      	adds	r3, #24
 8001288:	f107 020b 	add.w	r2, r7, #11
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f886 	bl	80013a0 <ft5336_td_status>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e007      	b.n	80012b2 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 80012a2:	7afb      	ldrb	r3, [r7, #11]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d902      	bls.n	80012ae <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e001      	b.n	80012b2 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	461a      	mov	r2, r3
 80012c8:	460b      	mov	r3, r1
 80012ca:	72fb      	strb	r3, [r7, #11]
 80012cc:	4613      	mov	r3, r2
 80012ce:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	691c      	ldr	r4, [r3, #16]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	8918      	ldrh	r0, [r3, #8]
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	b299      	uxth	r1, r3
 80012e0:	893b      	ldrh	r3, [r7, #8]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	47a0      	blx	r4
 80012e6:	4603      	mov	r3, r0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}

080012f0 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	461a      	mov	r2, r3
 80012fc:	460b      	mov	r3, r1
 80012fe:	72fb      	strb	r3, [r7, #11]
 8001300:	4613      	mov	r3, r2
 8001302:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	68dc      	ldr	r4, [r3, #12]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	8918      	ldrh	r0, [r3, #8]
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	b299      	uxth	r1, r3
 8001314:	893b      	ldrh	r3, [r7, #8]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	47a0      	blx	r4
 800131a:	4603      	mov	r3, r0
}
 800131c:	4618      	mov	r0, r3
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	72fb      	strb	r3, [r7, #11]
 8001334:	4613      	mov	r3, r2
 8001336:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685c      	ldr	r4, [r3, #4]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	893b      	ldrh	r3, [r7, #8]
 8001342:	7af9      	ldrb	r1, [r7, #11]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	47a0      	blx	r4
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}

08001352 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8001352:	b590      	push	{r4, r7, lr}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	60f8      	str	r0, [r7, #12]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	461a      	mov	r2, r3
 800135e:	460b      	mov	r3, r1
 8001360:	72fb      	strb	r3, [r7, #11]
 8001362:	4613      	mov	r3, r2
 8001364:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6898      	ldr	r0, [r3, #8]
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	7af9      	ldrb	r1, [r7, #11]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	47a0      	blx	r4
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800138a:	2301      	movs	r3, #1
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	2101      	movs	r1, #1
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ffc7 	bl	8001324 <ft5336_read_reg>
 8001396:	4603      	mov	r3, r0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80013aa:	2301      	movs	r3, #1
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	2102      	movs	r1, #2
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffb7 	bl	8001324 <ft5336_read_reg>
 80013b6:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10a      	bne.n	80013d4 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80013ea:	1cfa      	adds	r2, r7, #3
 80013ec:	2301      	movs	r3, #1
 80013ee:	2191      	movs	r1, #145	; 0x91
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ffae 	bl	8001352 <ft5336_write_reg>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800140c:	1cfa      	adds	r2, r7, #3
 800140e:	2301      	movs	r3, #1
 8001410:	2192      	movs	r1, #146	; 0x92
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ff9d 	bl	8001352 <ft5336_write_reg>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800142e:	1cfa      	adds	r2, r7, #3
 8001430:	2301      	movs	r3, #1
 8001432:	2193      	movs	r1, #147	; 0x93
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff8c 	bl	8001352 <ft5336_write_reg>
 800143a:	4603      	mov	r3, r0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8001450:	1cfa      	adds	r2, r7, #3
 8001452:	2301      	movs	r3, #1
 8001454:	2194      	movs	r1, #148	; 0x94
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff7b 	bl	8001352 <ft5336_write_reg>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8001472:	1cfa      	adds	r2, r7, #3
 8001474:	2301      	movs	r3, #1
 8001476:	2195      	movs	r1, #149	; 0x95
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff6a 	bl	8001352 <ft5336_write_reg>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8001494:	1cfa      	adds	r2, r7, #3
 8001496:	2301      	movs	r3, #1
 8001498:	2196      	movs	r1, #150	; 0x96
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff59 	bl	8001352 <ft5336_write_reg>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 80014b6:	1cfa      	adds	r2, r7, #3
 80014b8:	2301      	movs	r3, #1
 80014ba:	21a4      	movs	r1, #164	; 0xa4
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff48 	bl	8001352 <ft5336_write_reg>
 80014c2:	4603      	mov	r3, r0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80014d6:	2301      	movs	r3, #1
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	21a8      	movs	r1, #168	; 0xa8
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff21 	bl	8001324 <ft5336_read_reg>
 80014e2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d107      	bne.n	80014fa <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	781a      	ldrb	r2, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001512:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f832 	bl	8001584 <MT48LC4M32B2_ClockEnable>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d128      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f000 f8e2 	bl	80016f0 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f84a 	bl	80015cc <MT48LC4M32B2_Precharge>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11c      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6819      	ldr	r1, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	461a      	mov	r2, r3
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f897 	bl	800167c <MT48LC4M32B2_RefreshMode>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f85c 	bl	8001614 <MT48LC4M32B2_ModeRegConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10a      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8ad 	bl	80016c8 <MT48LC4M32B2_RefreshRate>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001578:	68fb      	ldr	r3, [r7, #12]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 8001590:	2201      	movs	r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001594:	4a0c      	ldr	r2, [pc, #48]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 800159c:	2201      	movs	r2, #1
 800159e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80015a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015aa:	4907      	ldr	r1, [pc, #28]	; (80015c8 <MT48LC4M32B2_ClockEnable+0x44>)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f008 fc31 	bl	8009e14 <HAL_SDRAM_SendCommand>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015bc:	e000      	b.n	80015c0 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80015be:	2300      	movs	r3, #0
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000228 	.word	0x24000228

080015cc <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4907      	ldr	r1, [pc, #28]	; (8001610 <MT48LC4M32B2_Precharge+0x44>)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f008 fc0d 	bl	8009e14 <HAL_SDRAM_SendCommand>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001604:	e000      	b.n	8001608 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001606:	2300      	movs	r3, #0
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	24000228 	.word	0x24000228

08001614 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001626:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800162c:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001632:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800163e:	2204      	movs	r2, #4
 8001640:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001648:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800164c:	2201      	movs	r2, #1
 800164e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001650:	4a09      	ldr	r2, [pc, #36]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165a:	4907      	ldr	r1, [pc, #28]	; (8001678 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f008 fbd9 	bl	8009e14 <HAL_SDRAM_SendCommand>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800166c:	e000      	b.n	8001670 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800166e:	2300      	movs	r3, #0
  }
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000228 	.word	0x24000228

0800167c <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8001688:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 8001696:	2208      	movs	r2, #8
 8001698:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800169a:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80016a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a4:	4907      	ldr	r1, [pc, #28]	; (80016c4 <MT48LC4M32B2_RefreshMode+0x48>)
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f008 fbb4 	bl	8009e14 <HAL_SDRAM_SendCommand>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d002      	beq.n	80016b8 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	e000      	b.n	80016ba <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80016b8:	2300      	movs	r3, #0
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	24000228 	.word	0x24000228

080016c8 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f008 fbd2 	bl	8009e7e <HAL_SDRAM_ProgramRefreshRate>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d002      	beq.n	80016e6 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e4:	e000      	b.n	80016e8 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80016e6:	2300      	movs	r3, #0
  }
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80016f8:	f002 f85c 	bl	80037b4 <HAL_GetTick>
 80016fc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80016fe:	bf00      	nop
 8001700:	f002 f858 	bl	80037b4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8f7      	bhi.n	8001700 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10f      	bne.n	8001750 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE() ;
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <BSP_LED_Init+0xb0>)
 8001732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <BSP_LED_Init+0xb0>)
 8001738:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800173c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <BSP_LED_Init+0xb0>)
 8001742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	e015      	b.n	800177c <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10f      	bne.n	8001776 <BSP_LED_Init+0x5a>
  {
    LED2_GPIO_CLK_ENABLE() ;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <BSP_LED_Init+0xb0>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <BSP_LED_Init+0xb0>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <BSP_LED_Init+0xb0>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	e002      	b.n	800177c <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001776:	f06f 0301 	mvn.w	r3, #1
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN [Led];
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <BSP_LED_Init+0xb4>)
 8001780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001784:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init (LED_PORT [Led], &gpio_init_structure);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <BSP_LED_Init+0xb8>)
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	f107 0210 	add.w	r2, r7, #16
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 f8f7 	bl	8005994 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <BSP_LED_Init+0xb8>)
 80017aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <BSP_LED_Init+0xb4>)
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	f004 fba4 	bl	8005f08 <HAL_GPIO_WritePin>
  return ret;
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  }
 80017c2:	4618      	mov	r0, r3
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	0800e194 	.word	0x0800e194
 80017d4:	24000038 	.word	0x24000038

080017d8 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <BSP_LED_On+0x34>)
 80017ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	4a07      	ldr	r2, [pc, #28]	; (8001810 <BSP_LED_On+0x38>)
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2200      	movs	r2, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	f004 fb84 	bl	8005f08 <HAL_GPIO_WritePin>
  return ret;
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	24000038 	.word	0x24000038
 8001810:	0800e194 	.word	0x0800e194

08001814 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <BSP_PB_IRQHandler+0x20>)
 8001824:	4413      	add	r3, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f004 f884 	bl	8005934 <HAL_EXTI_IRQHandler>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000238 	.word	0x24000238

08001838 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8001848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fe71 	bl	8004534 <HAL_DMA_IRQHandler>
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000240 	.word	0x24000240

08001860 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b30      	cmp	r3, #48	; 0x30
 800186e:	d002      	beq.n	8001876 <BSP_AUDIO_IN_IRQHandler+0x16>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8001878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fe59 	bl	8004534 <HAL_DMA_IRQHandler>
  }

}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	240002d8 	.word	0x240002d8

08001890 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001896:	2300      	movs	r3, #0
 8001898:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <BSP_I2C4_Init+0x64>)
 800189c:	4a16      	ldr	r2, [pc, #88]	; (80018f8 <BSP_I2C4_Init+0x68>)
 800189e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11f      	bne.n	80018e8 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80018a8:	4b14      	ldr	r3, [pc, #80]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <BSP_I2C4_Init+0x6c>)
 80018b0:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018b4:	f004 fe44 	bl	8006540 <HAL_I2C_GetState>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018c0:	f000 fb60 	bl	8001f84 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80018c4:	f006 fedc 	bl	8008680 <HAL_RCC_GetPCLK2Freq>
 80018c8:	4603      	mov	r3, r0
 80018ca:	490d      	ldr	r1, [pc, #52]	; (8001900 <BSP_I2C4_Init+0x70>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f8e3 	bl	8001a98 <I2C_GetTiming>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <BSP_I2C4_Init+0x64>)
 80018d8:	f000 f838 	bl	800194c <MX_I2C4_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80018e2:	f06f 0307 	mvn.w	r3, #7
 80018e6:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24000d78 	.word	0x24000d78
 80018f8:	58001c00 	.word	0x58001c00
 80018fc:	24000370 	.word	0x24000370
 8001900:	000186a0 	.word	0x000186a0

08001904 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3b01      	subs	r3, #1
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 8001916:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <BSP_I2C4_DeInit+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <BSP_I2C4_DeInit+0x44>)
 8001922:	f000 fb9b 	bl	800205c <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8001926:	4808      	ldr	r0, [pc, #32]	; (8001948 <BSP_I2C4_DeInit+0x44>)
 8001928:	f004 fb98 	bl	800605c <HAL_I2C_DeInit>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8001932:	f06f 0307 	mvn.w	r3, #7
 8001936:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24000370 	.word	0x24000370
 8001948:	24000d78 	.word	0x24000d78

0800194c <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f004 fad6 	bl	8005f3c <HAL_I2C_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e014      	b.n	80019c6 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f005 f89e 	bl	8006ae4 <HAL_I2CEx_ConfigAnalogFilter>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e008      	b.n	80019c6 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80019b4:	2100      	movs	r1, #0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f005 f8df 	bl	8006b7a <HAL_I2CEx_ConfigDigitalFilter>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	60ba      	str	r2, [r7, #8]
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	81fb      	strh	r3, [r7, #14]
 80019de:	460b      	mov	r3, r1
 80019e0:	81bb      	strh	r3, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80019e6:	89b9      	ldrh	r1, [r7, #12]
 80019e8:	89f8      	ldrh	r0, [r7, #14]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f000 fb57 	bl	80020a4 <I2C4_WriteReg>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d102      	bne.n	8001a02 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e00c      	b.n	8001a1c <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <BSP_I2C4_WriteReg+0x58>)
 8001a04:	f004 fdaa 	bl	800655c <HAL_I2C_GetError>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d103      	bne.n	8001a16 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e002      	b.n	8001a1c <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a16:	f06f 0303 	mvn.w	r3, #3
 8001a1a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001a1c:	697b      	ldr	r3, [r7, #20]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	24000d78 	.word	0x24000d78

08001a2c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60ba      	str	r2, [r7, #8]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	81bb      	strh	r3, [r7, #12]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8001a42:	89b9      	ldrh	r1, [r7, #12]
 8001a44:	89f8      	ldrh	r0, [r7, #14]
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f000 fb4f 	bl	80020f0 <I2C4_ReadReg>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00c      	b.n	8001a78 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8001a5e:	4809      	ldr	r0, [pc, #36]	; (8001a84 <BSP_I2C4_ReadReg+0x58>)
 8001a60:	f004 fd7c 	bl	800655c <HAL_I2C_GetError>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d103      	bne.n	8001a72 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001a6a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e002      	b.n	8001a78 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001a72:	f06f 0303 	mvn.w	r3, #3
 8001a76:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8001a78:	697b      	ldr	r3, [r7, #20]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000d78 	.word	0x24000d78

08001a88 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001a8c:	f001 fe92 	bl	80037b4 <HAL_GetTick>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d06b      	beq.n	8001b84 <I2C_GetTiming+0xec>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d068      	beq.n	8001b84 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e060      	b.n	8001b7a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ab8:	4a35      	ldr	r2, [pc, #212]	; (8001b90 <I2C_GetTiming+0xf8>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d352      	bcc.n	8001b74 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8001ace:	4a30      	ldr	r2, [pc, #192]	; (8001b90 <I2C_GetTiming+0xf8>)
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3308      	adds	r3, #8
 8001adc:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d847      	bhi.n	8001b74 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f856 	bl	8001b98 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f940 	bl	8001d74 <I2C_Compute_SCLL_SCLH>
 8001af4:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b7f      	cmp	r3, #127	; 0x7f
 8001afa:	d842      	bhi.n	8001b82 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001afc:	4925      	ldr	r1, [pc, #148]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001b0e:	4821      	ldr	r0, [pc, #132]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4403      	add	r3, r0
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	051b      	lsls	r3, r3, #20
 8001b22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001b26:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001b28:	481a      	ldr	r0, [pc, #104]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4403      	add	r3, r0
 8001b36:	3308      	adds	r3, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8001b40:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4403      	add	r3, r0
 8001b50:	330c      	adds	r3, #12
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8001b58:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8001b5a:	480e      	ldr	r0, [pc, #56]	; (8001b94 <I2C_GetTiming+0xfc>)
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4403      	add	r3, r0
 8001b68:	3310      	adds	r3, #16
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	617b      	str	r3, [r7, #20]
        }
        break;
 8001b72:	e006      	b.n	8001b82 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	3301      	adds	r3, #1
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d99b      	bls.n	8001ab8 <I2C_GetTiming+0x20>
 8001b80:	e000      	b.n	8001b84 <I2C_GetTiming+0xec>
        break;
 8001b82:	bf00      	nop
      }
    }
  }

  return ret;
 8001b84:	697b      	ldr	r3, [r7, #20]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800e19c 	.word	0x0800e19c
 8001b94:	24000374 	.word	0x24000374

08001b98 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08f      	sub	sp, #60	; 0x3c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	085a      	lsrs	r2, r3, #1
 8001baa:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bb4:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001bb6:	2332      	movs	r3, #50	; 0x32
 8001bb8:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8001bba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bbe:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001bc0:	4a69      	ldr	r2, [pc, #420]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3324      	adds	r3, #36	; 0x24
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4a65      	ldr	r2, [pc, #404]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	330c      	adds	r3, #12
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001be4:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001be6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8001be8:	495f      	ldr	r1, [pc, #380]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	202c      	movs	r0, #44	; 0x2c
 8001bee:	fb00 f303 	mul.w	r3, r0, r3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3328      	adds	r3, #40	; 0x28
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	69f9      	ldr	r1, [r7, #28]
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c04:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3310      	adds	r3, #16
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3320      	adds	r3, #32
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001c28:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c2a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8001c2c:	494e      	ldr	r1, [pc, #312]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	440b      	add	r3, r1
 8001c38:	3328      	adds	r3, #40	; 0x28
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	69f9      	ldr	r1, [r7, #28]
 8001c40:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8001c48:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	212c      	movs	r1, #44	; 0x2c
 8001c4e:	fb01 f303 	mul.w	r3, r1, r3
 8001c52:	4413      	add	r3, r2
 8001c54:	3320      	adds	r3, #32
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	212c      	movs	r1, #44	; 0x2c
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	3314      	adds	r3, #20
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4403      	add	r3, r0
 8001c6c:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8001c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dc01      	bgt.n	8001c78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	dc01      	bgt.n	8001c82 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	e062      	b.n	8001d4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	e059      	b.n	8001d42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c94:	3201      	adds	r2, #1
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d348      	bcc.n	8001d3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	e042      	b.n	8001d36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	fb03 f202 	mul.w	r2, r3, r2
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fb02 f303 	mul.w	r3, r2, r3
 8001cc0:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d332      	bcc.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d82e      	bhi.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8001cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d02a      	beq.n	8001d30 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4924      	ldr	r1, [pc, #144]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	491f      	ldr	r1, [pc, #124]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3304      	adds	r3, #4
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4919      	ldr	r1, [pc, #100]	; (8001d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	3308      	adds	r3, #8
 8001d16:	6a3a      	ldr	r2, [r7, #32]
 8001d18:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d26:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2e:	d812      	bhi.n	8001d56 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8001d30:	6a3b      	ldr	r3, [r7, #32]
 8001d32:	3301      	adds	r3, #1
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d9b9      	bls.n	8001cb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3301      	adds	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d9a2      	bls.n	8001c8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8001d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d999      	bls.n	8001c88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8001d54:	e000      	b.n	8001d58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8001d56:	bf00      	nop
          }
        }
      }
    }
  }
}
 8001d58:	373c      	adds	r7, #60	; 0x3c
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	3b9aca00 	.word	0x3b9aca00
 8001d68:	0800e19c 	.word	0x0800e19c
 8001d6c:	24000d74 	.word	0x24000d74
 8001d70:	24000374 	.word	0x24000374

08001d74 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b093      	sub	sp, #76	; 0x4c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d82:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	085a      	lsrs	r2, r3, #1
 8001d88:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8001d94:	4a78      	ldr	r2, [pc, #480]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	085a      	lsrs	r2, r3, #1
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4973      	ldr	r1, [pc, #460]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	202c      	movs	r0, #44	; 0x2c
 8001dae:	fb00 f202 	mul.w	r2, r0, r2
 8001db2:	440a      	add	r2, r1
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8001dbc:	2332      	movs	r3, #50	; 0x32
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8001dc0:	4a6d      	ldr	r2, [pc, #436]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3328      	adds	r3, #40	; 0x28
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3304      	adds	r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a62      	ldr	r2, [pc, #392]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8001df0:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <I2C_Compute_SCLL_SCLH+0x200>)
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e10:	e0a3      	b.n	8001f5a <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8001e12:	495a      	ldr	r1, [pc, #360]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e30:	e08c      	b.n	8001f4c <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	441a      	add	r2, r3
 8001e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	6979      	ldr	r1, [r7, #20]
 8001e3e:	fb03 f101 	mul.w	r1, r3, r1
 8001e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	440b      	add	r3, r1
 8001e48:	4413      	add	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8001e4c:	4a4a      	ldr	r2, [pc, #296]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	212c      	movs	r1, #44	; 0x2c
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	3318      	adds	r3, #24
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d971      	bls.n	8001f46 <I2C_Compute_SCLL_SCLH+0x1d2>
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	1ad2      	subs	r2, r2, r3
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d268      	bcs.n	8001f46 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e78:	e062      	b.n	8001f40 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	441a      	add	r2, r3
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	3301      	adds	r3, #1
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	fb03 f101 	mul.w	r1, r3, r1
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	440b      	add	r3, r1
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	441a      	add	r2, r3
 8001e9a:	4937      	ldr	r1, [pc, #220]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	202c      	movs	r0, #44	; 0x2c
 8001ea0:	fb00 f303 	mul.w	r3, r0, r3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3320      	adds	r3, #32
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	441a      	add	r2, r3
 8001eac:	4932      	ldr	r1, [pc, #200]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	202c      	movs	r0, #44	; 0x2c
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3324      	adds	r3, #36	; 0x24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d338      	bcc.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d834      	bhi.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ed0:	4a29      	ldr	r2, [pc, #164]	; (8001f78 <I2C_Compute_SCLL_SCLH+0x204>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	212c      	movs	r1, #44	; 0x2c
 8001ed6:	fb01 f303 	mul.w	r3, r1, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	331c      	adds	r3, #28
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d329      	bcc.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
 8001ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d225      	bcs.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8001ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	da02      	bge.n	8001f02 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	425b      	negs	r3, r3
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d917      	bls.n	8001f3a <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8001f0e:	491b      	ldr	r1, [pc, #108]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3310      	adds	r3, #16
 8001f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f20:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8001f22:	4916      	ldr	r1, [pc, #88]	; (8001f7c <I2C_Compute_SCLL_SCLH+0x208>)
 8001f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	440b      	add	r3, r1
 8001f30:	330c      	adds	r3, #12
 8001f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f34:	601a      	str	r2, [r3, #0]
              ret = count;
 8001f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d999      	bls.n	8001e7a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	3301      	adds	r3, #1
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	f67f af6f 	bls.w	8001e32 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8001f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f56:	3301      	adds	r3, #1
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <I2C_Compute_SCLL_SCLH+0x20c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f4ff af56 	bcc.w	8001e12 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8001f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	374c      	adds	r7, #76	; 0x4c
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	3b9aca00 	.word	0x3b9aca00
 8001f78:	0800e19c 	.word	0x0800e19c
 8001f7c:	24000374 	.word	0x24000374
 8001f80:	24000d74 	.word	0x24000d74

08001f84 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f92:	4a30      	ldr	r2, [pc, #192]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <I2C4_MspInit+0xd0>)
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	4a28      	ldr	r2, [pc, #160]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <I2C4_MspInit+0xd0>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8001fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fcc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001fce:	2312      	movs	r3, #18
 8001fd0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	481c      	ldr	r0, [pc, #112]	; (8002058 <I2C4_MspInit+0xd4>)
 8001fe6:	f003 fcd5 	bl	8005994 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8001fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8001ff0:	2312      	movs	r3, #18
 8001ff2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	4619      	mov	r1, r3
 8002006:	4814      	ldr	r0, [pc, #80]	; (8002058 <I2C4_MspInit+0xd4>)
 8002008:	f003 fcc4 	bl	8005994 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <I2C4_MspInit+0xd0>)
 800200e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <I2C4_MspInit+0xd0>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <I2C4_MspInit+0xd0>)
 800201e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <I2C4_MspInit+0xd0>)
 800202c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <I2C4_MspInit+0xd0>)
 8002032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002036:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <I2C4_MspInit+0xd0>)
 800203c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <I2C4_MspInit+0xd0>)
 8002042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002046:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58020c00 	.word	0x58020c00

0800205c <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4619      	mov	r1, r3
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <I2C4_MspDeInit+0x40>)
 8002070:	f003 fe40 	bl	8005cf4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <I2C4_MspDeInit+0x40>)
 8002080:	f003 fe38 	bl	8005cf4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <I2C4_MspDeInit+0x44>)
 8002086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <I2C4_MspDeInit+0x44>)
 800208c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	58020c00 	.word	0x58020c00
 80020a0:	58024400 	.word	0x58024400

080020a4 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	4603      	mov	r3, r0
 80020ae:	81fb      	strh	r3, [r7, #14]
 80020b0:	460b      	mov	r3, r1
 80020b2:	81bb      	strh	r3, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80020b8:	8978      	ldrh	r0, [r7, #10]
 80020ba:	89ba      	ldrh	r2, [r7, #12]
 80020bc:	89f9      	ldrh	r1, [r7, #14]
 80020be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	8b3b      	ldrh	r3, [r7, #24]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4603      	mov	r3, r0
 80020ce:	4807      	ldr	r0, [pc, #28]	; (80020ec <I2C4_WriteReg+0x48>)
 80020d0:	f004 f808 	bl	80060e4 <HAL_I2C_Mem_Write>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80020da:	2300      	movs	r3, #0
 80020dc:	e001      	b.n	80020e2 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80020de:	f06f 0307 	mvn.w	r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	24000d78 	.word	0x24000d78

080020f0 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	4603      	mov	r3, r0
 80020fa:	81fb      	strh	r3, [r7, #14]
 80020fc:	460b      	mov	r3, r1
 80020fe:	81bb      	strh	r3, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8002104:	8978      	ldrh	r0, [r7, #10]
 8002106:	89ba      	ldrh	r2, [r7, #12]
 8002108:	89f9      	ldrh	r1, [r7, #14]
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4603      	mov	r3, r0
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <I2C4_ReadReg+0x48>)
 800211c:	f004 f8f6 	bl	800630c <HAL_I2C_Mem_Read>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8002126:	2300      	movs	r3, #0
 8002128:	e001      	b.n	800212e <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800212a:	f06f 0307 	mvn.w	r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	24000d78 	.word	0x24000d78

0800213c <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8002146:	f44f 7388 	mov.w	r3, #272	; 0x110
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002150:	2200      	movs	r2, #0
 8002152:	6839      	ldr	r1, [r7, #0]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f805 	bl	8002164 <BSP_LCD_InitEx>
 800215a:	4603      	mov	r3, r0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b09e      	sub	sp, #120	; 0x78
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d808      	bhi.n	8002192 <BSP_LCD_InitEx+0x2e>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <BSP_LCD_InitEx+0x2e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d006      	beq.n	800219a <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002192:	f06f 0301 	mvn.w	r3, #1
 8002196:	677b      	str	r3, [r7, #116]	; 0x74
 8002198:	e0a8      	b.n	80022ec <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d109      	bne.n	80021b4 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80021a0:	2302      	movs	r3, #2
 80021a2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	4413      	add	r3, r2
 80021ac:	3310      	adds	r3, #16
 80021ae:	2202      	movs	r2, #2
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e008      	b.n	80021c6 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80021b4:	2300      	movs	r3, #0
 80021b6:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015b      	lsls	r3, r3, #5
 80021be:	4413      	add	r3, r2
 80021c0:	3310      	adds	r3, #16
 80021c2:	2204      	movs	r2, #4
 80021c4:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80021c6:	4a4c      	ldr	r2, [pc, #304]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	4413      	add	r3, r2
 80021ce:	330c      	adds	r3, #12
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80021d4:	4a48      	ldr	r2, [pc, #288]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	4413      	add	r3, r2
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	015b      	lsls	r3, r3, #5
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80021ee:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80021f0:	4b42      	ldr	r3, [pc, #264]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80021f2:	4a43      	ldr	r2, [pc, #268]	; (8002300 <BSP_LCD_InitEx+0x19c>)
 80021f4:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <BSP_LCD_InitEx+0x1a0>)
 80021f8:	4a43      	ldr	r2, [pc, #268]	; (8002308 <BSP_LCD_InitEx+0x1a4>)
 80021fa:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80021fc:	483f      	ldr	r0, [pc, #252]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80021fe:	f000 fd1b 	bl	8002c38 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8002202:	4840      	ldr	r0, [pc, #256]	; (8002304 <BSP_LCD_InitEx+0x1a0>)
 8002204:	f000 fde4 	bl	8002dd0 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <BSP_LCD_InitEx+0x1a8>)
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 800220c:	4b40      	ldr	r3, [pc, #256]	; (8002310 <BSP_LCD_InitEx+0x1ac>)
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 8002210:	2370      	movs	r3, #112	; 0x70
 8002212:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8002214:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002218:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fe10 	bl	8000e44 <FT5336_RegisterBusIO>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	da03      	bge.n	8002232 <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800222a:	f06f 0304 	mvn.w	r3, #4
 800222e:	677b      	str	r3, [r7, #116]	; 0x74
 8002230:	e02b      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 8002232:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002236:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fefb 	bl	8001038 <FT5336_ReadID>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	da03      	bge.n	8002250 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002248:	f06f 0304 	mvn.w	r3, #4
 800224c:	677b      	str	r3, [r7, #116]	; 0x74
 800224e:	e01c      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8002250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002252:	2b51      	cmp	r3, #81	; 0x51
 8002254:	d003      	beq.n	800225e <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002256:	f06f 0306 	mvn.w	r3, #6
 800225a:	677b      	str	r3, [r7, #116]	; 0x74
 800225c:	e015      	b.n	800228a <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800225e:	4827      	ldr	r0, [pc, #156]	; (80022fc <BSP_LCD_InitEx+0x198>)
 8002260:	f000 f8e8 	bl	8002434 <MX_LTDC_ClockConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800226a:	f06f 0303 	mvn.w	r3, #3
 800226e:	677b      	str	r3, [r7, #116]	; 0x74
 8002270:	e00b      	b.n	800228a <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8002272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4820      	ldr	r0, [pc, #128]	; (80022fc <BSP_LCD_InitEx+0x198>)
 800227a:	f000 f84d 	bl	8002318 <MX_LTDC_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002284:	f06f 0303 	mvn.w	r3, #3
 8002288:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 800228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228c:	2b00      	cmp	r3, #0
 800228e:	d12d      	bne.n	80022ec <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8002290:	2000      	movs	r0, #0
 8002292:	f000 fe2f 	bl	8002ef4 <BSP_SDRAM_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800229c:	f06f 0303 	mvn.w	r3, #3
 80022a0:	e025      	b.n	80022ee <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80022ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022b2:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80022b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80022b8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	461a      	mov	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <BSP_LCD_InitEx+0x198>)
 80022c8:	f000 f872 	bl	80023b0 <MX_LTDC_ConfigLayer>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80022d2:	f06f 0303 	mvn.w	r3, #3
 80022d6:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80022d8:	480e      	ldr	r0, [pc, #56]	; (8002314 <BSP_LCD_InitEx+0x1b0>)
 80022da:	f000 fde1 	bl	8002ea0 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <BSP_LCD_InitEx+0x194>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015b      	lsls	r3, r3, #5
 80022e4:	4413      	add	r3, r2
 80022e6:	3318      	adds	r3, #24
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80022ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3778      	adds	r7, #120	; 0x78
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	24000f28 	.word	0x24000f28
 80022fc:	24000e80 	.word	0x24000e80
 8002300:	50001000 	.word	0x50001000
 8002304:	24000e18 	.word	0x24000e18
 8002308:	52001000 	.word	0x52001000
 800230c:	08001891 	.word	0x08001891
 8002310:	08001a2d 	.word	0x08001a2d
 8002314:	24000dcc 	.word	0x24000dcc

08002318 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a21      	ldr	r2, [pc, #132]	; (80023ac <MX_LTDC_Init+0x94>)
 8002328:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2228      	movs	r2, #40	; 0x28
 8002346:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	222a      	movs	r2, #42	; 0x2a
 800234c:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2209      	movs	r2, #9
 8002366:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	220b      	movs	r2, #11
 800236c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f103 020b 	add.w	r2, r3, #11
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f103 020d 	add.w	r2, r3, #13
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f004 fc3a 	bl	8006c14 <HAL_LTDC_Init>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	50001000 	.word	0x50001000

080023b0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b092      	sub	sp, #72	; 0x48
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80023da:	23ff      	movs	r3, #255	; 0xff
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023e8:	2307      	movs	r3, #7
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4619      	mov	r1, r3
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f004 fccf 	bl	8006dc8 <HAL_LTDC_ConfigLayer>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3748      	adds	r7, #72	; 0x48
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b2      	sub	sp, #200	; 0xc8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800243c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8002448:	2305      	movs	r3, #5
 800244a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002450:	2302      	movs	r3, #2
 8002452:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002454:	2302      	movs	r3, #2
 8002456:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8002458:	2353      	movs	r3, #83	; 0x53
 800245a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	4618      	mov	r0, r3
 800246a:	f006 f91f 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	37c8      	adds	r7, #200	; 0xc8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800248c:	f06f 0301 	mvn.w	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e007      	b.n	80024a4 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8002494:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <BSP_LCD_GetPixelFormat+0x3c>)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	015b      	lsls	r3, r3, #5
 800249a:	4413      	add	r3, r2
 800249c:	330c      	adds	r3, #12
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80024a4:	68fb      	ldr	r3, [r7, #12]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	24000f28 	.word	0x24000f28

080024b8 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	e006      	b.n	80024e2 <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80024d4:	4a06      	ldr	r2, [pc, #24]	; (80024f0 <BSP_LCD_SetActiveLayer+0x38>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	015b      	lsls	r3, r3, #5
 80024da:	4413      	add	r3, r2
 80024dc:	3308      	adds	r3, #8
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	24000f28 	.word	0x24000f28

080024f4 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002508:	f06f 0301 	mvn.w	r3, #1
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e006      	b.n	800251e <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <BSP_LCD_GetXSize+0x38>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	015b      	lsls	r3, r3, #5
 8002516:	4413      	add	r3, r2
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	24000f28 	.word	0x24000f28

08002530 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002544:	f06f 0301 	mvn.w	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e007      	b.n	800255c <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <BSP_LCD_GetYSize+0x3c>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	015b      	lsls	r3, r3, #5
 8002552:	4413      	add	r3, r2
 8002554:	3304      	adds	r3, #4
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800255c:	68fb      	ldr	r3, [r7, #12]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	24000f28 	.word	0x24000f28

08002570 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	330a      	adds	r3, #10
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	330b      	adds	r3, #11
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	441a      	add	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	330c      	adds	r3, #12
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	441a      	add	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	330d      	adds	r3, #13
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	061b      	lsls	r3, r3, #24
 80025a6:	4413      	add	r3, r2
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	3312      	adds	r3, #18
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	3313      	adds	r3, #19
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	441a      	add	r2, r3
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	3314      	adds	r3, #20
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	441a      	add	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	3315      	adds	r3, #21
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4413      	add	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	3316      	adds	r3, #22
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	3317      	adds	r3, #23
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	021b      	lsls	r3, r3, #8
 80025e2:	441a      	add	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	3318      	adds	r3, #24
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	041b      	lsls	r3, r3, #16
 80025ec:	441a      	add	r2, r3
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	3319      	adds	r3, #25
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4413      	add	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	331c      	adds	r3, #28
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	331d      	adds	r3, #29
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4413      	add	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800260e:	4a37      	ldr	r2, [pc, #220]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015b      	lsls	r3, r3, #5
 8002614:	4413      	add	r3, r2
 8002616:	3308      	adds	r3, #8
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a35      	ldr	r2, [pc, #212]	; (80026f0 <BSP_LCD_DrawBitmap+0x180>)
 800261c:	2134      	movs	r1, #52	; 0x34
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	335c      	adds	r3, #92	; 0x5c
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4930      	ldr	r1, [pc, #192]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	440b      	add	r3, r1
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	fb03 f101 	mul.w	r1, r3, r1
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	440b      	add	r3, r1
 800263c:	482b      	ldr	r0, [pc, #172]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	0149      	lsls	r1, r1, #5
 8002642:	4401      	add	r1, r0
 8002644:	3110      	adds	r1, #16
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3b20      	subs	r3, #32
 8002654:	2b07      	cmp	r3, #7
 8002656:	d802      	bhi.n	800265e <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	e008      	b.n	8002670 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3b10      	subs	r3, #16
 8002662:	2b07      	cmp	r3, #7
 8002664:	d802      	bhi.n	800266c <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8002666:	2302      	movs	r3, #2
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e001      	b.n	8002670 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3b01      	subs	r3, #1
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	08d2      	lsrs	r2, r2, #3
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	4413      	add	r3, r2
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	4413      	add	r3, r2
 800268a:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002690:	e023      	b.n	80026da <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8002692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6a39      	ldr	r1, [r7, #32]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fa77 	bl	8002b90 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015b      	lsls	r3, r3, #5
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	490f      	ldr	r1, [pc, #60]	; (80026ec <BSP_LCD_DrawBitmap+0x17c>)
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	0152      	lsls	r2, r2, #5
 80026b2:	440a      	add	r2, r1
 80026b4:	3210      	adds	r2, #16
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026be:	4413      	add	r3, r2
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	08db      	lsrs	r3, r3, #3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	425b      	negs	r3, r3
 80026ce:	6a3a      	ldr	r2, [r7, #32]
 80026d0:	4413      	add	r3, r2
 80026d2:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	3301      	adds	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d3d7      	bcc.n	8002692 <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80026e2:	69fb      	ldr	r3, [r7, #28]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3730      	adds	r7, #48	; 0x30
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	24000f28 	.word	0x24000f28
 80026f0:	24000e80 	.word	0x24000e80

080026f4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e032      	b.n	8002772 <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e028      	b.n	8002764 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	3301      	adds	r3, #1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	431a      	orrs	r2, r3
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	3303      	adds	r3, #3
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	061b      	lsls	r3, r3, #24
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	18d1      	adds	r1, r2, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	441a      	add	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f95e 	bl	8002a08 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 800274c:	4a0d      	ldr	r2, [pc, #52]	; (8002784 <BSP_LCD_FillRGBRect+0x90>)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015b      	lsls	r3, r3, #5
 8002752:	4413      	add	r3, r2
 8002754:	3310      	adds	r3, #16
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4413      	add	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3301      	adds	r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	429a      	cmp	r2, r3
 800276a:	d3d2      	bcc.n	8002712 <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3301      	adds	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	429a      	cmp	r2, r3
 8002778:	d3c8      	bcc.n	800270c <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	24000f28 	.word	0x24000f28

08002788 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	4413      	add	r3, r2
 800279e:	3308      	adds	r3, #8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <BSP_LCD_DrawHLine+0x98>)
 80027a4:	2134      	movs	r1, #52	; 0x34
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	491a      	ldr	r1, [pc, #104]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	440b      	add	r3, r1
 80027b8:	3310      	adds	r3, #16
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4817      	ldr	r0, [pc, #92]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027be:	68f9      	ldr	r1, [r7, #12]
 80027c0:	0149      	lsls	r1, r1, #5
 80027c2:	4401      	add	r1, r0
 80027c4:	6809      	ldr	r1, [r1, #0]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	fb01 f000 	mul.w	r0, r1, r0
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	4401      	add	r1, r0
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	441a      	add	r2, r3
 80027de:	490f      	ldr	r1, [pc, #60]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015b      	lsls	r3, r3, #5
 80027e4:	440b      	add	r3, r1
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d907      	bls.n	80027fc <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80027ec:	4a0b      	ldr	r2, [pc, #44]	; (800281c <BSP_LCD_DrawHLine+0x94>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015b      	lsls	r3, r3, #5
 80027f2:	4413      	add	r3, r2
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80027fc:	6979      	ldr	r1, [r7, #20]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f956 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000f28 	.word	0x24000f28
 8002820:	24000e80 	.word	0x24000e80

08002824 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8002832:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015b      	lsls	r3, r3, #5
 8002838:	4413      	add	r3, r2
 800283a:	3308      	adds	r3, #8
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <BSP_LCD_DrawVLine+0xa4>)
 8002840:	2134      	movs	r1, #52	; 0x34
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	335c      	adds	r3, #92	; 0x5c
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	491d      	ldr	r1, [pc, #116]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015b      	lsls	r3, r3, #5
 8002852:	440b      	add	r3, r1
 8002854:	3310      	adds	r3, #16
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	481a      	ldr	r0, [pc, #104]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	0149      	lsls	r1, r1, #5
 800285e:	4401      	add	r1, r0
 8002860:	6809      	ldr	r1, [r1, #0]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	fb01 f000 	mul.w	r0, r1, r0
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	4401      	add	r1, r0
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	441a      	add	r2, r3
 800287a:	4912      	ldr	r1, [pc, #72]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	015b      	lsls	r3, r3, #5
 8002880:	440b      	add	r3, r1
 8002882:	3304      	adds	r3, #4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d908      	bls.n	800289c <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015b      	lsls	r3, r3, #5
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800289c:	6979      	ldr	r1, [r7, #20]
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <BSP_LCD_DrawVLine+0xa0>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015b      	lsls	r3, r3, #5
 80028a4:	4413      	add	r3, r2
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	9201      	str	r2, [sp, #4]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f901 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	24000f28 	.word	0x24000f28
 80028c8:	24000e80 	.word	0x24000e80

080028cc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015b      	lsls	r3, r3, #5
 80028e0:	4413      	add	r3, r2
 80028e2:	3308      	adds	r3, #8
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a19      	ldr	r2, [pc, #100]	; (800294c <BSP_LCD_FillRect+0x80>)
 80028e8:	2134      	movs	r1, #52	; 0x34
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	335c      	adds	r3, #92	; 0x5c
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4914      	ldr	r1, [pc, #80]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015b      	lsls	r3, r3, #5
 80028fa:	440b      	add	r3, r1
 80028fc:	3310      	adds	r3, #16
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4811      	ldr	r0, [pc, #68]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 8002902:	68f9      	ldr	r1, [r7, #12]
 8002904:	0149      	lsls	r1, r1, #5
 8002906:	4401      	add	r1, r0
 8002908:	6809      	ldr	r1, [r1, #0]
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	fb01 f000 	mul.w	r0, r1, r0
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	4401      	add	r1, r0
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800291c:	6979      	ldr	r1, [r7, #20]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <BSP_LCD_FillRect+0x7c>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	4413      	add	r3, r2
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f8c0 	bl	8002abc <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	24000f28 	.word	0x24000f28
 800294c:	24000e80 	.word	0x24000e80

08002950 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800295e:	4a28      	ldr	r2, [pc, #160]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	015b      	lsls	r3, r3, #5
 8002964:	4413      	add	r3, r2
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 800296c:	2134      	movs	r1, #52	; 0x34
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3348      	adds	r3, #72	; 0x48
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11c      	bne.n	80029b6 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015b      	lsls	r3, r3, #5
 8002982:	4413      	add	r3, r2
 8002984:	3308      	adds	r3, #8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1e      	ldr	r2, [pc, #120]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 800298a:	2134      	movs	r1, #52	; 0x34
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	491a      	ldr	r1, [pc, #104]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	fb03 f101 	mul.w	r1, r3, r1
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	440b      	add	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e01d      	b.n	80029f2 <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 80029b6:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	4413      	add	r3, r2
 80029be:	3308      	adds	r3, #8
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <BSP_LCD_ReadPixel+0xb4>)
 80029c4:	2134      	movs	r1, #52	; 0x34
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	490b      	ldr	r1, [pc, #44]	; (8002a00 <BSP_LCD_ReadPixel+0xb0>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	440b      	add	r3, r1
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	fb03 f101 	mul.w	r1, r3, r1
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	440b      	add	r3, r1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	24000f28 	.word	0x24000f28
 8002a04:	24000e80 	.word	0x24000e80

08002a08 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3308      	adds	r3, #8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a24:	2134      	movs	r1, #52	; 0x34
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3348      	adds	r3, #72	; 0x48
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d11c      	bne.n	8002a6e <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8002a34:	4a1f      	ldr	r2, [pc, #124]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	015b      	lsls	r3, r3, #5
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3308      	adds	r3, #8
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a42:	2134      	movs	r1, #52	; 0x34
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4919      	ldr	r1, [pc, #100]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015b      	lsls	r3, r3, #5
 8002a54:	440b      	add	r3, r1
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	fb03 f101 	mul.w	r1, r3, r1
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	440b      	add	r3, r1
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	461a      	mov	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e01b      	b.n	8002aa6 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8002a6e:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015b      	lsls	r3, r3, #5
 8002a74:	4413      	add	r3, r2
 8002a76:	3308      	adds	r3, #8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <BSP_LCD_WritePixel+0xb0>)
 8002a7c:	2134      	movs	r1, #52	; 0x34
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	490a      	ldr	r1, [pc, #40]	; (8002ab4 <BSP_LCD_WritePixel+0xac>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	440b      	add	r3, r1
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	fb03 f101 	mul.w	r1, r3, r1
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	440b      	add	r3, r1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	24000f28 	.word	0x24000f28
 8002ab8:	24000e80 	.word	0x24000e80

08002abc <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002ace:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <LL_FillBuffer+0xc8>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	015b      	lsls	r3, r3, #5
 8002ad4:	4413      	add	r3, r2
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d129      	bne.n	8002b32 <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002ade:	2302      	movs	r3, #2
 8002ae0:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	0adb      	lsrs	r3, r3, #11
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	3317      	adds	r3, #23
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	0419      	lsls	r1, r3, #16
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b02:	4613      	mov	r3, r2
 8002b04:	01db      	lsls	r3, r3, #7
 8002b06:	4413      	add	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3321      	adds	r3, #33	; 0x21
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	4319      	orrs	r1, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	f003 021f 	and.w	r2, r3, #31
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	3317      	adds	r3, #23
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b2e:	613b      	str	r3, [r7, #16]
    break;
 8002b30:	e002      	b.n	8002b38 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
    break;
 8002b36:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b3e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <LL_FillBuffer+0xd0>)
 8002b50:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b54:	f002 fc18 	bl	8005388 <HAL_DMA2D_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6939      	ldr	r1, [r7, #16]
 8002b68:	4807      	ldr	r0, [pc, #28]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b6a:	f002 fc7b 	bl	8005464 <HAL_DMA2D_Start>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002b74:	2132      	movs	r1, #50	; 0x32
 8002b76:	4804      	ldr	r0, [pc, #16]	; (8002b88 <LL_FillBuffer+0xcc>)
 8002b78:	f002 fc9f 	bl	80054ba <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	24000f28 	.word	0x24000f28
 8002b88:	24000e18 	.word	0x24000e18
 8002b8c:	52001000 	.word	0x52001000

08002b90 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8002b9e:	4a23      	ldr	r2, [pc, #140]	; (8002c2c <LL_ConvertLineToRGB+0x9c>)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	4413      	add	r3, r2
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d102      	bne.n	8002bb4 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8002bae:	2302      	movs	r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
    break;
 8002bb2:	e002      	b.n	8002bba <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
    break;
 8002bb8:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bbc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc0:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002bce:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002be8:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <LL_ConvertLineToRGB+0xa4>)
 8002bea:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8002bec:	4810      	ldr	r0, [pc, #64]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bee:	f002 fbcb 	bl	8005388 <HAL_DMA2D_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d115      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	480d      	ldr	r0, [pc, #52]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002bfc:	f002 fd46 	bl	800568c <HAL_DMA2D_ConfigLayer>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10e      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4807      	ldr	r0, [pc, #28]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002c12:	f002 fc27 	bl	8005464 <HAL_DMA2D_Start>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d103      	bne.n	8002c24 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8002c1c:	2132      	movs	r1, #50	; 0x32
 8002c1e:	4804      	ldr	r0, [pc, #16]	; (8002c30 <LL_ConvertLineToRGB+0xa0>)
 8002c20:	f002 fc4b 	bl	80054ba <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002c24:	bf00      	nop
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	24000f28 	.word	0x24000f28
 8002c30:	24000e18 	.word	0x24000e18
 8002c34:	52001000 	.word	0x52001000

08002c38 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	; 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <LTDC_MspInit+0x17c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f040 80b0 	bne.w	8002dac <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002c4c:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c52:	4a59      	ldr	r2, [pc, #356]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c5c:	4b56      	ldr	r3, [pc, #344]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7a:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002c88:	4b4b      	ldr	r3, [pc, #300]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8e:	4a4a      	ldr	r2, [pc, #296]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c98:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <LTDC_MspInit+0x180>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ca6:	4b44      	ldr	r3, [pc, #272]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cac:	4a42      	ldr	r2, [pc, #264]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb6:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cc4:	4b3c      	ldr	r3, [pc, #240]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cca:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd4:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce2:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <LTDC_MspInit+0x180>)
 8002ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce8:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cea:	f043 0308 	orr.w	r3, r3, #8
 8002cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <LTDC_MspInit+0x180>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8002d00:	f24d 2303 	movw	r3, #53763	; 0xd203
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d12:	230e      	movs	r3, #14
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4827      	ldr	r0, [pc, #156]	; (8002dbc <LTDC_MspInit+0x184>)
 8002d1e:	f002 fe39 	bl	8005994 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8002d22:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d28:	230e      	movs	r3, #14
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4823      	ldr	r0, [pc, #140]	; (8002dc0 <LTDC_MspInit+0x188>)
 8002d34:	f002 fe2e 	bl	8005994 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002d38:	23ff      	movs	r3, #255	; 0xff
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d3c:	230e      	movs	r3, #14
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	481f      	ldr	r0, [pc, #124]	; (8002dc4 <LTDC_MspInit+0x18c>)
 8002d48:	f002 fe24 	bl	8005994 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8002d4c:	f240 2302 	movw	r3, #514	; 0x202
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002d5e:	230e      	movs	r3, #14
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8002d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d66:	4619      	mov	r1, r3
 8002d68:	4817      	ldr	r0, [pc, #92]	; (8002dc8 <LTDC_MspInit+0x190>)
 8002d6a:	f002 fe13 	bl	8005994 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d72:	2301      	movs	r3, #1
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4813      	ldr	r0, [pc, #76]	; (8002dcc <LTDC_MspInit+0x194>)
 8002d7e:	f002 fe09 	bl	8005994 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	4811      	ldr	r0, [pc, #68]	; (8002dcc <LTDC_MspInit+0x194>)
 8002d88:	f003 f8be 	bl	8005f08 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LTDC_MspInit+0x180>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <LTDC_MspInit+0x180>)
 8002da4:	f023 0308 	bic.w	r3, r3, #8
 8002da8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8002dac:	bf00      	nop
 8002dae:	3738      	adds	r7, #56	; 0x38
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	50001000 	.word	0x50001000
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58022000 	.word	0x58022000
 8002dc0:	58022400 	.word	0x58022400
 8002dc4:	58022800 	.word	0x58022800
 8002dc8:	58021c00 	.word	0x58021c00
 8002dcc:	58020c00 	.word	0x58020c00

08002dd0 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <DMA2D_MspInit+0x54>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11a      	bne.n	8002e18 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002de2:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002de4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002df4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e10:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <DMA2D_MspInit+0x58>)
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	52001000 	.word	0x52001000
 8002e28:	58024400 	.word	0x58024400

08002e2c <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002e34:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8002e52:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e62:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <TIMx_PWM_MspInit+0x6c>)
 8002e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8002e80:	2301      	movs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4804      	ldr	r0, [pc, #16]	; (8002e9c <TIMx_PWM_MspInit+0x70>)
 8002e8c:	f002 fd82 	bl	8005994 <HAL_GPIO_Init>
}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58022800 	.word	0x58022800

08002ea0 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a11      	ldr	r2, [pc, #68]	; (8002ef0 <TIMx_PWM_Init+0x50>)
 8002eac:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f007 f8bb 	bl	800a02a <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffb9 	bl	8002e2c <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002ec6:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f007 f84b 	bl	8009f7c <HAL_TIM_PWM_Init>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40010400 	.word	0x40010400

08002ef4 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8002f06:	f06f 0301 	mvn.w	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e044      	b.n	8002f98 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2234      	movs	r2, #52	; 0x34
 8002f12:	fb02 f303 	mul.w	r3, r2, r3
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f18:	4413      	add	r3, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f8a8 	bl	8003070 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2234      	movs	r2, #52	; 0x34
 8002f24:	fb02 f303 	mul.w	r3, r2, r3
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 f83b 	bl	8002fac <MX_SDRAM_BANK2_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e029      	b.n	8002f98 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f46:	2208      	movs	r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f52:	f240 6203 	movw	r2, #1539	; 0x603
 8002f56:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f66:	2230      	movs	r2, #48	; 0x30
 8002f68:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2234      	movs	r2, #52	; 0x34
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <BSP_SDRAM_Init+0xb0>)
 8002f82:	4413      	add	r3, r2
 8002f84:	4908      	ldr	r1, [pc, #32]	; (8002fa8 <BSP_SDRAM_Init+0xb4>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe fabc 	bl	8001504 <MT48LC4M32B2_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8002f92:	f06f 0304 	mvn.w	r3, #4
 8002f96:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002f98:	68fb      	ldr	r3, [r7, #12]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000f48 	.word	0x24000f48
 8002fa8:	24000f7c 	.word	0x24000f7c

08002fac <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	; 0x30
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <MX_SDRAM_BANK2_Init+0x90>)
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <MX_SDRAM_BANK2_Init+0x94>)
 8002fbc:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <MX_SDRAM_BANK2_Init+0x90>)
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002fe2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8003000:	2302      	movs	r3, #2
 8003002:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8003004:	2307      	movs	r3, #7
 8003006:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8003008:	2304      	movs	r3, #4
 800300a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800300c:	2307      	movs	r3, #7
 800300e:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8003010:	2302      	movs	r3, #2
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8003018:	2302      	movs	r3, #2
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f006 feb0 	bl	8009d88 <HAL_SDRAM_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3730      	adds	r7, #48	; 0x30
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	24000f48 	.word	0x24000f48
 8003040:	52004140 	.word	0x52004140

08003044 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 800304c:	4a07      	ldr	r2, [pc, #28]	; (800306c <BSP_SDRAM_IRQHandler+0x28>)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2134      	movs	r1, #52	; 0x34
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3330      	adds	r3, #48	; 0x30
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 f92f 	bl	80072c0 <HAL_MDMA_IRQHandler>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	24000f48 	.word	0x24000f48

08003070 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003078:	4b73      	ldr	r3, [pc, #460]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800307a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800307e:	4a72      	ldr	r2, [pc, #456]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003084:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800308a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800308e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003092:	623b      	str	r3, [r7, #32]
 8003094:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8003096:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003098:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800309c:	4a6a      	ldr	r2, [pc, #424]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80030a6:	4b68      	ldr	r3, [pc, #416]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b4:	4b64      	ldr	r3, [pc, #400]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ba:	4a63      	ldr	r2, [pc, #396]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c4:	4b60      	ldr	r3, [pc, #384]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d2:	4b5d      	ldr	r3, [pc, #372]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d8:	4a5b      	ldr	r2, [pc, #364]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030f0:	4b55      	ldr	r3, [pc, #340]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	4a54      	ldr	r2, [pc, #336]	; (8003248 <SDRAM_MspInit+0x1d8>)
 80030f8:	f043 0320 	orr.w	r3, r3, #32
 80030fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003100:	4b51      	ldr	r3, [pc, #324]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800310e:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312c:	4b46      	ldr	r3, [pc, #280]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800312e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003132:	4a45      	ldr	r2, [pc, #276]	; (8003248 <SDRAM_MspInit+0x1d8>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <SDRAM_MspInit+0x1d8>)
 800313e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800314e:	2301      	movs	r3, #1
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003152:	2303      	movs	r3, #3
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003156:	230c      	movs	r3, #12
 8003158:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800315a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003164:	4619      	mov	r1, r3
 8003166:	4839      	ldr	r0, [pc, #228]	; (800324c <SDRAM_MspInit+0x1dc>)
 8003168:	f002 fc14 	bl	8005994 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800316c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	4835      	ldr	r0, [pc, #212]	; (8003250 <SDRAM_MspInit+0x1e0>)
 800317a:	f002 fc0b 	bl	8005994 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800317e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003188:	4619      	mov	r1, r3
 800318a:	4832      	ldr	r0, [pc, #200]	; (8003254 <SDRAM_MspInit+0x1e4>)
 800318c:	f002 fc02 	bl	8005994 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8003190:	f248 1333 	movw	r3, #33075	; 0x8133
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	482e      	ldr	r0, [pc, #184]	; (8003258 <SDRAM_MspInit+0x1e8>)
 800319e:	f002 fbf9 	bl	8005994 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80031a2:	23e0      	movs	r3, #224	; 0xe0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80031a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	482b      	ldr	r0, [pc, #172]	; (800325c <SDRAM_MspInit+0x1ec>)
 80031ae:	f002 fbf1 	bl	8005994 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031b8:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80031ba:	4b29      	ldr	r3, [pc, #164]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c0:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80031c8:	4b25      	ldr	r3, [pc, #148]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031d0:	f240 2202 	movw	r2, #514	; 0x202
 80031d4:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031d8:	f640 0208 	movw	r2, #2056	; 0x808
 80031dc:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031e0:	2220      	movs	r2, #32
 80031e2:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <SDRAM_MspInit+0x1f0>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003206:	2200      	movs	r2, #0
 8003208:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800320c:	2200      	movs	r2, #0
 800320e:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8003210:	4b13      	ldr	r3, [pc, #76]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <SDRAM_MspInit+0x1f4>)
 8003214:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <SDRAM_MspInit+0x1f8>)
 8003218:	4a11      	ldr	r2, [pc, #68]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <SDRAM_MspInit+0x1f8>)
 8003220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8003222:	480f      	ldr	r0, [pc, #60]	; (8003260 <SDRAM_MspInit+0x1f0>)
 8003224:	f003 fff4 	bl	8007210 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <SDRAM_MspInit+0x1f0>)
 800322a:	f003 ffa5 	bl	8007178 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	210f      	movs	r1, #15
 8003232:	207a      	movs	r0, #122	; 0x7a
 8003234:	f000 fbe5 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8003238:	207a      	movs	r0, #122	; 0x7a
 800323a:	f000 fbfc 	bl	8003a36 <HAL_NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	3738      	adds	r7, #56	; 0x38
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	58020c00 	.word	0x58020c00
 8003250:	58021000 	.word	0x58021000
 8003254:	58021400 	.word	0x58021400
 8003258:	58021800 	.word	0x58021800
 800325c:	58021c00 	.word	0x58021c00
 8003260:	24000f9c 	.word	0x24000f9c
 8003264:	52000040 	.word	0x52000040
 8003268:	24000f48 	.word	0x24000f48

0800326c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003276:	2300      	movs	r3, #0
 8003278:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11c      	bne.n	80032ba <BSP_TS_Init+0x4e>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d018      	beq.n	80032ba <BSP_TS_Init+0x4e>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003290:	d813      	bhi.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00f      	beq.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80032a2:	d80a      	bhi.n	80032ba <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	428b      	cmp	r3, r1
 80032b2:	bf28      	it	cs
 80032b4:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d903      	bls.n	80032c2 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80032ba:	f06f 0301 	mvn.w	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e06e      	b.n	80033a0 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f98c 	bl	80035e0 <FT5336_Probe>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80032ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e064      	b.n	80033a0 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4934      	ldr	r1, [pc, #208]	; (80033ac <BSP_TS_Init+0x140>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	440b      	add	r3, r1
 80032e2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4930      	ldr	r1, [pc, #192]	; (80033ac <BSP_TS_Init+0x140>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	440b      	add	r3, r1
 80032f0:	3304      	adds	r3, #4
 80032f2:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	492c      	ldr	r1, [pc, #176]	; (80033ac <BSP_TS_Init+0x140>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	019b      	lsls	r3, r3, #6
 80032fe:	440b      	add	r3, r1
 8003300:	3308      	adds	r3, #8
 8003302:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4928      	ldr	r1, [pc, #160]	; (80033ac <BSP_TS_Init+0x140>)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	019b      	lsls	r3, r3, #6
 800330e:	440b      	add	r3, r1
 8003310:	330c      	adds	r3, #12
 8003312:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <BSP_TS_Init+0x144>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	4926      	ldr	r1, [pc, #152]	; (80033b4 <BSP_TS_Init+0x148>)
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003322:	f107 010c 	add.w	r1, r7, #12
 8003326:	4610      	mov	r0, r2
 8003328:	4798      	blx	r3
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	da03      	bge.n	8003338 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003330:	f06f 0304 	mvn.w	r3, #4
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e033      	b.n	80033a0 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	491c      	ldr	r1, [pc, #112]	; (80033ac <BSP_TS_Init+0x140>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	440b      	add	r3, r1
 8003342:	3310      	adds	r3, #16
 8003344:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4918      	ldr	r1, [pc, #96]	; (80033ac <BSP_TS_Init+0x140>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	440b      	add	r3, r1
 8003350:	3314      	adds	r3, #20
 8003352:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
 8003358:	e01f      	b.n	800339a <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4413      	add	r3, r2
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	4811      	ldr	r0, [pc, #68]	; (80033ac <BSP_TS_Init+0x140>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0119      	lsls	r1, r3, #4
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	440b      	add	r3, r1
 8003370:	3306      	adds	r3, #6
 8003372:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	4413      	add	r3, r2
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	480a      	ldr	r0, [pc, #40]	; (80033ac <BSP_TS_Init+0x140>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0119      	lsls	r1, r3, #4
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	440b      	add	r3, r1
 800338c:	330a      	adds	r3, #10
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4403      	add	r3, r0
 8003392:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	3301      	adds	r3, #1
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d9dc      	bls.n	800335a <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 80033a0:	69fb      	ldr	r3, [r7, #28]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	24001010 	.word	0x24001010
 80033b0:	24001008 	.word	0x24001008
 80033b4:	2400100c 	.word	0x2400100c

080033b8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033cc:	f06f 0301 	mvn.w	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	e0f9      	b.n	80035c8 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80033d4:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <BSP_TS_GetState+0x21c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	497f      	ldr	r1, [pc, #508]	; (80035d8 <BSP_TS_GetState+0x220>)
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80033e2:	f107 0108 	add.w	r1, r7, #8
 80033e6:	4610      	mov	r0, r2
 80033e8:	4798      	blx	r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da03      	bge.n	80033f8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80033f0:	f06f 0304 	mvn.w	r3, #4
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	e0e7      	b.n	80035c8 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80d1 	beq.w	80035a2 <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8003408:	4a74      	ldr	r2, [pc, #464]	; (80035dc <BSP_TS_GetState+0x224>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	4413      	add	r3, r2
 8003410:	3308      	adds	r3, #8
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8003424:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <BSP_TS_GetState+0x224>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	019b      	lsls	r3, r3, #6
 800342a:	4413      	add	r3, r2
 800342c:	3308      	adds	r3, #8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d009      	beq.n	800344c <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8003438:	4a68      	ldr	r2, [pc, #416]	; (80035dc <BSP_TS_GetState+0x224>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	4413      	add	r3, r2
 8003440:	3310      	adds	r3, #16
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800344c:	4a63      	ldr	r2, [pc, #396]	; (80035dc <BSP_TS_GetState+0x224>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	4413      	add	r3, r2
 8003454:	3308      	adds	r3, #8
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8003460:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <BSP_TS_GetState+0x224>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	019b      	lsls	r3, r3, #6
 8003466:	4413      	add	r3, r2
 8003468:	3314      	adds	r3, #20
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8003472:	4a5a      	ldr	r2, [pc, #360]	; (80035dc <BSP_TS_GetState+0x224>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	019b      	lsls	r3, r3, #6
 8003478:	4413      	add	r3, r2
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	fb03 f202 	mul.w	r2, r3, r2
 8003482:	4956      	ldr	r1, [pc, #344]	; (80035dc <BSP_TS_GetState+0x224>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	019b      	lsls	r3, r3, #6
 8003488:	440b      	add	r3, r1
 800348a:	3310      	adds	r3, #16
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8003496:	4a51      	ldr	r2, [pc, #324]	; (80035dc <BSP_TS_GetState+0x224>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	019b      	lsls	r3, r3, #6
 800349c:	4413      	add	r3, r2
 800349e:	3304      	adds	r3, #4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	fb03 f202 	mul.w	r2, r3, r2
 80034a8:	494c      	ldr	r1, [pc, #304]	; (80035dc <BSP_TS_GetState+0x224>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	019b      	lsls	r3, r3, #6
 80034ae:	440b      	add	r3, r1
 80034b0:	3314      	adds	r3, #20
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4945      	ldr	r1, [pc, #276]	; (80035dc <BSP_TS_GetState+0x224>)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	019b      	lsls	r3, r3, #6
 80034cc:	440b      	add	r3, r1
 80034ce:	3318      	adds	r3, #24
 80034d0:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d909      	bls.n	80034ea <BSP_TS_GetState+0x132>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4940      	ldr	r1, [pc, #256]	; (80035dc <BSP_TS_GetState+0x224>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	440b      	add	r3, r1
 80034e2:	3318      	adds	r3, #24
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	e008      	b.n	80034fc <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80034ea:	4a3c      	ldr	r2, [pc, #240]	; (80035dc <BSP_TS_GetState+0x224>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	019b      	lsls	r3, r3, #6
 80034f0:	4413      	add	r3, r2
 80034f2:	3318      	adds	r3, #24
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80034fa:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80034fc:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	4936      	ldr	r1, [pc, #216]	; (80035dc <BSP_TS_GetState+0x224>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	019b      	lsls	r3, r3, #6
 8003508:	440b      	add	r3, r1
 800350a:	332c      	adds	r3, #44	; 0x2c
 800350c:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800350e:	429a      	cmp	r2, r3
 8003510:	d909      	bls.n	8003526 <BSP_TS_GetState+0x16e>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	4931      	ldr	r1, [pc, #196]	; (80035dc <BSP_TS_GetState+0x224>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	019b      	lsls	r3, r3, #6
 800351c:	440b      	add	r3, r1
 800351e:	332c      	adds	r3, #44	; 0x2c
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	e008      	b.n	8003538 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8003526:	4a2d      	ldr	r2, [pc, #180]	; (80035dc <BSP_TS_GetState+0x224>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	4413      	add	r3, r2
 800352e:	332c      	adds	r3, #44	; 0x2c
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8003536:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8003538:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800353a:	4a28      	ldr	r2, [pc, #160]	; (80035dc <BSP_TS_GetState+0x224>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	4413      	add	r3, r2
 8003542:	330c      	adds	r3, #12
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d808      	bhi.n	800355e <BSP_TS_GetState+0x1a6>
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <BSP_TS_GetState+0x224>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	019b      	lsls	r3, r3, #6
 8003552:	4413      	add	r3, r2
 8003554:	330c      	adds	r3, #12
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	429a      	cmp	r2, r3
 800355c:	d910      	bls.n	8003580 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	491e      	ldr	r1, [pc, #120]	; (80035dc <BSP_TS_GetState+0x224>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	019b      	lsls	r3, r3, #6
 8003568:	440b      	add	r3, r1
 800356a:	3318      	adds	r3, #24
 800356c:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	491a      	ldr	r1, [pc, #104]	; (80035dc <BSP_TS_GetState+0x224>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	019b      	lsls	r3, r3, #6
 8003578:	440b      	add	r3, r1
 800357a:	332c      	adds	r3, #44	; 0x2c
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e023      	b.n	80035c8 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <BSP_TS_GetState+0x224>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	4413      	add	r3, r2
 8003588:	3318      	adds	r3, #24
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <BSP_TS_GetState+0x224>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	4413      	add	r3, r2
 8003598:	332c      	adds	r3, #44	; 0x2c
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	e012      	b.n	80035c8 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80035a8:	4a0c      	ldr	r2, [pc, #48]	; (80035dc <BSP_TS_GetState+0x224>)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	019b      	lsls	r3, r3, #6
 80035ae:	4413      	add	r3, r2
 80035b0:	3318      	adds	r3, #24
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80035b8:	4a08      	ldr	r2, [pc, #32]	; (80035dc <BSP_TS_GetState+0x224>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	019b      	lsls	r3, r3, #6
 80035be:	4413      	add	r3, r2
 80035c0:	332c      	adds	r3, #44	; 0x2c
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3728      	adds	r7, #40	; 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	24001008 	.word	0x24001008
 80035d8:	2400100c 	.word	0x2400100c
 80035dc:	24001010 	.word	0x24001010

080035e0 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80035f0:	2370      	movs	r3, #112	; 0x70
 80035f2:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <FT5336_Probe+0xa4>)
 80035f6:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <FT5336_Probe+0xa8>)
 80035fa:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80035fc:	4b23      	ldr	r3, [pc, #140]	; (800368c <FT5336_Probe+0xac>)
 80035fe:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <FT5336_Probe+0xb0>)
 8003602:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <FT5336_Probe+0xb4>)
 8003606:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4619      	mov	r1, r3
 800360e:	4822      	ldr	r0, [pc, #136]	; (8003698 <FT5336_Probe+0xb8>)
 8003610:	f7fd fc18 	bl	8000e44 <FT5336_RegisterBusIO>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800361a:	f06f 0307 	mvn.w	r3, #7
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	e02a      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	4619      	mov	r1, r3
 8003628:	481b      	ldr	r0, [pc, #108]	; (8003698 <FT5336_Probe+0xb8>)
 800362a:	f7fd fd05 	bl	8001038 <FT5336_ReadID>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003634:	f06f 0304 	mvn.w	r3, #4
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e01d      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b51      	cmp	r3, #81	; 0x51
 8003640:	d003      	beq.n	800364a <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003642:	f06f 0306 	mvn.w	r3, #6
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
 8003648:	e016      	b.n	8003678 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800364a:	4a14      	ldr	r2, [pc, #80]	; (800369c <FT5336_Probe+0xbc>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4912      	ldr	r1, [pc, #72]	; (8003698 <FT5336_Probe+0xb8>)
 8003650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <FT5336_Probe+0xc0>)
 8003656:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <FT5336_Probe+0xc4>)
 8003658:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800365a:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <FT5336_Probe+0xc0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	490e      	ldr	r1, [pc, #56]	; (800369c <FT5336_Probe+0xbc>)
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003668:	4610      	mov	r0, r2
 800366a:	4798      	blx	r3
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8003672:	f06f 0304 	mvn.w	r3, #4
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367a:	4618      	mov	r0, r3
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08001891 	.word	0x08001891
 8003688:	08001905 	.word	0x08001905
 800368c:	08001a2d 	.word	0x08001a2d
 8003690:	080019d1 	.word	0x080019d1
 8003694:	08001a89 	.word	0x08001a89
 8003698:	24001050 	.word	0x24001050
 800369c:	2400100c 	.word	0x2400100c
 80036a0:	24001008 	.word	0x24001008
 80036a4:	24000008 	.word	0x24000008

080036a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ae:	2003      	movs	r0, #3
 80036b0:	f000 f99c 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036b4:	f004 fe3a 	bl	800832c <HAL_RCC_GetSysClockFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_Init+0x68>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	4913      	ldr	r1, [pc, #76]	; (8003714 <HAL_Init+0x6c>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036d2:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <HAL_Init+0x68>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <HAL_Init+0x6c>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <HAL_Init+0x70>)
 80036ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_Init+0x74>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036f2:	200f      	movs	r0, #15
 80036f4:	f000 f814 	bl	8003720 <HAL_InitTick>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e002      	b.n	8003708 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003702:	f7fd f99d 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	58024400 	.word	0x58024400
 8003714:	0800e184 	.word	0x0800e184
 8003718:	24000004 	.word	0x24000004
 800371c:	24000000 	.word	0x24000000

08003720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_InitTick+0x60>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e021      	b.n	8003778 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_InitTick+0x64>)
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_InitTick+0x60>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	4619      	mov	r1, r3
 800373e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003742:	fbb3 f3f1 	udiv	r3, r3, r1
 8003746:	fbb2 f3f3 	udiv	r3, r2, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f000 f981 	bl	8003a52 <HAL_SYSTICK_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e00e      	b.n	8003778 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d80a      	bhi.n	8003776 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003760:	2200      	movs	r2, #0
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003768:	f000 f94b 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800376c:	4a06      	ldr	r2, [pc, #24]	; (8003788 <HAL_InitTick+0x68>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	e000      	b.n	8003778 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	24000044 	.word	0x24000044
 8003784:	24000000 	.word	0x24000000
 8003788:	24000040 	.word	0x24000040

0800378c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_IncTick+0x20>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_IncTick+0x24>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4413      	add	r3, r2
 800379c:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <HAL_IncTick+0x24>)
 800379e:	6013      	str	r3, [r2, #0]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	24000044 	.word	0x24000044
 80037b0:	24001078 	.word	0x24001078

080037b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return uwTick;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_GetTick+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	24001078 	.word	0x24001078

080037cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d4:	f7ff ffee 	bl	80037b4 <HAL_GetTick>
 80037d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e4:	d005      	beq.n	80037f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <HAL_Delay+0x44>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f2:	bf00      	nop
 80037f4:	f7ff ffde 	bl	80037b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	429a      	cmp	r2, r3
 8003802:	d8f7      	bhi.n	80037f4 <HAL_Delay+0x28>
  {
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	24000044 	.word	0x24000044

08003814 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <HAL_GetREVID+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0c1b      	lsrs	r3, r3, #16
}
 800381e:	4618      	mov	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	5c001000 	.word	0x5c001000

0800382c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_EnableCompensationCell+0x1c>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_EnableCompensationCell+0x1c>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6213      	str	r3, [r2, #32]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	58000400 	.word	0x58000400

0800384c <__NVIC_SetPriorityGrouping>:
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <__NVIC_SetPriorityGrouping+0x40>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	; (800388c <__NVIC_SetPriorityGrouping+0x40>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00
 8003890:	05fa0000 	.word	0x05fa0000

08003894 <__NVIC_GetPriorityGrouping>:
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	; (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	; (800393c <__NVIC_SetPriority+0x50>)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	; 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff40 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff90 	bl	8003940 <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5f 	bl	80038ec <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff33 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa4 	bl	80039a8 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff fe9e 	bl	80037b4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e2dc      	b.n	800403e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d008      	beq.n	8003aa2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e2cd      	b.n	800403e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a76      	ldr	r2, [pc, #472]	; (8003c80 <HAL_DMA_Abort+0x214>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d04a      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a74      	ldr	r2, [pc, #464]	; (8003c84 <HAL_DMA_Abort+0x218>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d045      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <HAL_DMA_Abort+0x21c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d040      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a71      	ldr	r2, [pc, #452]	; (8003c8c <HAL_DMA_Abort+0x220>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d03b      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a70      	ldr	r2, [pc, #448]	; (8003c90 <HAL_DMA_Abort+0x224>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d036      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6e      	ldr	r2, [pc, #440]	; (8003c94 <HAL_DMA_Abort+0x228>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d031      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6d      	ldr	r2, [pc, #436]	; (8003c98 <HAL_DMA_Abort+0x22c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d02c      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6b      	ldr	r2, [pc, #428]	; (8003c9c <HAL_DMA_Abort+0x230>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d027      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6a      	ldr	r2, [pc, #424]	; (8003ca0 <HAL_DMA_Abort+0x234>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a68      	ldr	r2, [pc, #416]	; (8003ca4 <HAL_DMA_Abort+0x238>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d01d      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a67      	ldr	r2, [pc, #412]	; (8003ca8 <HAL_DMA_Abort+0x23c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a65      	ldr	r2, [pc, #404]	; (8003cac <HAL_DMA_Abort+0x240>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d013      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a64      	ldr	r2, [pc, #400]	; (8003cb0 <HAL_DMA_Abort+0x244>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a62      	ldr	r2, [pc, #392]	; (8003cb4 <HAL_DMA_Abort+0x248>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d009      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a61      	ldr	r2, [pc, #388]	; (8003cb8 <HAL_DMA_Abort+0x24c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_DMA_Abort+0xd6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5f      	ldr	r2, [pc, #380]	; (8003cbc <HAL_DMA_Abort+0x250>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_DMA_Abort+0xda>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <HAL_DMA_Abort+0xdc>
 8003b46:	2300      	movs	r3, #0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 021e 	bic.w	r2, r2, #30
 8003b5a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b6a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e00a      	b.n	8003b8a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 020e 	bic.w	r2, r2, #14
 8003b82:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3c      	ldr	r2, [pc, #240]	; (8003c80 <HAL_DMA_Abort+0x214>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d072      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3a      	ldr	r2, [pc, #232]	; (8003c84 <HAL_DMA_Abort+0x218>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d06d      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a39      	ldr	r2, [pc, #228]	; (8003c88 <HAL_DMA_Abort+0x21c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d068      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <HAL_DMA_Abort+0x220>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d063      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a36      	ldr	r2, [pc, #216]	; (8003c90 <HAL_DMA_Abort+0x224>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d05e      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <HAL_DMA_Abort+0x228>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d059      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a33      	ldr	r2, [pc, #204]	; (8003c98 <HAL_DMA_Abort+0x22c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d054      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a31      	ldr	r2, [pc, #196]	; (8003c9c <HAL_DMA_Abort+0x230>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d04f      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <HAL_DMA_Abort+0x234>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d04a      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a2e      	ldr	r2, [pc, #184]	; (8003ca4 <HAL_DMA_Abort+0x238>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d045      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a2d      	ldr	r2, [pc, #180]	; (8003ca8 <HAL_DMA_Abort+0x23c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d040      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2b      	ldr	r2, [pc, #172]	; (8003cac <HAL_DMA_Abort+0x240>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d03b      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <HAL_DMA_Abort+0x244>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d036      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a28      	ldr	r2, [pc, #160]	; (8003cb4 <HAL_DMA_Abort+0x248>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d031      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a27      	ldr	r2, [pc, #156]	; (8003cb8 <HAL_DMA_Abort+0x24c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d02c      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a25      	ldr	r2, [pc, #148]	; (8003cbc <HAL_DMA_Abort+0x250>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d027      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a24      	ldr	r2, [pc, #144]	; (8003cc0 <HAL_DMA_Abort+0x254>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a22      	ldr	r2, [pc, #136]	; (8003cc4 <HAL_DMA_Abort+0x258>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01d      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_DMA_Abort+0x25c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ccc <HAL_DMA_Abort+0x260>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_DMA_Abort+0x264>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_DMA_Abort+0x268>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <HAL_DMA_Abort+0x26c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_Abort+0x20e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_DMA_Abort+0x270>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d132      	bne.n	8003ce0 <HAL_DMA_Abort+0x274>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e031      	b.n	8003ce2 <HAL_DMA_Abort+0x276>
 8003c7e:	bf00      	nop
 8003c80:	40020010 	.word	0x40020010
 8003c84:	40020028 	.word	0x40020028
 8003c88:	40020040 	.word	0x40020040
 8003c8c:	40020058 	.word	0x40020058
 8003c90:	40020070 	.word	0x40020070
 8003c94:	40020088 	.word	0x40020088
 8003c98:	400200a0 	.word	0x400200a0
 8003c9c:	400200b8 	.word	0x400200b8
 8003ca0:	40020410 	.word	0x40020410
 8003ca4:	40020428 	.word	0x40020428
 8003ca8:	40020440 	.word	0x40020440
 8003cac:	40020458 	.word	0x40020458
 8003cb0:	40020470 	.word	0x40020470
 8003cb4:	40020488 	.word	0x40020488
 8003cb8:	400204a0 	.word	0x400204a0
 8003cbc:	400204b8 	.word	0x400204b8
 8003cc0:	58025408 	.word	0x58025408
 8003cc4:	5802541c 	.word	0x5802541c
 8003cc8:	58025430 	.word	0x58025430
 8003ccc:	58025444 	.word	0x58025444
 8003cd0:	58025458 	.word	0x58025458
 8003cd4:	5802546c 	.word	0x5802546c
 8003cd8:	58025480 	.word	0x58025480
 8003cdc:	58025494 	.word	0x58025494
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6d      	ldr	r2, [pc, #436]	; (8003eb0 <HAL_DMA_Abort+0x444>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d04a      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a6b      	ldr	r2, [pc, #428]	; (8003eb4 <HAL_DMA_Abort+0x448>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d045      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a6a      	ldr	r2, [pc, #424]	; (8003eb8 <HAL_DMA_Abort+0x44c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d040      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a68      	ldr	r2, [pc, #416]	; (8003ebc <HAL_DMA_Abort+0x450>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d03b      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a67      	ldr	r2, [pc, #412]	; (8003ec0 <HAL_DMA_Abort+0x454>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d036      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_DMA_Abort+0x458>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d031      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a64      	ldr	r2, [pc, #400]	; (8003ec8 <HAL_DMA_Abort+0x45c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d02c      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a62      	ldr	r2, [pc, #392]	; (8003ecc <HAL_DMA_Abort+0x460>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d027      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a61      	ldr	r2, [pc, #388]	; (8003ed0 <HAL_DMA_Abort+0x464>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d022      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <HAL_DMA_Abort+0x468>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <HAL_DMA_Abort+0x46c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a5c      	ldr	r2, [pc, #368]	; (8003edc <HAL_DMA_Abort+0x470>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a5b      	ldr	r2, [pc, #364]	; (8003ee0 <HAL_DMA_Abort+0x474>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a59      	ldr	r2, [pc, #356]	; (8003ee4 <HAL_DMA_Abort+0x478>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a58      	ldr	r2, [pc, #352]	; (8003ee8 <HAL_DMA_Abort+0x47c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_DMA_Abort+0x32a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a56      	ldr	r2, [pc, #344]	; (8003eec <HAL_DMA_Abort+0x480>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_Abort+0x33c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e007      	b.n	8003db8 <HAL_DMA_Abort+0x34c>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003db8:	e013      	b.n	8003de2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dba:	f7ff fcfb 	bl	80037b4 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b05      	cmp	r3, #5
 8003dc6:	d90c      	bls.n	8003de2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2203      	movs	r2, #3
 8003dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e12d      	b.n	800403e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e5      	bne.n	8003dba <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a2f      	ldr	r2, [pc, #188]	; (8003eb0 <HAL_DMA_Abort+0x444>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04a      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	; (8003eb4 <HAL_DMA_Abort+0x448>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d045      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2c      	ldr	r2, [pc, #176]	; (8003eb8 <HAL_DMA_Abort+0x44c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d040      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <HAL_DMA_Abort+0x450>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d03b      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_DMA_Abort+0x454>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d036      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <HAL_DMA_Abort+0x458>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <HAL_DMA_Abort+0x45c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d02c      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <HAL_DMA_Abort+0x460>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d027      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_DMA_Abort+0x464>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d022      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	; (8003ed4 <HAL_DMA_Abort+0x468>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a20      	ldr	r2, [pc, #128]	; (8003ed8 <HAL_DMA_Abort+0x46c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <HAL_DMA_Abort+0x470>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_DMA_Abort+0x474>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_DMA_Abort+0x478>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_DMA_Abort+0x47c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_DMA_Abort+0x422>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a18      	ldr	r2, [pc, #96]	; (8003eec <HAL_DMA_Abort+0x480>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_DMA_Abort+0x426>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_DMA_Abort+0x428>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02b      	beq.n	8003ef0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	f003 031f 	and.w	r3, r3, #31
 8003ea6:	223f      	movs	r2, #63	; 0x3f
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	609a      	str	r2, [r3, #8]
 8003eae:	e02a      	b.n	8003f06 <HAL_DMA_Abort+0x49a>
 8003eb0:	40020010 	.word	0x40020010
 8003eb4:	40020028 	.word	0x40020028
 8003eb8:	40020040 	.word	0x40020040
 8003ebc:	40020058 	.word	0x40020058
 8003ec0:	40020070 	.word	0x40020070
 8003ec4:	40020088 	.word	0x40020088
 8003ec8:	400200a0 	.word	0x400200a0
 8003ecc:	400200b8 	.word	0x400200b8
 8003ed0:	40020410 	.word	0x40020410
 8003ed4:	40020428 	.word	0x40020428
 8003ed8:	40020440 	.word	0x40020440
 8003edc:	40020458 	.word	0x40020458
 8003ee0:	40020470 	.word	0x40020470
 8003ee4:	40020488 	.word	0x40020488
 8003ee8:	400204a0 	.word	0x400204a0
 8003eec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	f003 031f 	and.w	r3, r3, #31
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4f      	ldr	r2, [pc, #316]	; (8004048 <HAL_DMA_Abort+0x5dc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d072      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a4d      	ldr	r2, [pc, #308]	; (800404c <HAL_DMA_Abort+0x5e0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d06d      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a4c      	ldr	r2, [pc, #304]	; (8004050 <HAL_DMA_Abort+0x5e4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d068      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4a      	ldr	r2, [pc, #296]	; (8004054 <HAL_DMA_Abort+0x5e8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d063      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a49      	ldr	r2, [pc, #292]	; (8004058 <HAL_DMA_Abort+0x5ec>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d05e      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a47      	ldr	r2, [pc, #284]	; (800405c <HAL_DMA_Abort+0x5f0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d059      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a46      	ldr	r2, [pc, #280]	; (8004060 <HAL_DMA_Abort+0x5f4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d054      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a44      	ldr	r2, [pc, #272]	; (8004064 <HAL_DMA_Abort+0x5f8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d04f      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a43      	ldr	r2, [pc, #268]	; (8004068 <HAL_DMA_Abort+0x5fc>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a41      	ldr	r2, [pc, #260]	; (800406c <HAL_DMA_Abort+0x600>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a40      	ldr	r2, [pc, #256]	; (8004070 <HAL_DMA_Abort+0x604>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3e      	ldr	r2, [pc, #248]	; (8004074 <HAL_DMA_Abort+0x608>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3d      	ldr	r2, [pc, #244]	; (8004078 <HAL_DMA_Abort+0x60c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3b      	ldr	r2, [pc, #236]	; (800407c <HAL_DMA_Abort+0x610>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a3a      	ldr	r2, [pc, #232]	; (8004080 <HAL_DMA_Abort+0x614>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a38      	ldr	r2, [pc, #224]	; (8004084 <HAL_DMA_Abort+0x618>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a37      	ldr	r2, [pc, #220]	; (8004088 <HAL_DMA_Abort+0x61c>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	; (800408c <HAL_DMA_Abort+0x620>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <HAL_DMA_Abort+0x624>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a32      	ldr	r2, [pc, #200]	; (8004094 <HAL_DMA_Abort+0x628>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a31      	ldr	r2, [pc, #196]	; (8004098 <HAL_DMA_Abort+0x62c>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	; (800409c <HAL_DMA_Abort+0x630>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2e      	ldr	r2, [pc, #184]	; (80040a0 <HAL_DMA_Abort+0x634>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort+0x58a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <HAL_DMA_Abort+0x638>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Abort+0x58e>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <HAL_DMA_Abort+0x590>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004008:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00c      	beq.n	800402c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004020:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800402a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	58025408 	.word	0x58025408
 800408c:	5802541c 	.word	0x5802541c
 8004090:	58025430 	.word	0x58025430
 8004094:	58025444 	.word	0x58025444
 8004098:	58025458 	.word	0x58025458
 800409c:	5802546c 	.word	0x5802546c
 80040a0:	58025480 	.word	0x58025480
 80040a4:	58025494 	.word	0x58025494

080040a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e237      	b.n	800452a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d004      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e22c      	b.n	800452a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5c      	ldr	r2, [pc, #368]	; (8004248 <HAL_DMA_Abort_IT+0x1a0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04a      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_DMA_Abort_IT+0x1a4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d045      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a59      	ldr	r2, [pc, #356]	; (8004250 <HAL_DMA_Abort_IT+0x1a8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a58      	ldr	r2, [pc, #352]	; (8004254 <HAL_DMA_Abort_IT+0x1ac>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03b      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_DMA_Abort_IT+0x1b0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d036      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a55      	ldr	r2, [pc, #340]	; (800425c <HAL_DMA_Abort_IT+0x1b4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d031      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a53      	ldr	r2, [pc, #332]	; (8004260 <HAL_DMA_Abort_IT+0x1b8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02c      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_DMA_Abort_IT+0x1bc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d027      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a50      	ldr	r2, [pc, #320]	; (8004268 <HAL_DMA_Abort_IT+0x1c0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a4f      	ldr	r2, [pc, #316]	; (800426c <HAL_DMA_Abort_IT+0x1c4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01d      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4d      	ldr	r2, [pc, #308]	; (8004270 <HAL_DMA_Abort_IT+0x1c8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a4c      	ldr	r2, [pc, #304]	; (8004274 <HAL_DMA_Abort_IT+0x1cc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a4a      	ldr	r2, [pc, #296]	; (8004278 <HAL_DMA_Abort_IT+0x1d0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a49      	ldr	r2, [pc, #292]	; (800427c <HAL_DMA_Abort_IT+0x1d4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a47      	ldr	r2, [pc, #284]	; (8004280 <HAL_DMA_Abort_IT+0x1d8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_DMA_Abort_IT+0xc8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a46      	ldr	r2, [pc, #280]	; (8004284 <HAL_DMA_Abort_IT+0x1dc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_DMA_Abort_IT+0xcc>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_DMA_Abort_IT+0xce>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8086 	beq.w	8004288 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <HAL_DMA_Abort_IT+0x1a0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d04a      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2e      	ldr	r2, [pc, #184]	; (800424c <HAL_DMA_Abort_IT+0x1a4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d045      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2c      	ldr	r2, [pc, #176]	; (8004250 <HAL_DMA_Abort_IT+0x1a8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d040      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <HAL_DMA_Abort_IT+0x1ac>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d03b      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a29      	ldr	r2, [pc, #164]	; (8004258 <HAL_DMA_Abort_IT+0x1b0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d036      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a28      	ldr	r2, [pc, #160]	; (800425c <HAL_DMA_Abort_IT+0x1b4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d031      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a26      	ldr	r2, [pc, #152]	; (8004260 <HAL_DMA_Abort_IT+0x1b8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02c      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a25      	ldr	r2, [pc, #148]	; (8004264 <HAL_DMA_Abort_IT+0x1bc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d027      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <HAL_DMA_Abort_IT+0x1c0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d022      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a22      	ldr	r2, [pc, #136]	; (800426c <HAL_DMA_Abort_IT+0x1c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01d      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a20      	ldr	r2, [pc, #128]	; (8004270 <HAL_DMA_Abort_IT+0x1c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d018      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <HAL_DMA_Abort_IT+0x1cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1d      	ldr	r2, [pc, #116]	; (8004278 <HAL_DMA_Abort_IT+0x1d0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00e      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <HAL_DMA_Abort_IT+0x1d4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d009      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1a      	ldr	r2, [pc, #104]	; (8004280 <HAL_DMA_Abort_IT+0x1d8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d004      	beq.n	8004224 <HAL_DMA_Abort_IT+0x17c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_DMA_Abort_IT+0x1dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <HAL_DMA_Abort_IT+0x18e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e178      	b.n	8004528 <HAL_DMA_Abort_IT+0x480>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e16f      	b.n	8004528 <HAL_DMA_Abort_IT+0x480>
 8004248:	40020010 	.word	0x40020010
 800424c:	40020028 	.word	0x40020028
 8004250:	40020040 	.word	0x40020040
 8004254:	40020058 	.word	0x40020058
 8004258:	40020070 	.word	0x40020070
 800425c:	40020088 	.word	0x40020088
 8004260:	400200a0 	.word	0x400200a0
 8004264:	400200b8 	.word	0x400200b8
 8004268:	40020410 	.word	0x40020410
 800426c:	40020428 	.word	0x40020428
 8004270:	40020440 	.word	0x40020440
 8004274:	40020458 	.word	0x40020458
 8004278:	40020470 	.word	0x40020470
 800427c:	40020488 	.word	0x40020488
 8004280:	400204a0 	.word	0x400204a0
 8004284:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 020e 	bic.w	r2, r2, #14
 8004296:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6c      	ldr	r2, [pc, #432]	; (8004450 <HAL_DMA_Abort_IT+0x3a8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d04a      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_DMA_Abort_IT+0x3ac>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d045      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a69      	ldr	r2, [pc, #420]	; (8004458 <HAL_DMA_Abort_IT+0x3b0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a68      	ldr	r2, [pc, #416]	; (800445c <HAL_DMA_Abort_IT+0x3b4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d03b      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a66      	ldr	r2, [pc, #408]	; (8004460 <HAL_DMA_Abort_IT+0x3b8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d036      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_DMA_Abort_IT+0x3bc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d031      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a63      	ldr	r2, [pc, #396]	; (8004468 <HAL_DMA_Abort_IT+0x3c0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d02c      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_DMA_Abort_IT+0x3c4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d027      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a60      	ldr	r2, [pc, #384]	; (8004470 <HAL_DMA_Abort_IT+0x3c8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d022      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a5f      	ldr	r2, [pc, #380]	; (8004474 <HAL_DMA_Abort_IT+0x3cc>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d01d      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a5d      	ldr	r2, [pc, #372]	; (8004478 <HAL_DMA_Abort_IT+0x3d0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d018      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a5c      	ldr	r2, [pc, #368]	; (800447c <HAL_DMA_Abort_IT+0x3d4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d013      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a5a      	ldr	r2, [pc, #360]	; (8004480 <HAL_DMA_Abort_IT+0x3d8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d00e      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a59      	ldr	r2, [pc, #356]	; (8004484 <HAL_DMA_Abort_IT+0x3dc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a57      	ldr	r2, [pc, #348]	; (8004488 <HAL_DMA_Abort_IT+0x3e0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_DMA_Abort_IT+0x290>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_DMA_Abort_IT+0x3e4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d108      	bne.n	800434a <HAL_DMA_Abort_IT+0x2a2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	e007      	b.n	800435a <HAL_DMA_Abort_IT+0x2b2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0201 	bic.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a3c      	ldr	r2, [pc, #240]	; (8004450 <HAL_DMA_Abort_IT+0x3a8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d072      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3a      	ldr	r2, [pc, #232]	; (8004454 <HAL_DMA_Abort_IT+0x3ac>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d06d      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a39      	ldr	r2, [pc, #228]	; (8004458 <HAL_DMA_Abort_IT+0x3b0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d068      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a37      	ldr	r2, [pc, #220]	; (800445c <HAL_DMA_Abort_IT+0x3b4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d063      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a36      	ldr	r2, [pc, #216]	; (8004460 <HAL_DMA_Abort_IT+0x3b8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d05e      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a34      	ldr	r2, [pc, #208]	; (8004464 <HAL_DMA_Abort_IT+0x3bc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d059      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a33      	ldr	r2, [pc, #204]	; (8004468 <HAL_DMA_Abort_IT+0x3c0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d054      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a31      	ldr	r2, [pc, #196]	; (800446c <HAL_DMA_Abort_IT+0x3c4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d04f      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a30      	ldr	r2, [pc, #192]	; (8004470 <HAL_DMA_Abort_IT+0x3c8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d04a      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <HAL_DMA_Abort_IT+0x3cc>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d045      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2d      	ldr	r2, [pc, #180]	; (8004478 <HAL_DMA_Abort_IT+0x3d0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d040      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_DMA_Abort_IT+0x3d4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d03b      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2a      	ldr	r2, [pc, #168]	; (8004480 <HAL_DMA_Abort_IT+0x3d8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d036      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <HAL_DMA_Abort_IT+0x3dc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d031      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <HAL_DMA_Abort_IT+0x3e0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d02c      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a25      	ldr	r2, [pc, #148]	; (800448c <HAL_DMA_Abort_IT+0x3e4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d027      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <HAL_DMA_Abort_IT+0x3e8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <HAL_DMA_Abort_IT+0x3ec>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a21      	ldr	r2, [pc, #132]	; (8004498 <HAL_DMA_Abort_IT+0x3f0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <HAL_DMA_Abort_IT+0x3f4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_DMA_Abort_IT+0x3f8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_DMA_Abort_IT+0x3fc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <HAL_DMA_Abort_IT+0x400>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Abort_IT+0x3a2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_DMA_Abort_IT+0x404>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d132      	bne.n	80044b0 <HAL_DMA_Abort_IT+0x408>
 800444a:	2301      	movs	r3, #1
 800444c:	e031      	b.n	80044b2 <HAL_DMA_Abort_IT+0x40a>
 800444e:	bf00      	nop
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
 8004490:	58025408 	.word	0x58025408
 8004494:	5802541c 	.word	0x5802541c
 8004498:	58025430 	.word	0x58025430
 800449c:	58025444 	.word	0x58025444
 80044a0:	58025458 	.word	0x58025458
 80044a4:	5802546c 	.word	0x5802546c
 80044a8:	58025480 	.word	0x58025480
 80044ac:	58025494 	.word	0x58025494
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d028      	beq.n	8004508 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004506:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop

08004534 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004540:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_DMA_IRQHandler+0x1ac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a67      	ldr	r2, [pc, #412]	; (80046e4 <HAL_DMA_IRQHandler+0x1b0>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004552:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5f      	ldr	r2, [pc, #380]	; (80046e8 <HAL_DMA_IRQHandler+0x1b4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_DMA_IRQHandler+0x1b8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5c      	ldr	r2, [pc, #368]	; (80046f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_DMA_IRQHandler+0x1c0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a59      	ldr	r2, [pc, #356]	; (80046f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_DMA_IRQHandler+0x1c8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a56      	ldr	r2, [pc, #344]	; (8004700 <HAL_DMA_IRQHandler+0x1cc>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_DMA_IRQHandler+0x1d0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_DMA_IRQHandler+0x1d4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a51      	ldr	r2, [pc, #324]	; (800470c <HAL_DMA_IRQHandler+0x1d8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_DMA_IRQHandler+0x1dc>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a4e      	ldr	r2, [pc, #312]	; (8004714 <HAL_DMA_IRQHandler+0x1e0>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4d      	ldr	r2, [pc, #308]	; (8004718 <HAL_DMA_IRQHandler+0x1e4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a4b      	ldr	r2, [pc, #300]	; (800471c <HAL_DMA_IRQHandler+0x1e8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a4a      	ldr	r2, [pc, #296]	; (8004720 <HAL_DMA_IRQHandler+0x1ec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMA_IRQHandler+0xd2>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a48      	ldr	r2, [pc, #288]	; (8004724 <HAL_DMA_IRQHandler+0x1f0>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_DMA_IRQHandler+0xd6>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_DMA_IRQHandler+0xd8>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 842b 	beq.w	8004e68 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2208      	movs	r2, #8
 800461c:	409a      	lsls	r2, r3
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 80a2 	beq.w	800476c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2e      	ldr	r2, [pc, #184]	; (80046e8 <HAL_DMA_IRQHandler+0x1b4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_DMA_IRQHandler+0x1b8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <HAL_DMA_IRQHandler+0x1bc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <HAL_DMA_IRQHandler+0x1c0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <HAL_DMA_IRQHandler+0x1c4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a27      	ldr	r2, [pc, #156]	; (80046fc <HAL_DMA_IRQHandler+0x1c8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a25      	ldr	r2, [pc, #148]	; (8004700 <HAL_DMA_IRQHandler+0x1cc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_DMA_IRQHandler+0x1d0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a22      	ldr	r2, [pc, #136]	; (8004708 <HAL_DMA_IRQHandler+0x1d4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a21      	ldr	r2, [pc, #132]	; (800470c <HAL_DMA_IRQHandler+0x1d8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_DMA_IRQHandler+0x1dc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_DMA_IRQHandler+0x1e0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_DMA_IRQHandler+0x1e4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_DMA_IRQHandler+0x1e8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_DMA_IRQHandler+0x1ec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_DMA_IRQHandler+0x1f0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d12f      	bne.n	8004728 <HAL_DMA_IRQHandler+0x1f4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e02e      	b.n	800473c <HAL_DMA_IRQHandler+0x208>
 80046de:	bf00      	nop
 80046e0:	24000000 	.word	0x24000000
 80046e4:	1b4e81b5 	.word	0x1b4e81b5
 80046e8:	40020010 	.word	0x40020010
 80046ec:	40020028 	.word	0x40020028
 80046f0:	40020040 	.word	0x40020040
 80046f4:	40020058 	.word	0x40020058
 80046f8:	40020070 	.word	0x40020070
 80046fc:	40020088 	.word	0x40020088
 8004700:	400200a0 	.word	0x400200a0
 8004704:	400200b8 	.word	0x400200b8
 8004708:	40020410 	.word	0x40020410
 800470c:	40020428 	.word	0x40020428
 8004710:	40020440 	.word	0x40020440
 8004714:	40020458 	.word	0x40020458
 8004718:	40020470 	.word	0x40020470
 800471c:	40020488 	.word	0x40020488
 8004720:	400204a0 	.word	0x400204a0
 8004724:	400204b8 	.word	0x400204b8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d015      	beq.n	800476c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0204 	bic.w	r2, r2, #4
 800474e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	2208      	movs	r2, #8
 800475a:	409a      	lsls	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004764:	f043 0201 	orr.w	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d06e      	beq.n	8004860 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_DMA_IRQHandler+0x3f8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d04a      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a67      	ldr	r2, [pc, #412]	; (8004930 <HAL_DMA_IRQHandler+0x3fc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d045      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a66      	ldr	r2, [pc, #408]	; (8004934 <HAL_DMA_IRQHandler+0x400>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d040      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a64      	ldr	r2, [pc, #400]	; (8004938 <HAL_DMA_IRQHandler+0x404>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d03b      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a63      	ldr	r2, [pc, #396]	; (800493c <HAL_DMA_IRQHandler+0x408>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d036      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a61      	ldr	r2, [pc, #388]	; (8004940 <HAL_DMA_IRQHandler+0x40c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d031      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a60      	ldr	r2, [pc, #384]	; (8004944 <HAL_DMA_IRQHandler+0x410>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d02c      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a5e      	ldr	r2, [pc, #376]	; (8004948 <HAL_DMA_IRQHandler+0x414>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d027      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_DMA_IRQHandler+0x418>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d022      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5b      	ldr	r2, [pc, #364]	; (8004950 <HAL_DMA_IRQHandler+0x41c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01d      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <HAL_DMA_IRQHandler+0x420>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d018      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a58      	ldr	r2, [pc, #352]	; (8004958 <HAL_DMA_IRQHandler+0x424>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a57      	ldr	r2, [pc, #348]	; (800495c <HAL_DMA_IRQHandler+0x428>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a55      	ldr	r2, [pc, #340]	; (8004960 <HAL_DMA_IRQHandler+0x42c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d009      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a54      	ldr	r2, [pc, #336]	; (8004964 <HAL_DMA_IRQHandler+0x430>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d004      	beq.n	8004822 <HAL_DMA_IRQHandler+0x2ee>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_DMA_IRQHandler+0x434>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10a      	bne.n	8004838 <HAL_DMA_IRQHandler+0x304>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	e003      	b.n	8004840 <HAL_DMA_IRQHandler+0x30c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2201      	movs	r2, #1
 800484e:	409a      	lsls	r2, r3
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	f043 0202 	orr.w	r2, r3, #2
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	2204      	movs	r2, #4
 800486a:	409a      	lsls	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 808f 	beq.w	8004994 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a2c      	ldr	r2, [pc, #176]	; (800492c <HAL_DMA_IRQHandler+0x3f8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a2a      	ldr	r2, [pc, #168]	; (8004930 <HAL_DMA_IRQHandler+0x3fc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_DMA_IRQHandler+0x400>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <HAL_DMA_IRQHandler+0x404>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a26      	ldr	r2, [pc, #152]	; (800493c <HAL_DMA_IRQHandler+0x408>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <HAL_DMA_IRQHandler+0x40c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a23      	ldr	r2, [pc, #140]	; (8004944 <HAL_DMA_IRQHandler+0x410>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a21      	ldr	r2, [pc, #132]	; (8004948 <HAL_DMA_IRQHandler+0x414>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_DMA_IRQHandler+0x418>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_DMA_IRQHandler+0x41c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <HAL_DMA_IRQHandler+0x420>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_DMA_IRQHandler+0x424>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_DMA_IRQHandler+0x428>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_DMA_IRQHandler+0x42c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_DMA_IRQHandler+0x430>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0x3e2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a15      	ldr	r2, [pc, #84]	; (8004968 <HAL_DMA_IRQHandler+0x434>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d12a      	bne.n	800496c <HAL_DMA_IRQHandler+0x438>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e023      	b.n	8004974 <HAL_DMA_IRQHandler+0x440>
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2204      	movs	r2, #4
 8004982:	409a      	lsls	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498c:	f043 0204 	orr.w	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2210      	movs	r2, #16
 800499e:	409a      	lsls	r2, r3
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a6 	beq.w	8004af6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <HAL_DMA_IRQHandler+0x690>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d04a      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a83      	ldr	r2, [pc, #524]	; (8004bc8 <HAL_DMA_IRQHandler+0x694>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d045      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <HAL_DMA_IRQHandler+0x698>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d040      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_DMA_IRQHandler+0x69c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d03b      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a7f      	ldr	r2, [pc, #508]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d036      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a7d      	ldr	r2, [pc, #500]	; (8004bd8 <HAL_DMA_IRQHandler+0x6a4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d031      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7c      	ldr	r2, [pc, #496]	; (8004bdc <HAL_DMA_IRQHandler+0x6a8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d02c      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7a      	ldr	r2, [pc, #488]	; (8004be0 <HAL_DMA_IRQHandler+0x6ac>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d027      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a79      	ldr	r2, [pc, #484]	; (8004be4 <HAL_DMA_IRQHandler+0x6b0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d022      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a77      	ldr	r2, [pc, #476]	; (8004be8 <HAL_DMA_IRQHandler+0x6b4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_DMA_IRQHandler+0x6b8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a74      	ldr	r2, [pc, #464]	; (8004bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d013      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a73      	ldr	r2, [pc, #460]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d00e      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a71      	ldr	r2, [pc, #452]	; (8004bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a70      	ldr	r2, [pc, #448]	; (8004bfc <HAL_DMA_IRQHandler+0x6c8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x516>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6e      	ldr	r2, [pc, #440]	; (8004c00 <HAL_DMA_IRQHandler+0x6cc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d10a      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x52c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0308 	and.w	r3, r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e009      	b.n	8004a74 <HAL_DMA_IRQHandler+0x540>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bf14      	ite	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	2300      	moveq	r3, #0
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d03e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	2210      	movs	r2, #16
 8004a82:	409a      	lsls	r2, r3
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d024      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e01f      	b.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	4798      	blx	r3
 8004ac6:	e016      	b.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0208 	bic.w	r2, r2, #8
 8004ae4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2220      	movs	r2, #32
 8004b00:	409a      	lsls	r2, r3
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8110 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a2c      	ldr	r2, [pc, #176]	; (8004bc4 <HAL_DMA_IRQHandler+0x690>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <HAL_DMA_IRQHandler+0x694>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d045      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <HAL_DMA_IRQHandler+0x698>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d040      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a28      	ldr	r2, [pc, #160]	; (8004bd0 <HAL_DMA_IRQHandler+0x69c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d03b      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a26      	ldr	r2, [pc, #152]	; (8004bd4 <HAL_DMA_IRQHandler+0x6a0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d036      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a25      	ldr	r2, [pc, #148]	; (8004bd8 <HAL_DMA_IRQHandler+0x6a4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d031      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <HAL_DMA_IRQHandler+0x6a8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d02c      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a22      	ldr	r2, [pc, #136]	; (8004be0 <HAL_DMA_IRQHandler+0x6ac>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d027      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <HAL_DMA_IRQHandler+0x6b0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d022      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_DMA_IRQHandler+0x6b4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d01d      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_DMA_IRQHandler+0x6b8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d018      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_DMA_IRQHandler+0x6bc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1a      	ldr	r2, [pc, #104]	; (8004bf4 <HAL_DMA_IRQHandler+0x6c0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00e      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_DMA_IRQHandler+0x6c4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d009      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_DMA_IRQHandler+0x6c8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <HAL_DMA_IRQHandler+0x678>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <HAL_DMA_IRQHandler+0x6cc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d12b      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x6d0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e02a      	b.n	8004c18 <HAL_DMA_IRQHandler+0x6e4>
 8004bc2:	bf00      	nop
 8004bc4:	40020010 	.word	0x40020010
 8004bc8:	40020028 	.word	0x40020028
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020058 	.word	0x40020058
 8004bd4:	40020070 	.word	0x40020070
 8004bd8:	40020088 	.word	0x40020088
 8004bdc:	400200a0 	.word	0x400200a0
 8004be0:	400200b8 	.word	0x400200b8
 8004be4:	40020410 	.word	0x40020410
 8004be8:	40020428 	.word	0x40020428
 8004bec:	40020440 	.word	0x40020440
 8004bf0:	40020458 	.word	0x40020458
 8004bf4:	40020470 	.word	0x40020470
 8004bf8:	40020488 	.word	0x40020488
 8004bfc:	400204a0 	.word	0x400204a0
 8004c00:	400204b8 	.word	0x400204b8
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8087 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	2220      	movs	r2, #32
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d139      	bne.n	8004cae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0216 	bic.w	r2, r2, #22
 8004c48:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c58:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_DMA_IRQHandler+0x736>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0208 	bic.w	r2, r2, #8
 8004c78:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	223f      	movs	r2, #63	; 0x3f
 8004c84:	409a      	lsls	r2, r3
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 834a 	beq.w	8005338 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
          }
          return;
 8004cac:	e344      	b.n	8005338 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d018      	beq.n	8004cee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02c      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
 8004cda:	e027      	b.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d023      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e01e      	b.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10f      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0210 	bic.w	r2, r2, #16
 8004d0a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8306 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 8088 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7a      	ldr	r2, [pc, #488]	; (8004f3c <HAL_DMA_IRQHandler+0xa08>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d04a      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a79      	ldr	r2, [pc, #484]	; (8004f40 <HAL_DMA_IRQHandler+0xa0c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d045      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_DMA_IRQHandler+0xa10>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d040      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <HAL_DMA_IRQHandler+0xa14>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d03b      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <HAL_DMA_IRQHandler+0xa18>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d036      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <HAL_DMA_IRQHandler+0xa1c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d031      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a71      	ldr	r2, [pc, #452]	; (8004f54 <HAL_DMA_IRQHandler+0xa20>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02c      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a70      	ldr	r2, [pc, #448]	; (8004f58 <HAL_DMA_IRQHandler+0xa24>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d027      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6e      	ldr	r2, [pc, #440]	; (8004f5c <HAL_DMA_IRQHandler+0xa28>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6d      	ldr	r2, [pc, #436]	; (8004f60 <HAL_DMA_IRQHandler+0xa2c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d01d      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6b      	ldr	r2, [pc, #428]	; (8004f64 <HAL_DMA_IRQHandler+0xa30>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6a      	ldr	r2, [pc, #424]	; (8004f68 <HAL_DMA_IRQHandler+0xa34>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_DMA_IRQHandler+0xa38>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <HAL_DMA_IRQHandler+0xa3c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a65      	ldr	r2, [pc, #404]	; (8004f74 <HAL_DMA_IRQHandler+0xa40>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_DMA_IRQHandler+0x8b8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <HAL_DMA_IRQHandler+0xa44>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x8ca>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e007      	b.n	8004e0e <HAL_DMA_IRQHandler+0x8da>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d307      	bcc.n	8004e2a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f2      	bne.n	8004e0e <HAL_DMA_IRQHandler+0x8da>
 8004e28:	e000      	b.n	8004e2c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e2a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004e42:	e003      	b.n	8004e4c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 8272 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	e26c      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a43      	ldr	r2, [pc, #268]	; (8004f7c <HAL_DMA_IRQHandler+0xa48>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <HAL_DMA_IRQHandler+0xa4c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <HAL_DMA_IRQHandler+0xa50>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_DMA_IRQHandler+0xa54>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a3d      	ldr	r2, [pc, #244]	; (8004f8c <HAL_DMA_IRQHandler+0xa58>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a3c      	ldr	r2, [pc, #240]	; (8004f90 <HAL_DMA_IRQHandler+0xa5c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <HAL_DMA_IRQHandler+0xa60>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x984>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a39      	ldr	r2, [pc, #228]	; (8004f98 <HAL_DMA_IRQHandler+0xa64>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x988>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_DMA_IRQHandler+0x98a>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 823f 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80cd 	beq.w	800507c <HAL_DMA_IRQHandler+0xb48>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80c7 	beq.w	800507c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	409a      	lsls	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d049      	beq.n	8004f9c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8210 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f24:	e20a      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8206 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f38:	e200      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
 8004f3a:	bf00      	nop
 8004f3c:	40020010 	.word	0x40020010
 8004f40:	40020028 	.word	0x40020028
 8004f44:	40020040 	.word	0x40020040
 8004f48:	40020058 	.word	0x40020058
 8004f4c:	40020070 	.word	0x40020070
 8004f50:	40020088 	.word	0x40020088
 8004f54:	400200a0 	.word	0x400200a0
 8004f58:	400200b8 	.word	0x400200b8
 8004f5c:	40020410 	.word	0x40020410
 8004f60:	40020428 	.word	0x40020428
 8004f64:	40020440 	.word	0x40020440
 8004f68:	40020458 	.word	0x40020458
 8004f6c:	40020470 	.word	0x40020470
 8004f70:	40020488 	.word	0x40020488
 8004f74:	400204a0 	.word	0x400204a0
 8004f78:	400204b8 	.word	0x400204b8
 8004f7c:	58025408 	.word	0x58025408
 8004f80:	5802541c 	.word	0x5802541c
 8004f84:	58025430 	.word	0x58025430
 8004f88:	58025444 	.word	0x58025444
 8004f8c:	58025458 	.word	0x58025458
 8004f90:	5802546c 	.word	0x5802546c
 8004f94:	58025480 	.word	0x58025480
 8004f98:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d160      	bne.n	8005068 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a7f      	ldr	r2, [pc, #508]	; (80051a8 <HAL_DMA_IRQHandler+0xc74>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d04a      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a7d      	ldr	r2, [pc, #500]	; (80051ac <HAL_DMA_IRQHandler+0xc78>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d045      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a7c      	ldr	r2, [pc, #496]	; (80051b0 <HAL_DMA_IRQHandler+0xc7c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d040      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a7a      	ldr	r2, [pc, #488]	; (80051b4 <HAL_DMA_IRQHandler+0xc80>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d03b      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a79      	ldr	r2, [pc, #484]	; (80051b8 <HAL_DMA_IRQHandler+0xc84>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d036      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a77      	ldr	r2, [pc, #476]	; (80051bc <HAL_DMA_IRQHandler+0xc88>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d031      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a76      	ldr	r2, [pc, #472]	; (80051c0 <HAL_DMA_IRQHandler+0xc8c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d02c      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a74      	ldr	r2, [pc, #464]	; (80051c4 <HAL_DMA_IRQHandler+0xc90>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d027      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a73      	ldr	r2, [pc, #460]	; (80051c8 <HAL_DMA_IRQHandler+0xc94>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a71      	ldr	r2, [pc, #452]	; (80051cc <HAL_DMA_IRQHandler+0xc98>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d01d      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a70      	ldr	r2, [pc, #448]	; (80051d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6e      	ldr	r2, [pc, #440]	; (80051d4 <HAL_DMA_IRQHandler+0xca0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a6d      	ldr	r2, [pc, #436]	; (80051d8 <HAL_DMA_IRQHandler+0xca4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a6b      	ldr	r2, [pc, #428]	; (80051dc <HAL_DMA_IRQHandler+0xca8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a6a      	ldr	r2, [pc, #424]	; (80051e0 <HAL_DMA_IRQHandler+0xcac>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_DMA_IRQHandler+0xb12>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a68      	ldr	r2, [pc, #416]	; (80051e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d108      	bne.n	8005058 <HAL_DMA_IRQHandler+0xb24>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0208 	bic.w	r2, r2, #8
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e007      	b.n	8005068 <HAL_DMA_IRQHandler+0xb34>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8165 	beq.w	800533c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800507a:	e15f      	b.n	800533c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005080:	f003 031f 	and.w	r3, r3, #31
 8005084:	2202      	movs	r2, #2
 8005086:	409a      	lsls	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80c5 	beq.w	800521c <HAL_DMA_IRQHandler+0xce8>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80bf 	beq.w	800521c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a2:	f003 031f 	and.w	r3, r3, #31
 80050a6:	2202      	movs	r2, #2
 80050a8:	409a      	lsls	r2, r3
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d018      	beq.n	80050ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 813a 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d4:	e134      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 8130 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050e8:	e12a      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f040 8089 	bne.w	8005208 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a2b      	ldr	r2, [pc, #172]	; (80051a8 <HAL_DMA_IRQHandler+0xc74>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d04a      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <HAL_DMA_IRQHandler+0xc78>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d045      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a28      	ldr	r2, [pc, #160]	; (80051b0 <HAL_DMA_IRQHandler+0xc7c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d040      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a26      	ldr	r2, [pc, #152]	; (80051b4 <HAL_DMA_IRQHandler+0xc80>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d03b      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <HAL_DMA_IRQHandler+0xc84>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d036      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_DMA_IRQHandler+0xc88>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d031      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_DMA_IRQHandler+0xc8c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d02c      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <HAL_DMA_IRQHandler+0xc90>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d027      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <HAL_DMA_IRQHandler+0xc94>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1d      	ldr	r2, [pc, #116]	; (80051cc <HAL_DMA_IRQHandler+0xc98>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01d      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1c      	ldr	r2, [pc, #112]	; (80051d0 <HAL_DMA_IRQHandler+0xc9c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1a      	ldr	r2, [pc, #104]	; (80051d4 <HAL_DMA_IRQHandler+0xca0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <HAL_DMA_IRQHandler+0xca4>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_DMA_IRQHandler+0xca8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <HAL_DMA_IRQHandler+0xcac>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_DMA_IRQHandler+0xc62>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <HAL_DMA_IRQHandler+0xcb0>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d128      	bne.n	80051e8 <HAL_DMA_IRQHandler+0xcb4>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0214 	bic.w	r2, r2, #20
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e027      	b.n	80051f8 <HAL_DMA_IRQHandler+0xcc4>
 80051a8:	40020010 	.word	0x40020010
 80051ac:	40020028 	.word	0x40020028
 80051b0:	40020040 	.word	0x40020040
 80051b4:	40020058 	.word	0x40020058
 80051b8:	40020070 	.word	0x40020070
 80051bc:	40020088 	.word	0x40020088
 80051c0:	400200a0 	.word	0x400200a0
 80051c4:	400200b8 	.word	0x400200b8
 80051c8:	40020410 	.word	0x40020410
 80051cc:	40020428 	.word	0x40020428
 80051d0:	40020440 	.word	0x40020440
 80051d4:	40020458 	.word	0x40020458
 80051d8:	40020470 	.word	0x40020470
 80051dc:	40020488 	.word	0x40020488
 80051e0:	400204a0 	.word	0x400204a0
 80051e4:	400204b8 	.word	0x400204b8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 020a 	bic.w	r2, r2, #10
 80051f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8097 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800521a:	e091      	b.n	8005340 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005220:	f003 031f 	and.w	r3, r3, #31
 8005224:	2208      	movs	r2, #8
 8005226:	409a      	lsls	r2, r3
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8088 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8082 	beq.w	8005342 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <HAL_DMA_IRQHandler+0xe14>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3f      	ldr	r2, [pc, #252]	; (800534c <HAL_DMA_IRQHandler+0xe18>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <HAL_DMA_IRQHandler+0xe1c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <HAL_DMA_IRQHandler+0xe20>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3b      	ldr	r2, [pc, #236]	; (8005358 <HAL_DMA_IRQHandler+0xe24>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a39      	ldr	r2, [pc, #228]	; (800535c <HAL_DMA_IRQHandler+0xe28>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_DMA_IRQHandler+0xe2c>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a36      	ldr	r2, [pc, #216]	; (8005364 <HAL_DMA_IRQHandler+0xe30>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a35      	ldr	r2, [pc, #212]	; (8005368 <HAL_DMA_IRQHandler+0xe34>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <HAL_DMA_IRQHandler+0xe38>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <HAL_DMA_IRQHandler+0xe3c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <HAL_DMA_IRQHandler+0xe40>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <HAL_DMA_IRQHandler+0xe44>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <HAL_DMA_IRQHandler+0xe48>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <HAL_DMA_IRQHandler+0xe4c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_IRQHandler+0xdaa>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <HAL_DMA_IRQHandler+0xe50>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <HAL_DMA_IRQHandler+0xdbc>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 021c 	bic.w	r2, r2, #28
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e007      	b.n	8005300 <HAL_DMA_IRQHandler+0xdcc>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020e 	bic.w	r2, r2, #14
 80052fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2201      	movs	r2, #1
 800530a:	409a      	lsls	r2, r3
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	4798      	blx	r3
 8005336:	e004      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005338:	bf00      	nop
 800533a:	e002      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005340:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005342:	3728      	adds	r7, #40	; 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40020010 	.word	0x40020010
 800534c:	40020028 	.word	0x40020028
 8005350:	40020040 	.word	0x40020040
 8005354:	40020058 	.word	0x40020058
 8005358:	40020070 	.word	0x40020070
 800535c:	40020088 	.word	0x40020088
 8005360:	400200a0 	.word	0x400200a0
 8005364:	400200b8 	.word	0x400200b8
 8005368:	40020410 	.word	0x40020410
 800536c:	40020428 	.word	0x40020428
 8005370:	40020440 	.word	0x40020440
 8005374:	40020458 	.word	0x40020458
 8005378:	40020470 	.word	0x40020470
 800537c:	40020488 	.word	0x40020488
 8005380:	400204a0 	.word	0x400204a0
 8005384:	400204b8 	.word	0x400204b8

08005388 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e04f      	b.n	800543a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f84e 	bl	8005450 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <HAL_DMA2D_Init+0xbc>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6851      	ldr	r1, [r2, #4]
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	69d2      	ldr	r2, [r2, #28]
 80053ce:	4311      	orrs	r1, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	430b      	orrs	r3, r1
 80053d6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053de:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <HAL_DMA2D_Init+0xc0>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6891      	ldr	r1, [r2, #8]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6992      	ldr	r2, [r2, #24]
 80053ea:	4311      	orrs	r1, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	430b      	orrs	r3, r1
 80053f2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fa:	4b14      	ldr	r3, [pc, #80]	; (800544c <HAL_DMA2D_Init+0xc4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68d1      	ldr	r1, [r2, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	430b      	orrs	r3, r1
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	051a      	lsls	r2, r3, #20
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	055b      	lsls	r3, r3, #21
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	fff8ffbf 	.word	0xfff8ffbf
 8005448:	fffffef8 	.word	0xfffffef8
 800544c:	ffff0000 	.word	0xffff0000

08005450 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af02      	add	r7, sp, #8
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_DMA2D_Start+0x1c>
 800547c:	2302      	movs	r3, #2
 800547e:	e018      	b.n	80054b2 <HAL_DMA2D_Start+0x4e>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f9a4 	bl	80057e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d056      	beq.n	8005584 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80054d6:	f7fe f96d 	bl	80037b4 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80054dc:	e04b      	b.n	8005576 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d023      	beq.n	8005538 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fe:	f043 0202 	orr.w	r2, r3, #2
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005514:	f043 0201 	orr.w	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2221      	movs	r2, #33	; 0x21
 8005522:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0a5      	b.n	8005684 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800553e:	d01a      	beq.n	8005576 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fe f938 	bl	80037b4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <HAL_DMA2D_PollForTransfer+0x9c>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10f      	bne.n	8005576 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555a:	f043 0220 	orr.w	r2, r3, #32
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2203      	movs	r2, #3
 8005566:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e086      	b.n	8005684 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ac      	beq.n	80054de <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d061      	beq.n	800566a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80055a6:	f7fe f905 	bl	80037b4 <HAL_GetTick>
 80055aa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80055ac:	e056      	b.n	800565c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d02e      	beq.n	800561e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e4:	f043 0202 	orr.w	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fa:	f043 0201 	orr.w	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2229      	movs	r2, #41	; 0x29
 8005608:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2204      	movs	r2, #4
 800560e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e032      	b.n	8005684 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005624:	d01a      	beq.n	800565c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005626:	f7fe f8c5 	bl	80037b4 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <HAL_DMA2D_PollForTransfer+0x182>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10f      	bne.n	800565c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2203      	movs	r2, #3
 800564c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e013      	b.n	8005684 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0a1      	beq.n	80055ae <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2212      	movs	r2, #18
 8005670:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA2D_ConfigLayer+0x24>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e092      	b.n	80057d6 <HAL_DMA2D_ConfigLayer+0x14a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3328      	adds	r3, #40	; 0x28
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	4413      	add	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	041b      	lsls	r3, r3, #16
 80056dc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80056e4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80056f0:	4b3c      	ldr	r3, [pc, #240]	; (80057e4 <HAL_DMA2D_ConfigLayer+0x158>)
 80056f2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b0a      	cmp	r3, #10
 80056fa:	d003      	beq.n	8005704 <HAL_DMA2D_ConfigLayer+0x78>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b09      	cmp	r3, #9
 8005702:	d107      	bne.n	8005714 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	e005      	b.n	8005720 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d120      	bne.n	8005768 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	43db      	mvns	r3, r3
 8005730:	ea02 0103 	and.w	r1, r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	430a      	orrs	r2, r1
 800573c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b0a      	cmp	r3, #10
 800574e:	d003      	beq.n	8005758 <HAL_DMA2D_ConfigLayer+0xcc>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b09      	cmp	r3, #9
 8005756:	d135      	bne.n	80057c4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
 8005766:	e02d      	b.n	80057c4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b0b      	cmp	r3, #11
 800576e:	d109      	bne.n	8005784 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	049b      	lsls	r3, r3, #18
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8005782:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	43db      	mvns	r3, r3
 800578e:	ea02 0103 	and.w	r1, r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	430a      	orrs	r2, r1
 800579a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b0a      	cmp	r3, #10
 80057ac:	d003      	beq.n	80057b6 <HAL_DMA2D_ConfigLayer+0x12a>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d106      	bne.n	80057c4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80057c2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	ff33000f 	.word	0xff33000f

080057e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b08b      	sub	sp, #44	; 0x2c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	041a      	lsls	r2, r3, #16
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	431a      	orrs	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005820:	d174      	bne.n	800590c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005828:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005830:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005838:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d108      	bne.n	800585a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	431a      	orrs	r2, r3
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	4313      	orrs	r3, r2
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e053      	b.n	8005902 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d106      	bne.n	8005870 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
 800586e:	e048      	b.n	8005902 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d111      	bne.n	800589c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	0cdb      	lsrs	r3, r3, #19
 800587c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	0a9b      	lsrs	r3, r3, #10
 8005882:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	08db      	lsrs	r3, r3, #3
 8005888:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	02db      	lsls	r3, r3, #11
 8005892:	4313      	orrs	r3, r2
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
 800589a:	e032      	b.n	8005902 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d117      	bne.n	80058d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	0fdb      	lsrs	r3, r3, #31
 80058a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	0cdb      	lsrs	r3, r3, #19
 80058ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	0adb      	lsrs	r3, r3, #11
 80058b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	08db      	lsrs	r3, r3, #3
 80058ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	431a      	orrs	r2, r3
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	03db      	lsls	r3, r3, #15
 80058ca:	4313      	orrs	r3, r2
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
 80058d2:	e016      	b.n	8005902 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	0f1b      	lsrs	r3, r3, #28
 80058d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	0b1b      	lsrs	r3, r3, #12
 80058e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	431a      	orrs	r2, r3
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	031b      	lsls	r3, r3, #12
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800590a:	e00d      	b.n	8005928 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005914:	d104      	bne.n	8005920 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	e003      	b.n	8005928 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	60da      	str	r2, [r3, #12]
}
 8005928:	bf00      	nop
 800592a:	372c      	adds	r7, #44	; 0x2c
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2201      	movs	r2, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	011a      	lsls	r2, r3, #4
 800595c:	4b0c      	ldr	r3, [pc, #48]	; (8005990 <HAL_EXTI_IRQHandler+0x5c>)
 800595e:	4413      	add	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4798      	blx	r3
    }
  }
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	58000088 	.word	0x58000088

08005994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059a2:	4b89      	ldr	r3, [pc, #548]	; (8005bc8 <HAL_GPIO_Init+0x234>)
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059a6:	e194      	b.n	8005cd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8186 	beq.w	8005ccc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d005      	beq.n	80059d8 <HAL_GPIO_Init+0x44>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d130      	bne.n	8005a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0201 	and.w	r2, r3, #1
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d017      	beq.n	8005a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d123      	bne.n	8005aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	08da      	lsrs	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3208      	adds	r2, #8
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	220f      	movs	r2, #15
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	69b9      	ldr	r1, [r7, #24]
 8005ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80e0 	beq.w	8005ccc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0c:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <HAL_GPIO_Init+0x238>)
 8005b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b12:	4a2e      	ldr	r2, [pc, #184]	; (8005bcc <HAL_GPIO_Init+0x238>)
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b1c:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_GPIO_Init+0x238>)
 8005b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b2a:	4a29      	ldr	r2, [pc, #164]	; (8005bd0 <HAL_GPIO_Init+0x23c>)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <HAL_GPIO_Init+0x240>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d052      	beq.n	8005bfc <HAL_GPIO_Init+0x268>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_GPIO_Init+0x244>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_GPIO_Init+0x22e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <HAL_GPIO_Init+0x248>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d02b      	beq.n	8005bbe <HAL_GPIO_Init+0x22a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <HAL_GPIO_Init+0x24c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d025      	beq.n	8005bba <HAL_GPIO_Init+0x226>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_GPIO_Init+0x250>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01f      	beq.n	8005bb6 <HAL_GPIO_Init+0x222>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_GPIO_Init+0x254>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d019      	beq.n	8005bb2 <HAL_GPIO_Init+0x21e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1a      	ldr	r2, [pc, #104]	; (8005bec <HAL_GPIO_Init+0x258>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_GPIO_Init+0x21a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <HAL_GPIO_Init+0x25c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00d      	beq.n	8005baa <HAL_GPIO_Init+0x216>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_GPIO_Init+0x260>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <HAL_GPIO_Init+0x212>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a17      	ldr	r2, [pc, #92]	; (8005bf8 <HAL_GPIO_Init+0x264>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d101      	bne.n	8005ba2 <HAL_GPIO_Init+0x20e>
 8005b9e:	2309      	movs	r3, #9
 8005ba0:	e02d      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005ba2:	230a      	movs	r3, #10
 8005ba4:	e02b      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005ba6:	2308      	movs	r3, #8
 8005ba8:	e029      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005baa:	2307      	movs	r3, #7
 8005bac:	e027      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bae:	2306      	movs	r3, #6
 8005bb0:	e025      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bb2:	2305      	movs	r3, #5
 8005bb4:	e023      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bb6:	2304      	movs	r3, #4
 8005bb8:	e021      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e01f      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e01d      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e01b      	b.n	8005bfe <HAL_GPIO_Init+0x26a>
 8005bc6:	bf00      	nop
 8005bc8:	58000080 	.word	0x58000080
 8005bcc:	58024400 	.word	0x58024400
 8005bd0:	58000400 	.word	0x58000400
 8005bd4:	58020000 	.word	0x58020000
 8005bd8:	58020400 	.word	0x58020400
 8005bdc:	58020800 	.word	0x58020800
 8005be0:	58020c00 	.word	0x58020c00
 8005be4:	58021000 	.word	0x58021000
 8005be8:	58021400 	.word	0x58021400
 8005bec:	58021800 	.word	0x58021800
 8005bf0:	58021c00 	.word	0x58021c00
 8005bf4:	58022000 	.word	0x58022000
 8005bf8:	58022400 	.word	0x58022400
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	f002 0203 	and.w	r2, r2, #3
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	4093      	lsls	r3, r2
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c0e:	4938      	ldr	r1, [pc, #224]	; (8005cf0 <HAL_GPIO_Init+0x35c>)
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	089b      	lsrs	r3, r3, #2
 8005c14:	3302      	adds	r3, #2
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	43db      	mvns	r3, r3
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	43db      	mvns	r3, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4013      	ands	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f47f ae63 	bne.w	80059a8 <HAL_GPIO_Init+0x14>
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	3724      	adds	r7, #36	; 0x24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	58000400 	.word	0x58000400

08005cf4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d02:	4b75      	ldr	r3, [pc, #468]	; (8005ed8 <HAL_GPIO_DeInit+0x1e4>)
 8005d04:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8005d06:	e0d9      	b.n	8005ebc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8005d08:	2201      	movs	r2, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	4013      	ands	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80cc 	beq.w	8005eb6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005d1e:	4a6f      	ldr	r2, [pc, #444]	; (8005edc <HAL_GPIO_DeInit+0x1e8>)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	089b      	lsrs	r3, r3, #2
 8005d24:	3302      	adds	r3, #2
 8005d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d2a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	220f      	movs	r2, #15
 8005d36:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a67      	ldr	r2, [pc, #412]	; (8005ee0 <HAL_GPIO_DeInit+0x1ec>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d037      	beq.n	8005db8 <HAL_GPIO_DeInit+0xc4>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a66      	ldr	r2, [pc, #408]	; (8005ee4 <HAL_GPIO_DeInit+0x1f0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d031      	beq.n	8005db4 <HAL_GPIO_DeInit+0xc0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a65      	ldr	r2, [pc, #404]	; (8005ee8 <HAL_GPIO_DeInit+0x1f4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02b      	beq.n	8005db0 <HAL_GPIO_DeInit+0xbc>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a64      	ldr	r2, [pc, #400]	; (8005eec <HAL_GPIO_DeInit+0x1f8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d025      	beq.n	8005dac <HAL_GPIO_DeInit+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a63      	ldr	r2, [pc, #396]	; (8005ef0 <HAL_GPIO_DeInit+0x1fc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d01f      	beq.n	8005da8 <HAL_GPIO_DeInit+0xb4>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a62      	ldr	r2, [pc, #392]	; (8005ef4 <HAL_GPIO_DeInit+0x200>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d019      	beq.n	8005da4 <HAL_GPIO_DeInit+0xb0>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a61      	ldr	r2, [pc, #388]	; (8005ef8 <HAL_GPIO_DeInit+0x204>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d013      	beq.n	8005da0 <HAL_GPIO_DeInit+0xac>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a60      	ldr	r2, [pc, #384]	; (8005efc <HAL_GPIO_DeInit+0x208>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00d      	beq.n	8005d9c <HAL_GPIO_DeInit+0xa8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a5f      	ldr	r2, [pc, #380]	; (8005f00 <HAL_GPIO_DeInit+0x20c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d007      	beq.n	8005d98 <HAL_GPIO_DeInit+0xa4>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a5e      	ldr	r2, [pc, #376]	; (8005f04 <HAL_GPIO_DeInit+0x210>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d101      	bne.n	8005d94 <HAL_GPIO_DeInit+0xa0>
 8005d90:	2309      	movs	r3, #9
 8005d92:	e012      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005d94:	230a      	movs	r3, #10
 8005d96:	e010      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	e00e      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005d9c:	2307      	movs	r3, #7
 8005d9e:	e00c      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005da0:	2306      	movs	r3, #6
 8005da2:	e00a      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005da4:	2305      	movs	r3, #5
 8005da6:	e008      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005da8:	2304      	movs	r3, #4
 8005daa:	e006      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005dac:	2303      	movs	r3, #3
 8005dae:	e004      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e002      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <HAL_GPIO_DeInit+0xc6>
 8005db8:	2300      	movs	r3, #0
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	f002 0203 	and.w	r2, r2, #3
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	4093      	lsls	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d136      	bne.n	8005e38 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	43db      	mvns	r3, r3
 8005de0:	401a      	ands	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	43db      	mvns	r3, r3
 8005df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df4:	4013      	ands	r3, r2
 8005df6:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e06:	4013      	ands	r3, r2
 8005e08:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 0303 	and.w	r3, r3, #3
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	220f      	movs	r2, #15
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005e1a:	4a30      	ldr	r2, [pc, #192]	; (8005edc <HAL_GPIO_DeInit+0x1e8>)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	3302      	adds	r3, #2
 8005e22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	43da      	mvns	r2, r3
 8005e2a:	482c      	ldr	r0, [pc, #176]	; (8005edc <HAL_GPIO_DeInit+0x1e8>)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	089b      	lsrs	r3, r3, #2
 8005e30:	400a      	ands	r2, r1
 8005e32:	3302      	adds	r3, #2
 8005e34:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	2103      	movs	r1, #3
 8005e42:	fa01 f303 	lsl.w	r3, r1, r3
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	08da      	lsrs	r2, r3, #3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3208      	adds	r2, #8
 8005e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	220f      	movs	r2, #15
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	43db      	mvns	r3, r3
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	08d2      	lsrs	r2, r2, #3
 8005e6c:	4019      	ands	r1, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3208      	adds	r2, #8
 8005e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	2103      	movs	r1, #3
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	43db      	mvns	r3, r3
 8005e86:	401a      	ands	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	2101      	movs	r1, #1
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	fa01 f303 	lsl.w	r3, r1, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	2103      	movs	r1, #3
 8005eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	401a      	ands	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f af1f 	bne.w	8005d08 <HAL_GPIO_DeInit+0x14>
  }
}
 8005eca:	bf00      	nop
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	58000080 	.word	0x58000080
 8005edc:	58000400 	.word	0x58000400
 8005ee0:	58020000 	.word	0x58020000
 8005ee4:	58020400 	.word	0x58020400
 8005ee8:	58020800 	.word	0x58020800
 8005eec:	58020c00 	.word	0x58020c00
 8005ef0:	58021000 	.word	0x58021000
 8005ef4:	58021400 	.word	0x58021400
 8005ef8:	58021800 	.word	0x58021800
 8005efc:	58021c00 	.word	0x58021c00
 8005f00:	58022000 	.word	0x58022000
 8005f04:	58022400 	.word	0x58022400

08005f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
 8005f14:	4613      	mov	r3, r2
 8005f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f1e:	887a      	ldrh	r2, [r7, #2]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f24:	e003      	b.n	8005f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f26:	887b      	ldrh	r3, [r7, #2]
 8005f28:	041a      	lsls	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	619a      	str	r2, [r3, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
	...

08005f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07f      	b.n	800604e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f8a9 	bl	80060ba <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2224      	movs	r2, #36	; 0x24
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d107      	bne.n	8005fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	e006      	b.n	8005fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d104      	bne.n	8005fd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <HAL_I2C_Init+0x11c>)
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ff4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	02008000 	.word	0x02008000

0800605c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e021      	b.n	80060b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2224      	movs	r2, #36	; 0x24
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f821 	bl	80060ce <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80060d6:	bf00      	nop
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	4608      	mov	r0, r1
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	817b      	strh	r3, [r7, #10]
 80060f6:	460b      	mov	r3, r1
 80060f8:	813b      	strh	r3, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b20      	cmp	r3, #32
 8006108:	f040 80f9 	bne.w	80062fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_I2C_Mem_Write+0x34>
 8006112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d105      	bne.n	8006124 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0ed      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800612a:	2b01      	cmp	r3, #1
 800612c:	d101      	bne.n	8006132 <HAL_I2C_Mem_Write+0x4e>
 800612e:	2302      	movs	r3, #2
 8006130:	e0e6      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800613a:	f7fd fb3b 	bl	80037b4 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	2319      	movs	r3, #25
 8006146:	2201      	movs	r2, #1
 8006148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fadd 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e0d1      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2221      	movs	r2, #33	; 0x21
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a3a      	ldr	r2, [r7, #32]
 8006176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800617c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006184:	88f8      	ldrh	r0, [r7, #6]
 8006186:	893a      	ldrh	r2, [r7, #8]
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4603      	mov	r3, r0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f9ed 	bl	8006574 <I2C_RequestMemoryWrite>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d005      	beq.n	80061ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0a9      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2bff      	cmp	r3, #255	; 0xff
 80061b4:	d90e      	bls.n	80061d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	22ff      	movs	r2, #255	; 0xff
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	8979      	ldrh	r1, [r7, #10]
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fc57 	bl	8006a80 <I2C_TransferConfig>
 80061d2:	e00f      	b.n	80061f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	b2da      	uxtb	r2, r3
 80061e4:	8979      	ldrh	r1, [r7, #10]
 80061e6:	2300      	movs	r3, #0
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fc46 	bl	8006a80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fad6 	bl	80067aa <I2C_WaitOnTXISFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e07b      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	781a      	ldrb	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d034      	beq.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006246:	2b00      	cmp	r3, #0
 8006248:	d130      	bne.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	; 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 fa59 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e04d      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	2bff      	cmp	r3, #255	; 0xff
 800626c:	d90e      	bls.n	800628c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	b2da      	uxtb	r2, r3
 800627a:	8979      	ldrh	r1, [r7, #10]
 800627c:	2300      	movs	r3, #0
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fbfb 	bl	8006a80 <I2C_TransferConfig>
 800628a:	e00f      	b.n	80062ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629a:	b2da      	uxtb	r2, r3
 800629c:	8979      	ldrh	r1, [r7, #10]
 800629e:	2300      	movs	r3, #0
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fbea 	bl	8006a80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d19e      	bne.n	80061f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fabc 	bl	8006838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e01a      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2220      	movs	r2, #32
 80062d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <HAL_I2C_Mem_Write+0x224>)
 80062de:	400b      	ands	r3, r1
 80062e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e000      	b.n	8006300 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062fe:	2302      	movs	r3, #2
  }
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	fe00e800 	.word	0xfe00e800

0800630c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	817b      	strh	r3, [r7, #10]
 800631e:	460b      	mov	r3, r1
 8006320:	813b      	strh	r3, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b20      	cmp	r3, #32
 8006330:	f040 80fd 	bne.w	800652e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d002      	beq.n	8006340 <HAL_I2C_Mem_Read+0x34>
 800633a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0f1      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_I2C_Mem_Read+0x4e>
 8006356:	2302      	movs	r3, #2
 8006358:	e0ea      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006362:	f7fd fa27 	bl	80037b4 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	2319      	movs	r3, #25
 800636e:	2201      	movs	r2, #1
 8006370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f9c9 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0d5      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2222      	movs	r2, #34	; 0x22
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2240      	movs	r2, #64	; 0x40
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063ac:	88f8      	ldrh	r0, [r7, #6]
 80063ae:	893a      	ldrh	r2, [r7, #8]
 80063b0:	8979      	ldrh	r1, [r7, #10]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4603      	mov	r3, r0
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f92d 	bl	800661c <I2C_RequestMemoryRead>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0ad      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d90e      	bls.n	80063fc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	4b52      	ldr	r3, [pc, #328]	; (8006538 <HAL_I2C_Mem_Read+0x22c>)
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f000 fb43 	bl	8006a80 <I2C_TransferConfig>
 80063fa:	e00f      	b.n	800641c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	b2da      	uxtb	r2, r3
 800640c:	8979      	ldrh	r1, [r7, #10]
 800640e:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_I2C_Mem_Read+0x22c>)
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fb32 	bl	8006a80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2200      	movs	r2, #0
 8006424:	2104      	movs	r1, #4
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f970 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07c      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d034      	beq.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d130      	bne.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	2200      	movs	r2, #0
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f941 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e04d      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2bff      	cmp	r3, #255	; 0xff
 800649c:	d90e      	bls.n	80064bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	22ff      	movs	r2, #255	; 0xff
 80064a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	8979      	ldrh	r1, [r7, #10]
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fae3 	bl	8006a80 <I2C_TransferConfig>
 80064ba:	e00f      	b.n	80064dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fad2 	bl	8006a80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d19a      	bne.n	800641c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f9a4 	bl	8006838 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e01a      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2220      	movs	r2, #32
 8006500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	4b0b      	ldr	r3, [pc, #44]	; (800653c <HAL_I2C_Mem_Read+0x230>)
 800650e:	400b      	ands	r3, r1
 8006510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800652e:	2302      	movs	r3, #2
  }
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	80002400 	.word	0x80002400
 800653c:	fe00e800 	.word	0xfe00e800

08006540 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654e:	b2db      	uxtb	r3, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006568:	4618      	mov	r0, r3
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	460b      	mov	r3, r1
 8006588:	813b      	strh	r3, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	b2da      	uxtb	r2, r3
 8006592:	8979      	ldrh	r1, [r7, #10]
 8006594:	4b20      	ldr	r3, [pc, #128]	; (8006618 <I2C_RequestMemoryWrite+0xa4>)
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fa6f 	bl	8006a80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f8ff 	bl	80067aa <I2C_WaitOnTXISFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e02c      	b.n	8006610 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065b6:	88fb      	ldrh	r3, [r7, #6]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d105      	bne.n	80065c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065bc:	893b      	ldrh	r3, [r7, #8]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	629a      	str	r2, [r3, #40]	; 0x28
 80065c6:	e015      	b.n	80065f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80065c8:	893b      	ldrh	r3, [r7, #8]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	69b9      	ldr	r1, [r7, #24]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f8e5 	bl	80067aa <I2C_WaitOnTXISFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e012      	b.n	8006610 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065ea:	893b      	ldrh	r3, [r7, #8]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2200      	movs	r2, #0
 80065fc:	2180      	movs	r1, #128	; 0x80
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f884 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	80002000 	.word	0x80002000

0800661c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	4608      	mov	r0, r1
 8006626:	4611      	mov	r1, r2
 8006628:	461a      	mov	r2, r3
 800662a:	4603      	mov	r3, r0
 800662c:	817b      	strh	r3, [r7, #10]
 800662e:	460b      	mov	r3, r1
 8006630:	813b      	strh	r3, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006636:	88fb      	ldrh	r3, [r7, #6]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	8979      	ldrh	r1, [r7, #10]
 800663c:	4b20      	ldr	r3, [pc, #128]	; (80066c0 <I2C_RequestMemoryRead+0xa4>)
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	2300      	movs	r3, #0
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fa1c 	bl	8006a80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	69b9      	ldr	r1, [r7, #24]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f8ac 	bl	80067aa <I2C_WaitOnTXISFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e02c      	b.n	80066b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d105      	bne.n	800666e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006662:	893b      	ldrh	r3, [r7, #8]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
 800666c:	e015      	b.n	800669a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800666e:	893b      	ldrh	r3, [r7, #8]
 8006670:	0a1b      	lsrs	r3, r3, #8
 8006672:	b29b      	uxth	r3, r3
 8006674:	b2da      	uxtb	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	69b9      	ldr	r1, [r7, #24]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f892 	bl	80067aa <I2C_WaitOnTXISFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e012      	b.n	80066b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006690:	893b      	ldrh	r3, [r7, #8]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2140      	movs	r1, #64	; 0x40
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f831 	bl	800670c <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	80002000 	.word	0x80002000

080066c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d103      	bne.n	80066e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d007      	beq.n	8006700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	619a      	str	r2, [r3, #24]
  }
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	4613      	mov	r3, r2
 800671a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800671c:	e031      	b.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006724:	d02d      	beq.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fd f845 	bl	80037b4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d122      	bne.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	4013      	ands	r3, r2
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	429a      	cmp	r2, r3
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	429a      	cmp	r2, r3
 8006758:	d113      	bne.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f043 0220 	orr.w	r2, r3, #32
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e00f      	b.n	80067a2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	699a      	ldr	r2, [r3, #24]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d0be      	beq.n	800671e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067b6:	e033      	b.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f87f 	bl	80068c0 <I2C_IsErrorOccurred>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e031      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d2:	d025      	beq.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067d4:	f7fc ffee 	bl	80037b4 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d302      	bcc.n	80067ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d11a      	bne.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d013      	beq.n	8006820 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e007      	b.n	8006830 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d1c4      	bne.n	80067b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006844:	e02f      	b.n	80068a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f838 	bl	80068c0 <I2C_IsErrorOccurred>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e02d      	b.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc ffab 	bl	80037b4 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11a      	bne.n	80068a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b20      	cmp	r3, #32
 800687c:	d013      	beq.n	80068a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e007      	b.n	80068b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d1c8      	bne.n	8006846 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068da:	2300      	movs	r3, #0
 80068dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d068      	beq.n	80069be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2210      	movs	r2, #16
 80068f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068f4:	e049      	b.n	800698a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068fc:	d045      	beq.n	800698a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068fe:	f7fc ff59 	bl	80037b4 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <I2C_IsErrorOccurred+0x54>
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d13a      	bne.n	800698a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800691e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006926:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006936:	d121      	bne.n	800697c <I2C_IsErrorOccurred+0xbc>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693e:	d01d      	beq.n	800697c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	2b20      	cmp	r3, #32
 8006944:	d01a      	beq.n	800697c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006954:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006956:	f7fc ff2d 	bl	80037b4 <HAL_GetTick>
 800695a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800695c:	e00e      	b.n	800697c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800695e:	f7fc ff29 	bl	80037b4 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b19      	cmp	r3, #25
 800696a:	d907      	bls.n	800697c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	f043 0320 	orr.w	r3, r3, #32
 8006972:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800697a:	e006      	b.n	800698a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b20      	cmp	r3, #32
 8006988:	d1e9      	bne.n	800695e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b20      	cmp	r3, #32
 8006996:	d003      	beq.n	80069a0 <I2C_IsErrorOccurred+0xe0>
 8006998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0aa      	beq.n	80068f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2220      	movs	r2, #32
 80069ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f043 0308 	orr.w	r3, r3, #8
 80069f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f7ff fe45 	bl	80066c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <I2C_IsErrorOccurred+0x1bc>)
 8006a46:	400b      	ands	r3, r1
 8006a48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	431a      	orrs	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3728      	adds	r7, #40	; 0x28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	fe00e800 	.word	0xfe00e800

08006a80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	607b      	str	r3, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	817b      	strh	r3, [r7, #10]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a92:	897b      	ldrh	r3, [r7, #10]
 8006a94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a98:	7a7b      	ldrb	r3, [r7, #9]
 8006a9a:	041b      	lsls	r3, r3, #16
 8006a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aa0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	0d5b      	lsrs	r3, r3, #21
 8006aba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006abe:	4b08      	ldr	r3, [pc, #32]	; (8006ae0 <I2C_TransferConfig+0x60>)
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	43db      	mvns	r3, r3
 8006ac4:	ea02 0103 	and.w	r1, r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	03ff63ff 	.word	0x03ff63ff

08006ae4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	d138      	bne.n	8006b6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e032      	b.n	8006b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2224      	movs	r2, #36	; 0x24
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f022 0201 	bic.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6819      	ldr	r1, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f042 0201 	orr.w	r2, r2, #1
 8006b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d139      	bne.n	8006c04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d101      	bne.n	8006b9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	e033      	b.n	8006c06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2224      	movs	r2, #36	; 0x24
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0201 	bic.w	r2, r2, #1
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006bcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0bf      	b.n	8006da6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8ba 	bl	8006db4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006c56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6999      	ldr	r1, [r3, #24]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6899      	ldr	r1, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <HAL_LTDC_Init+0x19c>)
 8006c88:	400b      	ands	r3, r1
 8006c8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6899      	ldr	r1, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68d9      	ldr	r1, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <HAL_LTDC_Init+0x19c>)
 8006cb6:	400b      	ands	r3, r1
 8006cb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68d9      	ldr	r1, [r3, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1a      	ldr	r2, [r3, #32]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6919      	ldr	r1, [r3, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b33      	ldr	r3, [pc, #204]	; (8006db0 <HAL_LTDC_Init+0x19c>)
 8006ce4:	400b      	ands	r3, r1
 8006ce6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6919      	ldr	r1, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6959      	ldr	r1, [r3, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b27      	ldr	r3, [pc, #156]	; (8006db0 <HAL_LTDC_Init+0x19c>)
 8006d12:	400b      	ands	r3, r1
 8006d14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6959      	ldr	r1, [r3, #20]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006d44:	041b      	lsls	r3, r3, #16
 8006d46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0206 	orr.w	r2, r2, #6
 8006d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	699a      	ldr	r2, [r3, #24]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	f000f800 	.word	0xf000f800

08006db4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006dc8:	b5b0      	push	{r4, r5, r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_LTDC_ConfigLayer+0x1a>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e02c      	b.n	8006e3c <HAL_LTDC_ConfigLayer+0x74>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2202      	movs	r2, #2
 8006dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2134      	movs	r1, #52	; 0x34
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4614      	mov	r4, r2
 8006e06:	461d      	mov	r5, r3
 8006e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f811 	bl	8006e44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2201      	movs	r2, #1
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bdb0      	pop	{r4, r5, r7, pc}

08006e44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b089      	sub	sp, #36	; 0x24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	0c1b      	lsrs	r3, r3, #16
 8006e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e60:	4413      	add	r3, r2
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	01db      	lsls	r3, r3, #7
 8006e70:	4413      	add	r3, r2
 8006e72:	3384      	adds	r3, #132	; 0x84
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	01d2      	lsls	r2, r2, #7
 8006e80:	440a      	add	r2, r1
 8006e82:	3284      	adds	r2, #132	; 0x84
 8006e84:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e9a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e9c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	440b      	add	r3, r1
 8006eaa:	3384      	adds	r3, #132	; 0x84
 8006eac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006eb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ec2:	4413      	add	r3, r2
 8006ec4:	041b      	lsls	r3, r3, #16
 8006ec6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	01db      	lsls	r3, r3, #7
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3384      	adds	r3, #132	; 0x84
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	4611      	mov	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	01d2      	lsls	r2, r2, #7
 8006ee2:	440a      	add	r2, r1
 8006ee4:	3284      	adds	r2, #132	; 0x84
 8006ee6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006eea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006efa:	4413      	add	r3, r2
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4619      	mov	r1, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	01db      	lsls	r3, r3, #7
 8006f08:	440b      	add	r3, r1
 8006f0a:	3384      	adds	r3, #132	; 0x84
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	01db      	lsls	r3, r3, #7
 8006f1e:	4413      	add	r3, r2
 8006f20:	3384      	adds	r3, #132	; 0x84
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	6812      	ldr	r2, [r2, #0]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	01d2      	lsls	r2, r2, #7
 8006f2e:	440a      	add	r2, r1
 8006f30:	3284      	adds	r2, #132	; 0x84
 8006f32:	f023 0307 	bic.w	r3, r3, #7
 8006f36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	01db      	lsls	r3, r3, #7
 8006f42:	4413      	add	r3, r2
 8006f44:	3384      	adds	r3, #132	; 0x84
 8006f46:	461a      	mov	r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	061b      	lsls	r3, r3, #24
 8006f68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	01db      	lsls	r3, r3, #7
 8006f74:	4413      	add	r3, r2
 8006f76:	3384      	adds	r3, #132	; 0x84
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	4413      	add	r3, r2
 8006f86:	3384      	adds	r3, #132	; 0x84
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f94:	461a      	mov	r2, r3
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	01db      	lsls	r3, r3, #7
 8006fa8:	440b      	add	r3, r1
 8006faa:	3384      	adds	r3, #132	; 0x84
 8006fac:	4619      	mov	r1, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	01db      	lsls	r3, r3, #7
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3384      	adds	r3, #132	; 0x84
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	01d2      	lsls	r2, r2, #7
 8006fce:	440a      	add	r2, r1
 8006fd0:	3284      	adds	r2, #132	; 0x84
 8006fd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fd6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	01db      	lsls	r3, r3, #7
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3384      	adds	r3, #132	; 0x84
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	01db      	lsls	r3, r3, #7
 8006ff8:	4413      	add	r3, r2
 8006ffa:	3384      	adds	r3, #132	; 0x84
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	01db      	lsls	r3, r3, #7
 8007008:	440b      	add	r3, r1
 800700a:	3384      	adds	r3, #132	; 0x84
 800700c:	4619      	mov	r1, r3
 800700e:	4b58      	ldr	r3, [pc, #352]	; (8007170 <LTDC_SetConfig+0x32c>)
 8007010:	4013      	ands	r3, r2
 8007012:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	68f9      	ldr	r1, [r7, #12]
 800701e:	6809      	ldr	r1, [r1, #0]
 8007020:	4608      	mov	r0, r1
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	01c9      	lsls	r1, r1, #7
 8007026:	4401      	add	r1, r0
 8007028:	3184      	adds	r1, #132	; 0x84
 800702a:	4313      	orrs	r3, r2
 800702c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	01db      	lsls	r3, r3, #7
 8007038:	4413      	add	r3, r2
 800703a:	3384      	adds	r3, #132	; 0x84
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	01db      	lsls	r3, r3, #7
 8007048:	4413      	add	r3, r2
 800704a:	3384      	adds	r3, #132	; 0x84
 800704c:	461a      	mov	r2, r3
 800704e:	2300      	movs	r3, #0
 8007050:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	01db      	lsls	r3, r3, #7
 800705c:	4413      	add	r3, r2
 800705e:	3384      	adds	r3, #132	; 0x84
 8007060:	461a      	mov	r2, r3
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007070:	2304      	movs	r3, #4
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	e01b      	b.n	80070ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d102      	bne.n	8007084 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800707e:	2303      	movs	r3, #3
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	e014      	b.n	80070ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b04      	cmp	r3, #4
 800708a:	d00b      	beq.n	80070a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007090:	2b02      	cmp	r3, #2
 8007092:	d007      	beq.n	80070a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007098:	2b03      	cmp	r3, #3
 800709a:	d003      	beq.n	80070a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80070a0:	2b07      	cmp	r3, #7
 80070a2:	d102      	bne.n	80070aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80070a4:	2302      	movs	r3, #2
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	e001      	b.n	80070ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80070aa:	2301      	movs	r3, #1
 80070ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	01db      	lsls	r3, r3, #7
 80070b8:	4413      	add	r3, r2
 80070ba:	3384      	adds	r3, #132	; 0x84
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	4611      	mov	r1, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	01d2      	lsls	r2, r2, #7
 80070c8:	440a      	add	r2, r1
 80070ca:	3284      	adds	r2, #132	; 0x84
 80070cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80070d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	fb02 f303 	mul.w	r3, r2, r3
 80070dc:	041a      	lsls	r2, r3, #16
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6859      	ldr	r1, [r3, #4]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1acb      	subs	r3, r1, r3
 80070e8:	69f9      	ldr	r1, [r7, #28]
 80070ea:	fb01 f303 	mul.w	r3, r1, r3
 80070ee:	3307      	adds	r3, #7
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	6809      	ldr	r1, [r1, #0]
 80070f4:	4608      	mov	r0, r1
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	01c9      	lsls	r1, r1, #7
 80070fa:	4401      	add	r1, r0
 80070fc:	3184      	adds	r1, #132	; 0x84
 80070fe:	4313      	orrs	r3, r2
 8007100:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	01db      	lsls	r3, r3, #7
 800710c:	4413      	add	r3, r2
 800710e:	3384      	adds	r3, #132	; 0x84
 8007110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	01db      	lsls	r3, r3, #7
 800711c:	440b      	add	r3, r1
 800711e:	3384      	adds	r3, #132	; 0x84
 8007120:	4619      	mov	r1, r3
 8007122:	4b14      	ldr	r3, [pc, #80]	; (8007174 <LTDC_SetConfig+0x330>)
 8007124:	4013      	ands	r3, r2
 8007126:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	01db      	lsls	r3, r3, #7
 8007132:	4413      	add	r3, r2
 8007134:	3384      	adds	r3, #132	; 0x84
 8007136:	461a      	mov	r2, r3
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	01db      	lsls	r3, r3, #7
 8007148:	4413      	add	r3, r2
 800714a:	3384      	adds	r3, #132	; 0x84
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	6812      	ldr	r2, [r2, #0]
 8007152:	4611      	mov	r1, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	01d2      	lsls	r2, r2, #7
 8007158:	440a      	add	r2, r1
 800715a:	3284      	adds	r2, #132	; 0x84
 800715c:	f043 0301 	orr.w	r3, r3, #1
 8007160:	6013      	str	r3, [r2, #0]
}
 8007162:	bf00      	nop
 8007164:	3724      	adds	r7, #36	; 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	fffff8f8 	.word	0xfffff8f8
 8007174:	fffff800 	.word	0xfffff800

08007178 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007180:	f7fc fb18 	bl	80037b4 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e03b      	b.n	8007208 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2202      	movs	r2, #2
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 0201 	bic.w	r2, r2, #1
 80071ae:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80071b0:	e00f      	b.n	80071d2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80071b2:	f7fc faff 	bl	80037b4 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b05      	cmp	r3, #5
 80071be:	d908      	bls.n	80071d2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2240      	movs	r2, #64	; 0x40
 80071c4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2203      	movs	r2, #3
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e01a      	b.n	8007208 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e8      	bne.n	80071b2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f9c1 	bl	8007568 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e048      	b.n	80072b4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0201 	bic.w	r2, r2, #1
 8007230:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2200      	movs	r2, #0
 8007238:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2200      	movs	r2, #0
 8007240:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2200      	movs	r2, #0
 8007248:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2200      	movs	r2, #0
 8007268:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2200      	movs	r2, #0
 8007270:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2200      	movs	r2, #0
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2200      	movs	r2, #0
 8007280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	221f      	movs	r2, #31
 8007288:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072cc:	4b91      	ldr	r3, [pc, #580]	; (8007514 <HAL_MDMA_IRQHandler+0x254>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a91      	ldr	r2, [pc, #580]	; (8007518 <HAL_MDMA_IRQHandler+0x258>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a9b      	lsrs	r3, r3, #10
 80072d8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	4b8e      	ldr	r3, [pc, #568]	; (800751c <HAL_MDMA_IRQHandler+0x25c>)
 80072e2:	4413      	add	r3, r2
 80072e4:	099b      	lsrs	r3, r3, #6
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2201      	movs	r2, #1
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80072f2:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 812d 	beq.w	800755c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d054      	beq.n	80073ba <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d04d      	beq.n	80073ba <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0202 	bic.w	r2, r2, #2
 800732c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d106      	bne.n	800734e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	669a      	str	r2, [r3, #104]	; 0x68
 800734c:	e005      	b.n	800735a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007368:	f043 0204 	orr.w	r2, r3, #4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800737e:	f043 0208 	orr.w	r2, r3, #8
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007394:	f043 0210 	orr.w	r2, r3, #16
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2201      	movs	r2, #1
 80073b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d012      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2210      	movs	r2, #16
 80073dc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0308 	and.w	r3, r3, #8
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2208      	movs	r2, #8
 8007410:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d012      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00b      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2204      	movs	r2, #4
 8007444:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d039      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d032      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68da      	ldr	r2, [r3, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8007480:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b04      	cmp	r3, #4
 800748c:	d110      	bne.n	80074b0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d05c      	beq.n	8007560 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
        }
        return;
 80074ae:	e057      	b.n	8007560 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2202      	movs	r2, #2
 80074b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d003      	beq.n	80074d8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d040      	beq.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2204      	movs	r2, #4
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	429a      	cmp	r2, r3
 8007502:	d30d      	bcc.n	8007520 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f2      	bne.n	80074f8 <HAL_MDMA_IRQHandler+0x238>
 8007512:	e006      	b.n	8007522 <HAL_MDMA_IRQHandler+0x262>
 8007514:	24000000 	.word	0x24000000
 8007518:	1b4e81b5 	.word	0x1b4e81b5
 800751c:	adffffc0 	.word	0xadffffc0
        break;
 8007520:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d004      	beq.n	8007542 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2203      	movs	r2, #3
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007540:	e003      	b.n	800754a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
 800755a:	e002      	b.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8007560:	bf00      	nop
    }
  }
}
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68d9      	ldr	r1, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800758e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800759a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80075a6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ac:	3b01      	subs	r3, #1
 80075ae:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80075b0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80075bc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80075be:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c8:	d107      	bne.n	80075da <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80075d8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2200      	movs	r2, #0
 80075e0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	da11      	bge.n	800760e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80075f8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fe:	425b      	negs	r3, r3
 8007600:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	b292      	uxth	r2, r2
 800760a:	621a      	str	r2, [r3, #32]
 800760c:	e006      	b.n	800761c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	b292      	uxth	r2, r2
 800761a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	da15      	bge.n	8007650 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007632:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	425b      	negs	r3, r3
 800763a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a19      	ldr	r1, [r3, #32]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	041a      	lsls	r2, r3, #16
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	621a      	str	r2, [r3, #32]
 800764e:	e009      	b.n	8007664 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6a19      	ldr	r1, [r3, #32]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	041a      	lsls	r2, r3, #16
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766c:	d006      	beq.n	800767c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	b2d2      	uxtb	r2, r2
 8007678:	629a      	str	r2, [r3, #40]	; 0x28
 800767a:	e003      	b.n	8007684 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2200      	movs	r2, #0
 800768a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80076a0:	4b19      	ldr	r3, [pc, #100]	; (8007708 <HAL_PWREx_ConfigSupply+0x70>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d00a      	beq.n	80076c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076ac:	4b16      	ldr	r3, [pc, #88]	; (8007708 <HAL_PWREx_ConfigSupply+0x70>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d001      	beq.n	80076be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e01f      	b.n	80076fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	e01d      	b.n	80076fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <HAL_PWREx_ConfigSupply+0x70>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f023 0207 	bic.w	r2, r3, #7
 80076ca:	490f      	ldr	r1, [pc, #60]	; (8007708 <HAL_PWREx_ConfigSupply+0x70>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80076d2:	f7fc f86f 	bl	80037b4 <HAL_GetTick>
 80076d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076d8:	e009      	b.n	80076ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076da:	f7fc f86b 	bl	80037b4 <HAL_GetTick>
 80076de:	4602      	mov	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076e8:	d901      	bls.n	80076ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e007      	b.n	80076fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076ee:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_PWREx_ConfigSupply+0x70>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fa:	d1ee      	bne.n	80076da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	58024800 	.word	0x58024800

0800770c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08c      	sub	sp, #48	; 0x30
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f000 bc48 	b.w	8007fb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8088 	beq.w	800783e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772e:	4b99      	ldr	r3, [pc, #612]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007736:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007738:	4b96      	ldr	r3, [pc, #600]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	2b10      	cmp	r3, #16
 8007742:	d007      	beq.n	8007754 <HAL_RCC_OscConfig+0x48>
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	2b18      	cmp	r3, #24
 8007748:	d111      	bne.n	800776e <HAL_RCC_OscConfig+0x62>
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d10c      	bne.n	800776e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007754:	4b8f      	ldr	r3, [pc, #572]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d06d      	beq.n	800783c <HAL_RCC_OscConfig+0x130>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d169      	bne.n	800783c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f000 bc21 	b.w	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007776:	d106      	bne.n	8007786 <HAL_RCC_OscConfig+0x7a>
 8007778:	4b86      	ldr	r3, [pc, #536]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a85      	ldr	r2, [pc, #532]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800777e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	e02e      	b.n	80077e4 <HAL_RCC_OscConfig+0xd8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10c      	bne.n	80077a8 <HAL_RCC_OscConfig+0x9c>
 800778e:	4b81      	ldr	r3, [pc, #516]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a80      	ldr	r2, [pc, #512]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	4b7e      	ldr	r3, [pc, #504]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a7d      	ldr	r2, [pc, #500]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	e01d      	b.n	80077e4 <HAL_RCC_OscConfig+0xd8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077b0:	d10c      	bne.n	80077cc <HAL_RCC_OscConfig+0xc0>
 80077b2:	4b78      	ldr	r3, [pc, #480]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a77      	ldr	r2, [pc, #476]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	4b75      	ldr	r3, [pc, #468]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a74      	ldr	r2, [pc, #464]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e00b      	b.n	80077e4 <HAL_RCC_OscConfig+0xd8>
 80077cc:	4b71      	ldr	r3, [pc, #452]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a70      	ldr	r2, [pc, #448]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	4b6e      	ldr	r3, [pc, #440]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a6d      	ldr	r2, [pc, #436]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80077de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d013      	beq.n	8007814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fb ffe2 	bl	80037b4 <HAL_GetTick>
 80077f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077f4:	f7fb ffde 	bl	80037b4 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b64      	cmp	r3, #100	; 0x64
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e3d4      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007806:	4b63      	ldr	r3, [pc, #396]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f0      	beq.n	80077f4 <HAL_RCC_OscConfig+0xe8>
 8007812:	e014      	b.n	800783e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fb ffce 	bl	80037b4 <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800781c:	f7fb ffca 	bl	80037b4 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b64      	cmp	r3, #100	; 0x64
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e3c0      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800782e:	4b59      	ldr	r3, [pc, #356]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x110>
 800783a:	e000      	b.n	800783e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800783c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80ca 	beq.w	80079e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800784c:	4b51      	ldr	r3, [pc, #324]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007856:	4b4f      	ldr	r3, [pc, #316]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <HAL_RCC_OscConfig+0x166>
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2b18      	cmp	r3, #24
 8007866:	d156      	bne.n	8007916 <HAL_RCC_OscConfig+0x20a>
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d151      	bne.n	8007916 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007872:	4b48      	ldr	r3, [pc, #288]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0304 	and.w	r3, r3, #4
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_RCC_OscConfig+0x17e>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e392      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800788a:	4b42      	ldr	r3, [pc, #264]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f023 0219 	bic.w	r2, r3, #25
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	493f      	ldr	r1, [pc, #252]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007898:	4313      	orrs	r3, r2
 800789a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789c:	f7fb ff8a 	bl	80037b4 <HAL_GetTick>
 80078a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078a2:	e008      	b.n	80078b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a4:	f7fb ff86 	bl	80037b4 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e37c      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078b6:	4b37      	ldr	r3, [pc, #220]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c2:	f7fb ffa7 	bl	8003814 <HAL_GetREVID>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d817      	bhi.n	8007900 <HAL_RCC_OscConfig+0x1f4>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d108      	bne.n	80078ea <HAL_RCC_OscConfig+0x1de>
 80078d8:	4b2e      	ldr	r3, [pc, #184]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078e0:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80078e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078e8:	e07a      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ea:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	031b      	lsls	r3, r3, #12
 80078f8:	4926      	ldr	r1, [pc, #152]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078fe:	e06f      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007900:	4b24      	ldr	r3, [pc, #144]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	061b      	lsls	r3, r3, #24
 800790e:	4921      	ldr	r1, [pc, #132]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007910:	4313      	orrs	r3, r2
 8007912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007914:	e064      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d047      	beq.n	80079ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 0219 	bic.w	r2, r3, #25
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	491a      	ldr	r1, [pc, #104]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800792c:	4313      	orrs	r3, r2
 800792e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007930:	f7fb ff40 	bl	80037b4 <HAL_GetTick>
 8007934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007938:	f7fb ff3c 	bl	80037b4 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e332      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800794a:	4b12      	ldr	r3, [pc, #72]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0304 	and.w	r3, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007956:	f7fb ff5d 	bl	8003814 <HAL_GetREVID>
 800795a:	4603      	mov	r3, r0
 800795c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007960:	4293      	cmp	r3, r2
 8007962:	d819      	bhi.n	8007998 <HAL_RCC_OscConfig+0x28c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d108      	bne.n	800797e <HAL_RCC_OscConfig+0x272>
 800796c:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007974:	4a07      	ldr	r2, [pc, #28]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800797a:	6053      	str	r3, [r2, #4]
 800797c:	e030      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	031b      	lsls	r3, r3, #12
 800798c:	4901      	ldr	r1, [pc, #4]	; (8007994 <HAL_RCC_OscConfig+0x288>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
 8007992:	e025      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
 8007994:	58024400 	.word	0x58024400
 8007998:	4b9a      	ldr	r3, [pc, #616]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	061b      	lsls	r3, r3, #24
 80079a6:	4997      	ldr	r1, [pc, #604]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	604b      	str	r3, [r1, #4]
 80079ac:	e018      	b.n	80079e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ae:	4b95      	ldr	r3, [pc, #596]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a94      	ldr	r2, [pc, #592]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ba:	f7fb fefb 	bl	80037b4 <HAL_GetTick>
 80079be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079c0:	e008      	b.n	80079d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079c2:	f7fb fef7 	bl	80037b4 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d901      	bls.n	80079d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e2ed      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079d4:	4b8b      	ldr	r3, [pc, #556]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1f0      	bne.n	80079c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 80a9 	beq.w	8007b40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079ee:	4b85      	ldr	r3, [pc, #532]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079f8:	4b82      	ldr	r3, [pc, #520]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d007      	beq.n	8007a14 <HAL_RCC_OscConfig+0x308>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b18      	cmp	r3, #24
 8007a08:	d13a      	bne.n	8007a80 <HAL_RCC_OscConfig+0x374>
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f003 0303 	and.w	r3, r3, #3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d135      	bne.n	8007a80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a14:	4b7b      	ldr	r3, [pc, #492]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <HAL_RCC_OscConfig+0x320>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	2b80      	cmp	r3, #128	; 0x80
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e2c1      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a2c:	f7fb fef2 	bl	8003814 <HAL_GetREVID>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d817      	bhi.n	8007a6a <HAL_RCC_OscConfig+0x35e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d108      	bne.n	8007a54 <HAL_RCC_OscConfig+0x348>
 8007a42:	4b70      	ldr	r3, [pc, #448]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a4a:	4a6e      	ldr	r2, [pc, #440]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a52:	e075      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a54:	4b6b      	ldr	r3, [pc, #428]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	069b      	lsls	r3, r3, #26
 8007a62:	4968      	ldr	r1, [pc, #416]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a68:	e06a      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a6a:	4b66      	ldr	r3, [pc, #408]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	4962      	ldr	r1, [pc, #392]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a7e:	e05f      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d042      	beq.n	8007b0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a88:	4b5e      	ldr	r3, [pc, #376]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a5d      	ldr	r2, [pc, #372]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fb fe8e 	bl	80037b4 <HAL_GetTick>
 8007a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a9c:	f7fb fe8a 	bl	80037b4 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e280      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aae:	4b55      	ldr	r3, [pc, #340]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aba:	f7fb feab 	bl	8003814 <HAL_GetREVID>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d817      	bhi.n	8007af8 <HAL_RCC_OscConfig+0x3ec>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d108      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x3d6>
 8007ad0:	4b4c      	ldr	r3, [pc, #304]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ad8:	4a4a      	ldr	r2, [pc, #296]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ade:	6053      	str	r3, [r2, #4]
 8007ae0:	e02e      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
 8007ae2:	4b48      	ldr	r3, [pc, #288]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	069b      	lsls	r3, r3, #26
 8007af0:	4944      	ldr	r1, [pc, #272]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	604b      	str	r3, [r1, #4]
 8007af6:	e023      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	061b      	lsls	r3, r3, #24
 8007b06:	493f      	ldr	r1, [pc, #252]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60cb      	str	r3, [r1, #12]
 8007b0c:	e018      	b.n	8007b40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b0e:	4b3d      	ldr	r3, [pc, #244]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3c      	ldr	r2, [pc, #240]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1a:	f7fb fe4b 	bl	80037b4 <HAL_GetTick>
 8007b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b22:	f7fb fe47 	bl	80037b4 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e23d      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b34:	4b33      	ldr	r3, [pc, #204]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1f0      	bne.n	8007b22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d036      	beq.n	8007bba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d019      	beq.n	8007b88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b54:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b58:	4a2a      	ldr	r2, [pc, #168]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b5a:	f043 0301 	orr.w	r3, r3, #1
 8007b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b60:	f7fb fe28 	bl	80037b4 <HAL_GetTick>
 8007b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b68:	f7fb fe24 	bl	80037b4 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e21a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b7a:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f0      	beq.n	8007b68 <HAL_RCC_OscConfig+0x45c>
 8007b86:	e018      	b.n	8007bba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b88:	4b1e      	ldr	r3, [pc, #120]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b94:	f7fb fe0e 	bl	80037b4 <HAL_GetTick>
 8007b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b9c:	f7fb fe0a 	bl	80037b4 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e200      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bae:	4b15      	ldr	r3, [pc, #84]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f0      	bne.n	8007b9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d039      	beq.n	8007c3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d01c      	beq.n	8007c08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bce:	4b0d      	ldr	r3, [pc, #52]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bda:	f7fb fdeb 	bl	80037b4 <HAL_GetTick>
 8007bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be2:	f7fb fde7 	bl	80037b4 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e1dd      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <HAL_RCC_OscConfig+0x4d6>
 8007c00:	e01b      	b.n	8007c3a <HAL_RCC_OscConfig+0x52e>
 8007c02:	bf00      	nop
 8007c04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c08:	4b9b      	ldr	r3, [pc, #620]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a9a      	ldr	r2, [pc, #616]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c14:	f7fb fdce 	bl	80037b4 <HAL_GetTick>
 8007c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c1c:	f7fb fdca 	bl	80037b4 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1c0      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c2e:	4b92      	ldr	r3, [pc, #584]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f0      	bne.n	8007c1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8081 	beq.w	8007d4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c48:	4b8c      	ldr	r3, [pc, #560]	; (8007e7c <HAL_RCC_OscConfig+0x770>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a8b      	ldr	r2, [pc, #556]	; (8007e7c <HAL_RCC_OscConfig+0x770>)
 8007c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c54:	f7fb fdae 	bl	80037b4 <HAL_GetTick>
 8007c58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fb fdaa 	bl	80037b4 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b64      	cmp	r3, #100	; 0x64
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e1a0      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c6e:	4b83      	ldr	r3, [pc, #524]	; (8007e7c <HAL_RCC_OscConfig+0x770>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d106      	bne.n	8007c90 <HAL_RCC_OscConfig+0x584>
 8007c82:	4b7d      	ldr	r3, [pc, #500]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c86:	4a7c      	ldr	r2, [pc, #496]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c8e:	e02d      	b.n	8007cec <HAL_RCC_OscConfig+0x5e0>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10c      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x5a6>
 8007c98:	4b77      	ldr	r3, [pc, #476]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9c:	4a76      	ldr	r2, [pc, #472]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca4:	4b74      	ldr	r3, [pc, #464]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca8:	4a73      	ldr	r2, [pc, #460]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	f023 0304 	bic.w	r3, r3, #4
 8007cae:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb0:	e01c      	b.n	8007cec <HAL_RCC_OscConfig+0x5e0>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b05      	cmp	r3, #5
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x5c8>
 8007cba:	4b6f      	ldr	r3, [pc, #444]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	4a6e      	ldr	r2, [pc, #440]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007cc0:	f043 0304 	orr.w	r3, r3, #4
 8007cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc6:	4b6c      	ldr	r3, [pc, #432]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	4a6b      	ldr	r2, [pc, #428]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd2:	e00b      	b.n	8007cec <HAL_RCC_OscConfig+0x5e0>
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	4a67      	ldr	r2, [pc, #412]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce0:	4b65      	ldr	r3, [pc, #404]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce4:	4a64      	ldr	r2, [pc, #400]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007ce6:	f023 0304 	bic.w	r3, r3, #4
 8007cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d015      	beq.n	8007d20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf4:	f7fb fd5e 	bl	80037b4 <HAL_GetTick>
 8007cf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cfc:	f7fb fd5a 	bl	80037b4 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e14e      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d12:	4b59      	ldr	r3, [pc, #356]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ee      	beq.n	8007cfc <HAL_RCC_OscConfig+0x5f0>
 8007d1e:	e014      	b.n	8007d4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d20:	f7fb fd48 	bl	80037b4 <HAL_GetTick>
 8007d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d26:	e00a      	b.n	8007d3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d28:	f7fb fd44 	bl	80037b4 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e138      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d3e:	4b4e      	ldr	r3, [pc, #312]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1ee      	bne.n	8007d28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 812d 	beq.w	8007fae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d54:	4b48      	ldr	r3, [pc, #288]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d5c:	2b18      	cmp	r3, #24
 8007d5e:	f000 80bd 	beq.w	8007edc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	f040 809e 	bne.w	8007ea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d6c:	4b42      	ldr	r3, [pc, #264]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a41      	ldr	r2, [pc, #260]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fb fd1c 	bl	80037b4 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d80:	f7fb fd18 	bl	80037b4 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e10e      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d92:	4b39      	ldr	r3, [pc, #228]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d9e:	4b36      	ldr	r3, [pc, #216]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007da2:	4b37      	ldr	r3, [pc, #220]	; (8007e80 <HAL_RCC_OscConfig+0x774>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dae:	0112      	lsls	r2, r2, #4
 8007db0:	430a      	orrs	r2, r1
 8007db2:	4931      	ldr	r1, [pc, #196]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	628b      	str	r3, [r1, #40]	; 0x28
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	025b      	lsls	r3, r3, #9
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	3b01      	subs	r3, #1
 8007de2:	061b      	lsls	r3, r3, #24
 8007de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007de8:	4923      	ldr	r1, [pc, #140]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007dee:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df2:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007dfa:	4b1f      	ldr	r3, [pc, #124]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <HAL_RCC_OscConfig+0x778>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e06:	00d2      	lsls	r2, r2, #3
 8007e08:	491b      	ldr	r1, [pc, #108]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e0e:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f023 020c 	bic.w	r2, r3, #12
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	4917      	ldr	r1, [pc, #92]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e20:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f023 0202 	bic.w	r2, r3, #2
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2c:	4912      	ldr	r1, [pc, #72]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e32:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	4a10      	ldr	r2, [pc, #64]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	4a0d      	ldr	r2, [pc, #52]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4e:	4a0a      	ldr	r2, [pc, #40]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a07      	ldr	r2, [pc, #28]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a04      	ldr	r2, [pc, #16]	; (8007e78 <HAL_RCC_OscConfig+0x76c>)
 8007e68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6e:	f7fb fca1 	bl	80037b4 <HAL_GetTick>
 8007e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e74:	e011      	b.n	8007e9a <HAL_RCC_OscConfig+0x78e>
 8007e76:	bf00      	nop
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	58024800 	.word	0x58024800
 8007e80:	fffffc0c 	.word	0xfffffc0c
 8007e84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e88:	f7fb fc94 	bl	80037b4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e08a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e9a:	4b47      	ldr	r3, [pc, #284]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0x77c>
 8007ea6:	e082      	b.n	8007fae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea8:	4b43      	ldr	r3, [pc, #268]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a42      	ldr	r2, [pc, #264]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fb fc7e 	bl	80037b4 <HAL_GetTick>
 8007eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ebc:	f7fb fc7a 	bl	80037b4 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e070      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ece:	4b3a      	ldr	r3, [pc, #232]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0x7b0>
 8007eda:	e068      	b.n	8007fae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007edc:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ee2:	4b35      	ldr	r3, [pc, #212]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d031      	beq.n	8007f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f003 0203 	and.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d12a      	bne.n	8007f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	091b      	lsrs	r3, r3, #4
 8007f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d122      	bne.n	8007f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d11a      	bne.n	8007f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	0a5b      	lsrs	r3, r3, #9
 8007f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d111      	bne.n	8007f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d108      	bne.n	8007f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	0e1b      	lsrs	r3, r3, #24
 8007f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e02b      	b.n	8007fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f5c:	08db      	lsrs	r3, r3, #3
 8007f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d01f      	beq.n	8007fae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007f74:	f023 0301 	bic.w	r3, r3, #1
 8007f78:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f7a:	f7fb fc1b 	bl	80037b4 <HAL_GetTick>
 8007f7e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f80:	bf00      	nop
 8007f82:	f7fb fc17 	bl	80037b4 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d0f9      	beq.n	8007f82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <HAL_RCC_OscConfig+0x8b0>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f9a:	00d2      	lsls	r2, r2, #3
 8007f9c:	4906      	ldr	r1, [pc, #24]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007fa2:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <HAL_RCC_OscConfig+0x8ac>)
 8007fa8:	f043 0301 	orr.w	r3, r3, #1
 8007fac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3730      	adds	r7, #48	; 0x30
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	ffff0007 	.word	0xffff0007

08007fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e19c      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd4:	4b8a      	ldr	r3, [pc, #552]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d910      	bls.n	8008004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe2:	4b87      	ldr	r3, [pc, #540]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f023 020f 	bic.w	r2, r3, #15
 8007fea:	4985      	ldr	r1, [pc, #532]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff2:	4b83      	ldr	r3, [pc, #524]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e184      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d010      	beq.n	8008032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	4b7b      	ldr	r3, [pc, #492]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800801c:	429a      	cmp	r2, r3
 800801e:	d908      	bls.n	8008032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008020:	4b78      	ldr	r3, [pc, #480]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	4975      	ldr	r1, [pc, #468]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800802e:	4313      	orrs	r3, r2
 8008030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d010      	beq.n	8008060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695a      	ldr	r2, [r3, #20]
 8008042:	4b70      	ldr	r3, [pc, #448]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800804a:	429a      	cmp	r2, r3
 800804c:	d908      	bls.n	8008060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800804e:	4b6d      	ldr	r3, [pc, #436]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	496a      	ldr	r1, [pc, #424]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800805c:	4313      	orrs	r3, r2
 800805e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	2b00      	cmp	r3, #0
 800806a:	d010      	beq.n	800808e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699a      	ldr	r2, [r3, #24]
 8008070:	4b64      	ldr	r3, [pc, #400]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008078:	429a      	cmp	r2, r3
 800807a:	d908      	bls.n	800808e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800807c:	4b61      	ldr	r3, [pc, #388]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	495e      	ldr	r1, [pc, #376]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800808a:	4313      	orrs	r3, r2
 800808c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0320 	and.w	r3, r3, #32
 8008096:	2b00      	cmp	r3, #0
 8008098:	d010      	beq.n	80080bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	69da      	ldr	r2, [r3, #28]
 800809e:	4b59      	ldr	r3, [pc, #356]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d908      	bls.n	80080bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080aa:	4b56      	ldr	r3, [pc, #344]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	4953      	ldr	r1, [pc, #332]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0302 	and.w	r3, r3, #2
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d010      	beq.n	80080ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	4b4d      	ldr	r3, [pc, #308]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d908      	bls.n	80080ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d8:	4b4a      	ldr	r3, [pc, #296]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	f023 020f 	bic.w	r2, r3, #15
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	4947      	ldr	r1, [pc, #284]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d055      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080f6:	4b43      	ldr	r3, [pc, #268]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4940      	ldr	r1, [pc, #256]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008104:	4313      	orrs	r3, r2
 8008106:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d107      	bne.n	8008120 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008110:	4b3c      	ldr	r3, [pc, #240]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d121      	bne.n	8008160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0f6      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d107      	bne.n	8008138 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008128:	4b36      	ldr	r3, [pc, #216]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d115      	bne.n	8008160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e0ea      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d107      	bne.n	8008150 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008140:	4b30      	ldr	r3, [pc, #192]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0de      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008150:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e0d6      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f023 0207 	bic.w	r2, r3, #7
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	4925      	ldr	r1, [pc, #148]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 800816e:	4313      	orrs	r3, r2
 8008170:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008172:	f7fb fb1f 	bl	80037b4 <HAL_GetTick>
 8008176:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008178:	e00a      	b.n	8008190 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800817a:	f7fb fb1b 	bl	80037b4 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	f241 3288 	movw	r2, #5000	; 0x1388
 8008188:	4293      	cmp	r3, r2
 800818a:	d901      	bls.n	8008190 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e0be      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008190:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	429a      	cmp	r2, r3
 80081a0:	d1eb      	bne.n	800817a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	4b14      	ldr	r3, [pc, #80]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f003 030f 	and.w	r3, r3, #15
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d208      	bcs.n	80081d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081be:	4b11      	ldr	r3, [pc, #68]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	f023 020f 	bic.w	r2, r3, #15
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	490e      	ldr	r1, [pc, #56]	; (8008204 <HAL_RCC_ClockConfig+0x244>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081d0:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d214      	bcs.n	8008208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081de:	4b08      	ldr	r3, [pc, #32]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f023 020f 	bic.w	r2, r3, #15
 80081e6:	4906      	ldr	r1, [pc, #24]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <HAL_RCC_ClockConfig+0x240>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e086      	b.n	800830e <HAL_RCC_ClockConfig+0x34e>
 8008200:	52002000 	.word	0x52002000
 8008204:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	4b3f      	ldr	r3, [pc, #252]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008220:	429a      	cmp	r2, r3
 8008222:	d208      	bcs.n	8008236 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008224:	4b3c      	ldr	r3, [pc, #240]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	4939      	ldr	r1, [pc, #228]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008232:	4313      	orrs	r3, r2
 8008234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0308 	and.w	r3, r3, #8
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	4b34      	ldr	r3, [pc, #208]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800824e:	429a      	cmp	r2, r3
 8008250:	d208      	bcs.n	8008264 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008252:	4b31      	ldr	r3, [pc, #196]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008254:	69db      	ldr	r3, [r3, #28]
 8008256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	492e      	ldr	r1, [pc, #184]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008260:	4313      	orrs	r3, r2
 8008262:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d010      	beq.n	8008292 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699a      	ldr	r2, [r3, #24]
 8008274:	4b28      	ldr	r3, [pc, #160]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800827c:	429a      	cmp	r2, r3
 800827e:	d208      	bcs.n	8008292 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008280:	4b25      	ldr	r3, [pc, #148]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 8008282:	69db      	ldr	r3, [r3, #28]
 8008284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	4922      	ldr	r1, [pc, #136]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 800828e:	4313      	orrs	r3, r2
 8008290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d010      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69da      	ldr	r2, [r3, #28]
 80082a2:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d208      	bcs.n	80082c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082ae:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	4917      	ldr	r1, [pc, #92]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082c0:	f000 f834 	bl	800832c <HAL_RCC_GetSysClockFreq>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	4912      	ldr	r1, [pc, #72]	; (800831c <HAL_RCC_ClockConfig+0x35c>)
 80082d2:	5ccb      	ldrb	r3, [r1, r3]
 80082d4:	f003 031f 	and.w	r3, r3, #31
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
 80082dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <HAL_RCC_ClockConfig+0x358>)
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	4a0d      	ldr	r2, [pc, #52]	; (800831c <HAL_RCC_ClockConfig+0x35c>)
 80082e8:	5cd3      	ldrb	r3, [r2, r3]
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	fa22 f303 	lsr.w	r3, r2, r3
 80082f4:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <HAL_RCC_ClockConfig+0x360>)
 80082f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082f8:	4a0a      	ldr	r2, [pc, #40]	; (8008324 <HAL_RCC_ClockConfig+0x364>)
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082fe:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <HAL_RCC_ClockConfig+0x368>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f7fb fa0c 	bl	8003720 <HAL_InitTick>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	58024400 	.word	0x58024400
 800831c:	0800e184 	.word	0x0800e184
 8008320:	24000004 	.word	0x24000004
 8008324:	24000000 	.word	0x24000000
 8008328:	24000040 	.word	0x24000040

0800832c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800832c:	b480      	push	{r7}
 800832e:	b089      	sub	sp, #36	; 0x24
 8008330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008332:	4bb3      	ldr	r3, [pc, #716]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800833a:	2b18      	cmp	r3, #24
 800833c:	f200 8155 	bhi.w	80085ea <HAL_RCC_GetSysClockFreq+0x2be>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080085eb 	.word	0x080085eb
 8008350:	080085eb 	.word	0x080085eb
 8008354:	080085eb 	.word	0x080085eb
 8008358:	080085eb 	.word	0x080085eb
 800835c:	080085eb 	.word	0x080085eb
 8008360:	080085eb 	.word	0x080085eb
 8008364:	080085eb 	.word	0x080085eb
 8008368:	080083d3 	.word	0x080083d3
 800836c:	080085eb 	.word	0x080085eb
 8008370:	080085eb 	.word	0x080085eb
 8008374:	080085eb 	.word	0x080085eb
 8008378:	080085eb 	.word	0x080085eb
 800837c:	080085eb 	.word	0x080085eb
 8008380:	080085eb 	.word	0x080085eb
 8008384:	080085eb 	.word	0x080085eb
 8008388:	080083d9 	.word	0x080083d9
 800838c:	080085eb 	.word	0x080085eb
 8008390:	080085eb 	.word	0x080085eb
 8008394:	080085eb 	.word	0x080085eb
 8008398:	080085eb 	.word	0x080085eb
 800839c:	080085eb 	.word	0x080085eb
 80083a0:	080085eb 	.word	0x080085eb
 80083a4:	080085eb 	.word	0x080085eb
 80083a8:	080083df 	.word	0x080083df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ac:	4b94      	ldr	r3, [pc, #592]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083b8:	4b91      	ldr	r3, [pc, #580]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	4a90      	ldr	r2, [pc, #576]	; (8008604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80083ca:	e111      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083cc:	4b8d      	ldr	r3, [pc, #564]	; (8008604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083ce:	61bb      	str	r3, [r7, #24]
      break;
 80083d0:	e10e      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083d2:	4b8d      	ldr	r3, [pc, #564]	; (8008608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083d4:	61bb      	str	r3, [r7, #24]
      break;
 80083d6:	e10b      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083d8:	4b8c      	ldr	r3, [pc, #560]	; (800860c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083da:	61bb      	str	r3, [r7, #24]
      break;
 80083dc:	e108      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083de:	4b88      	ldr	r3, [pc, #544]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083e8:	4b85      	ldr	r3, [pc, #532]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	091b      	lsrs	r3, r3, #4
 80083ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083f4:	4b82      	ldr	r3, [pc, #520]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083fe:	4b80      	ldr	r3, [pc, #512]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	08db      	lsrs	r3, r3, #3
 8008404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 80e1 	beq.w	80085e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b02      	cmp	r3, #2
 8008426:	f000 8083 	beq.w	8008530 <HAL_RCC_GetSysClockFreq+0x204>
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b02      	cmp	r3, #2
 800842e:	f200 80a1 	bhi.w	8008574 <HAL_RCC_GetSysClockFreq+0x248>
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d003      	beq.n	8008440 <HAL_RCC_GetSysClockFreq+0x114>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d056      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800843e:	e099      	b.n	8008574 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008440:	4b6f      	ldr	r3, [pc, #444]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d02d      	beq.n	80084a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800844c:	4b6c      	ldr	r3, [pc, #432]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	08db      	lsrs	r3, r3, #3
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	4a6b      	ldr	r2, [pc, #428]	; (8008604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	ee07 3a90 	vmov	s15, r3
 8008464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008476:	4b62      	ldr	r3, [pc, #392]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	ed97 6a02 	vldr	s12, [r7, #8]
 800848a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80084a6:	e087      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b51      	ldr	r3, [pc, #324]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084ea:	e065      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fe:	4b40      	ldr	r3, [pc, #256]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800852e:	e043      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800861c <HAL_RCC_GetSysClockFreq+0x2f0>
 800853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008542:	4b2f      	ldr	r3, [pc, #188]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	ed97 6a02 	vldr	s12, [r7, #8]
 8008556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008572:	e021      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b1e      	ldr	r3, [pc, #120]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a02 	vldr	s12, [r7, #8]
 800859a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80085b8:	4b11      	ldr	r3, [pc, #68]	; (8008600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	0a5b      	lsrs	r3, r3, #9
 80085be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085c2:	3301      	adds	r3, #1
 80085c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085dc:	ee17 3a90 	vmov	r3, s15
 80085e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085e2:	e005      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61bb      	str	r3, [r7, #24]
      break;
 80085e8:	e002      	b.n	80085f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085ea:	4b07      	ldr	r3, [pc, #28]	; (8008608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085ec:	61bb      	str	r3, [r7, #24]
      break;
 80085ee:	bf00      	nop
  }

  return sysclockfreq;
 80085f0:	69bb      	ldr	r3, [r7, #24]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3724      	adds	r7, #36	; 0x24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	58024400 	.word	0x58024400
 8008604:	03d09000 	.word	0x03d09000
 8008608:	003d0900 	.word	0x003d0900
 800860c:	017d7840 	.word	0x017d7840
 8008610:	46000000 	.word	0x46000000
 8008614:	4c742400 	.word	0x4c742400
 8008618:	4a742400 	.word	0x4a742400
 800861c:	4bbebc20 	.word	0x4bbebc20

08008620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008626:	f7ff fe81 	bl	800832c <HAL_RCC_GetSysClockFreq>
 800862a:	4602      	mov	r2, r0
 800862c:	4b10      	ldr	r3, [pc, #64]	; (8008670 <HAL_RCC_GetHCLKFreq+0x50>)
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	f003 030f 	and.w	r3, r3, #15
 8008636:	490f      	ldr	r1, [pc, #60]	; (8008674 <HAL_RCC_GetHCLKFreq+0x54>)
 8008638:	5ccb      	ldrb	r3, [r1, r3]
 800863a:	f003 031f 	and.w	r3, r3, #31
 800863e:	fa22 f303 	lsr.w	r3, r2, r3
 8008642:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008644:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <HAL_RCC_GetHCLKFreq+0x50>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	4a09      	ldr	r2, [pc, #36]	; (8008674 <HAL_RCC_GetHCLKFreq+0x54>)
 800864e:	5cd3      	ldrb	r3, [r2, r3]
 8008650:	f003 031f 	and.w	r3, r3, #31
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	fa22 f303 	lsr.w	r3, r2, r3
 800865a:	4a07      	ldr	r2, [pc, #28]	; (8008678 <HAL_RCC_GetHCLKFreq+0x58>)
 800865c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800865e:	4a07      	ldr	r2, [pc, #28]	; (800867c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008664:	4b04      	ldr	r3, [pc, #16]	; (8008678 <HAL_RCC_GetHCLKFreq+0x58>)
 8008666:	681b      	ldr	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	58024400 	.word	0x58024400
 8008674:	0800e184 	.word	0x0800e184
 8008678:	24000004 	.word	0x24000004
 800867c:	24000000 	.word	0x24000000

08008680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008684:	f7ff ffcc 	bl	8008620 <HAL_RCC_GetHCLKFreq>
 8008688:	4602      	mov	r2, r0
 800868a:	4b06      	ldr	r3, [pc, #24]	; (80086a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	f003 0307 	and.w	r3, r3, #7
 8008694:	4904      	ldr	r1, [pc, #16]	; (80086a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008696:	5ccb      	ldrb	r3, [r1, r3]
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	58024400 	.word	0x58024400
 80086a8:	0800e184 	.word	0x0800e184

080086ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b0:	b0ca      	sub	sp, #296	; 0x128
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b8:	2300      	movs	r3, #0
 80086ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086be:	2300      	movs	r3, #0
 80086c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80086d0:	2500      	movs	r5, #0
 80086d2:	ea54 0305 	orrs.w	r3, r4, r5
 80086d6:	d049      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80086d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086e2:	d02f      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80086e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086e8:	d828      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ee:	d01a      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80086f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086f4:	d822      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80086fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fe:	d007      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008700:	e01c      	b.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008702:	4bb8      	ldr	r3, [pc, #736]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	4ab7      	ldr	r2, [pc, #732]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800870e:	e01a      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008714:	3308      	adds	r3, #8
 8008716:	2102      	movs	r1, #2
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f9d1 	bl	8009ac0 <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008724:	e00f      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872a:	3328      	adds	r3, #40	; 0x28
 800872c:	2102      	movs	r1, #2
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fa78 	bl	8009c24 <RCCEx_PLL3_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800873a:	e004      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008742:	e000      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800874e:	4ba5      	ldr	r3, [pc, #660]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008752:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800875a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875c:	4aa1      	ldr	r2, [pc, #644]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800875e:	430b      	orrs	r3, r1
 8008760:	6513      	str	r3, [r2, #80]	; 0x50
 8008762:	e003      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008778:	f04f 0900 	mov.w	r9, #0
 800877c:	ea58 0309 	orrs.w	r3, r8, r9
 8008780:	d047      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008788:	2b04      	cmp	r3, #4
 800878a:	d82a      	bhi.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087b7 	.word	0x080087b7
 800879c:	080087cd 	.word	0x080087cd
 80087a0:	080087eb 	.word	0x080087eb
 80087a4:	080087eb 	.word	0x080087eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a8:	4b8e      	ldr	r3, [pc, #568]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	4a8d      	ldr	r2, [pc, #564]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087b4:	e01a      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ba:	3308      	adds	r3, #8
 80087bc:	2100      	movs	r1, #0
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 f97e 	bl	8009ac0 <RCCEx_PLL2_Config>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ca:	e00f      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d0:	3328      	adds	r3, #40	; 0x28
 80087d2:	2100      	movs	r1, #0
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fa25 	bl	8009c24 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087e0:	e004      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087e8:	e000      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80087ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087f4:	4b7b      	ldr	r3, [pc, #492]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f8:	f023 0107 	bic.w	r1, r3, #7
 80087fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008802:	4a78      	ldr	r2, [pc, #480]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008804:	430b      	orrs	r3, r1
 8008806:	6513      	str	r3, [r2, #80]	; 0x50
 8008808:	e003      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800880e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800881e:	f04f 0b00 	mov.w	fp, #0
 8008822:	ea5a 030b 	orrs.w	r3, sl, fp
 8008826:	d04c      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008832:	d030      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008838:	d829      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800883a:	2bc0      	cmp	r3, #192	; 0xc0
 800883c:	d02d      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800883e:	2bc0      	cmp	r3, #192	; 0xc0
 8008840:	d825      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d018      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	d821      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d007      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008852:	e01c      	b.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008854:	4b63      	ldr	r3, [pc, #396]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	4a62      	ldr	r2, [pc, #392]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800885a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800885e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008860:	e01c      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008866:	3308      	adds	r3, #8
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f001 f928 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008876:	e011      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800887c:	3328      	adds	r3, #40	; 0x28
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f9cf 	bl	8009c24 <RCCEx_PLL3_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800888c:	e006      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008894:	e002      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800889a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088a4:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80088ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b2:	4a4c      	ldr	r2, [pc, #304]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088b4:	430b      	orrs	r3, r1
 80088b6:	6513      	str	r3, [r2, #80]	; 0x50
 80088b8:	e003      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80088ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80088d2:	2300      	movs	r3, #0
 80088d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80088d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80088dc:	460b      	mov	r3, r1
 80088de:	4313      	orrs	r3, r2
 80088e0:	d053      	beq.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ee:	d035      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80088f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088f4:	d82e      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80088f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088fa:	d031      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80088fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008900:	d828      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008906:	d01a      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890c:	d822      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008916:	d007      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008918:	e01c      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800891a:	4b32      	ldr	r3, [pc, #200]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	4a31      	ldr	r2, [pc, #196]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008926:	e01c      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892c:	3308      	adds	r3, #8
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f001 f8c5 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800893c:	e011      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800893e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008942:	3328      	adds	r3, #40	; 0x28
 8008944:	2100      	movs	r1, #0
 8008946:	4618      	mov	r0, r3
 8008948:	f001 f96c 	bl	8009c24 <RCCEx_PLL3_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008952:	e006      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800895a:	e002      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800895c:	bf00      	nop
 800895e:	e000      	b.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10b      	bne.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800897a:	4a1a      	ldr	r2, [pc, #104]	; (80089e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800897c:	430b      	orrs	r3, r1
 800897e:	6593      	str	r3, [r2, #88]	; 0x58
 8008980:	e003      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800898a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008992:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008996:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800899a:	2300      	movs	r3, #0
 800899c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80089a4:	460b      	mov	r3, r1
 80089a6:	4313      	orrs	r3, r2
 80089a8:	d056      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089b6:	d038      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80089b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089bc:	d831      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089c2:	d034      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80089c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80089c8:	d82b      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089ce:	d01d      	beq.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80089d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089d4:	d825      	bhi.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80089da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089de:	d00a      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80089e0:	e01f      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e8:	4ba2      	ldr	r3, [pc, #648]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4aa1      	ldr	r2, [pc, #644]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80089f4:	e01c      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	3308      	adds	r3, #8
 80089fc:	2100      	movs	r1, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f85e 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a0a:	e011      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a10:	3328      	adds	r3, #40	; 0x28
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f905 	bl	8009c24 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a20:	e006      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a28:	e002      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a2a:	bf00      	nop
 8008a2c:	e000      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10b      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a38:	4b8e      	ldr	r3, [pc, #568]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a48:	4a8a      	ldr	r2, [pc, #552]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a4e:	e003      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a68:	2300      	movs	r3, #0
 8008a6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008a72:	460b      	mov	r3, r1
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d03a      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	2b30      	cmp	r3, #48	; 0x30
 8008a80:	d01f      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008a82:	2b30      	cmp	r3, #48	; 0x30
 8008a84:	d819      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	d00c      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d815      	bhi.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d019      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008a92:	2b10      	cmp	r3, #16
 8008a94:	d111      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a96:	4b77      	ldr	r3, [pc, #476]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9a:	4a76      	ldr	r2, [pc, #472]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008aa2:	e011      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f001 f807 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ab8:	e006      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ac0:	e002      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ac2:	bf00      	nop
 8008ac4:	e000      	b.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ad0:	4b68      	ldr	r3, [pc, #416]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	4a65      	ldr	r2, [pc, #404]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ae4:	e003      	b.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008afa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008afe:	2300      	movs	r3, #0
 8008b00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	d051      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b18:	d035      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b1e:	d82e      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b24:	d031      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b2a:	d828      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b30:	d01a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b36:	d822      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d003      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b40:	d007      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008b42:	e01c      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b44:	4b4b      	ldr	r3, [pc, #300]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b50:	e01c      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b56:	3308      	adds	r3, #8
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 ffb0 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b66:	e011      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6c:	3328      	adds	r3, #40	; 0x28
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f857 	bl	8009c24 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b84:	e002      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10a      	bne.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b94:	4b37      	ldr	r3, [pc, #220]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba2:	4a34      	ldr	r2, [pc, #208]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ba4:	430b      	orrs	r3, r1
 8008ba6:	6513      	str	r3, [r2, #80]	; 0x50
 8008ba8:	e003      	b.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d056      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bdc:	d033      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008bde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008be2:	d82c      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008be8:	d02f      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bee:	d826      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bf4:	d02b      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008bf6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008bfa:	d820      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c00:	d012      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c06:	d81a      	bhi.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d022      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c10:	d115      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c16:	3308      	adds	r3, #8
 8008c18:	2101      	movs	r1, #1
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 ff50 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c26:	e015      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c2c:	3328      	adds	r3, #40	; 0x28
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fff7 	bl	8009c24 <RCCEx_PLL3_Config>
 8008c36:	4603      	mov	r3, r0
 8008c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c3c:	e00a      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c44:	e006      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c46:	bf00      	nop
 8008c48:	e004      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4a:	bf00      	nop
 8008c4c:	e002      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c4e:	bf00      	nop
 8008c50:	e000      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c5c:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c60:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c6a:	4a02      	ldr	r2, [pc, #8]	; (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	6513      	str	r3, [r2, #80]	; 0x50
 8008c70:	e006      	b.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008c8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d055      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cac:	d033      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cb2:	d82c      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb8:	d02f      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cbe:	d826      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cc4:	d02b      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008cc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008cca:	d820      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd0:	d012      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cd6:	d81a      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d022      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ce0:	d115      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce6:	3308      	adds	r3, #8
 8008ce8:	2101      	movs	r1, #1
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fee8 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008cf6:	e015      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfc:	3328      	adds	r3, #40	; 0x28
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 ff8f 	bl	8009c24 <RCCEx_PLL3_Config>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d0c:	e00a      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d14:	e006      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d16:	bf00      	nop
 8008d18:	e004      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1a:	bf00      	nop
 8008d1c:	e002      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d1e:	bf00      	nop
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d10b      	bne.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d2c:	4ba3      	ldr	r3, [pc, #652]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d3c:	4a9f      	ldr	r2, [pc, #636]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	6593      	str	r3, [r2, #88]	; 0x58
 8008d42:	e003      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008d58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d037      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d76:	d00e      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d7c:	d816      	bhi.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d018      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d86:	d111      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d88:	4b8c      	ldr	r3, [pc, #560]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	4a8b      	ldr	r2, [pc, #556]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008d94:	e00f      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f000 fe8e 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008daa:	e004      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008db2:	e000      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dbe:	4b7f      	ldr	r3, [pc, #508]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dc2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	4a7b      	ldr	r2, [pc, #492]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6513      	str	r3, [r2, #80]	; 0x50
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008de8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008df2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d039      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d81c      	bhi.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e49 	.word	0x08008e49
 8008e10:	08008e1d 	.word	0x08008e1d
 8008e14:	08008e2b 	.word	0x08008e2b
 8008e18:	08008e49 	.word	0x08008e49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1c:	4b67      	ldr	r3, [pc, #412]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	4a66      	ldr	r2, [pc, #408]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e28:	e00f      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2e:	3308      	adds	r3, #8
 8008e30:	2102      	movs	r1, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fe44 	bl	8009ac0 <RCCEx_PLL2_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e3e:	e004      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e46:	e000      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10a      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e52:	4b5a      	ldr	r3, [pc, #360]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e56:	f023 0103 	bic.w	r1, r3, #3
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e60:	4a56      	ldr	r2, [pc, #344]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e62:	430b      	orrs	r3, r1
 8008e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e66:	e003      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e80:	2300      	movs	r3, #0
 8008e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f000 809f 	beq.w	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e92:	4b4b      	ldr	r3, [pc, #300]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a4a      	ldr	r2, [pc, #296]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e9e:	f7fa fc89 	bl	80037b4 <HAL_GetTick>
 8008ea2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ea6:	e00b      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ea8:	f7fa fc84 	bl	80037b4 <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b64      	cmp	r3, #100	; 0x64
 8008eb6:	d903      	bls.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ebe:	e005      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	; (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0ed      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d179      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008ed4:	4b39      	ldr	r3, [pc, #228]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008edc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ee0:	4053      	eors	r3, r2
 8008ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d015      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008eea:	4b34      	ldr	r3, [pc, #208]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ef6:	4b31      	ldr	r3, [pc, #196]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	4a30      	ldr	r2, [pc, #192]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f02:	4b2e      	ldr	r3, [pc, #184]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a2d      	ldr	r2, [pc, #180]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f0e:	4a2b      	ldr	r2, [pc, #172]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f22:	d118      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f24:	f7fa fc46 	bl	80037b4 <HAL_GetTick>
 8008f28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2c:	e00d      	b.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f2e:	f7fa fc41 	bl	80037b4 <HAL_GetTick>
 8008f32:	4602      	mov	r2, r0
 8008f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008f38:	1ad2      	subs	r2, r2, r3
 8008f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d903      	bls.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008f48:	e005      	b.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	f003 0302 	and.w	r3, r3, #2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0eb      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d129      	bne.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f6e:	d10e      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f80:	091a      	lsrs	r2, r3, #4
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	4a0d      	ldr	r2, [pc, #52]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6113      	str	r3, [r2, #16]
 8008f8c:	e005      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f98:	6113      	str	r3, [r2, #16]
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008faa:	4a04      	ldr	r2, [pc, #16]	; (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fac:	430b      	orrs	r3, r1
 8008fae:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb0:	e00e      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008fba:	e009      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	58024800 	.word	0x58024800
 8008fc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f002 0301 	and.w	r3, r2, #1
 8008fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fe6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f000 8089 	beq.w	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff8:	2b28      	cmp	r3, #40	; 0x28
 8008ffa:	d86b      	bhi.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	080090dd 	.word	0x080090dd
 8009008:	080090d5 	.word	0x080090d5
 800900c:	080090d5 	.word	0x080090d5
 8009010:	080090d5 	.word	0x080090d5
 8009014:	080090d5 	.word	0x080090d5
 8009018:	080090d5 	.word	0x080090d5
 800901c:	080090d5 	.word	0x080090d5
 8009020:	080090d5 	.word	0x080090d5
 8009024:	080090a9 	.word	0x080090a9
 8009028:	080090d5 	.word	0x080090d5
 800902c:	080090d5 	.word	0x080090d5
 8009030:	080090d5 	.word	0x080090d5
 8009034:	080090d5 	.word	0x080090d5
 8009038:	080090d5 	.word	0x080090d5
 800903c:	080090d5 	.word	0x080090d5
 8009040:	080090d5 	.word	0x080090d5
 8009044:	080090bf 	.word	0x080090bf
 8009048:	080090d5 	.word	0x080090d5
 800904c:	080090d5 	.word	0x080090d5
 8009050:	080090d5 	.word	0x080090d5
 8009054:	080090d5 	.word	0x080090d5
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090d5 	.word	0x080090d5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090dd 	.word	0x080090dd
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090d5 	.word	0x080090d5
 8009078:	080090d5 	.word	0x080090d5
 800907c:	080090d5 	.word	0x080090d5
 8009080:	080090d5 	.word	0x080090d5
 8009084:	080090dd 	.word	0x080090dd
 8009088:	080090d5 	.word	0x080090d5
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090d5 	.word	0x080090d5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090d5 	.word	0x080090d5
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090dd 	.word	0x080090dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ac:	3308      	adds	r3, #8
 80090ae:	2101      	movs	r1, #1
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fd05 	bl	8009ac0 <RCCEx_PLL2_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090bc:	e00f      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c2:	3328      	adds	r3, #40	; 0x28
 80090c4:	2101      	movs	r1, #1
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 fdac 	bl	8009c24 <RCCEx_PLL3_Config>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090d2:	e004      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090da:	e000      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80090dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090e6:	4bbf      	ldr	r3, [pc, #764]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f4:	4abb      	ldr	r2, [pc, #748]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090f6:	430b      	orrs	r3, r1
 80090f8:	6553      	str	r3, [r2, #84]	; 0x54
 80090fa:	e003      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f002 0302 	and.w	r3, r2, #2
 8009110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800911a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800911e:	460b      	mov	r3, r1
 8009120:	4313      	orrs	r3, r2
 8009122:	d041      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800912a:	2b05      	cmp	r3, #5
 800912c:	d824      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800912e:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009134:	08009181 	.word	0x08009181
 8009138:	0800914d 	.word	0x0800914d
 800913c:	08009163 	.word	0x08009163
 8009140:	08009181 	.word	0x08009181
 8009144:	08009181 	.word	0x08009181
 8009148:	08009181 	.word	0x08009181
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009150:	3308      	adds	r3, #8
 8009152:	2101      	movs	r1, #1
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fcb3 	bl	8009ac0 <RCCEx_PLL2_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009160:	e00f      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009166:	3328      	adds	r3, #40	; 0x28
 8009168:	2101      	movs	r1, #1
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fd5a 	bl	8009c24 <RCCEx_PLL3_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009176:	e004      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800917e:	e000      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009182:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800918a:	4b96      	ldr	r3, [pc, #600]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800918c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918e:	f023 0107 	bic.w	r1, r3, #7
 8009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009198:	4a92      	ldr	r2, [pc, #584]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800919a:	430b      	orrs	r3, r1
 800919c:	6553      	str	r3, [r2, #84]	; 0x54
 800919e:	e003      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	f002 0304 	and.w	r3, r2, #4
 80091b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091b8:	2300      	movs	r3, #0
 80091ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4313      	orrs	r3, r2
 80091c6:	d044      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d825      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80091d4:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80091d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091da:	bf00      	nop
 80091dc:	08009229 	.word	0x08009229
 80091e0:	080091f5 	.word	0x080091f5
 80091e4:	0800920b 	.word	0x0800920b
 80091e8:	08009229 	.word	0x08009229
 80091ec:	08009229 	.word	0x08009229
 80091f0:	08009229 	.word	0x08009229
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f8:	3308      	adds	r3, #8
 80091fa:	2101      	movs	r1, #1
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fc5f 	bl	8009ac0 <RCCEx_PLL2_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009208:	e00f      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920e:	3328      	adds	r3, #40	; 0x28
 8009210:	2101      	movs	r1, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fd06 	bl	8009c24 <RCCEx_PLL3_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800921e:	e004      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009226:	e000      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800922a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10b      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009232:	4b6c      	ldr	r3, [pc, #432]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009236:	f023 0107 	bic.w	r1, r3, #7
 800923a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009242:	4a68      	ldr	r2, [pc, #416]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009244:	430b      	orrs	r3, r1
 8009246:	6593      	str	r3, [r2, #88]	; 0x58
 8009248:	e003      	b.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800924a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800924e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f002 0320 	and.w	r3, r2, #32
 800925e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009262:	2300      	movs	r3, #0
 8009264:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800926c:	460b      	mov	r3, r1
 800926e:	4313      	orrs	r3, r2
 8009270:	d055      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800927a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800927e:	d033      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009284:	d82c      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800928a:	d02f      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009290:	d826      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009296:	d02b      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800929c:	d820      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800929e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a2:	d012      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80092a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a8:	d81a      	bhi.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d022      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80092ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092b2:	d115      	bne.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b8:	3308      	adds	r3, #8
 80092ba:	2100      	movs	r1, #0
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fbff 	bl	8009ac0 <RCCEx_PLL2_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092c8:	e015      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ce:	3328      	adds	r3, #40	; 0x28
 80092d0:	2102      	movs	r1, #2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fca6 	bl	8009c24 <RCCEx_PLL3_Config>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092de:	e00a      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092e6:	e006      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092e8:	bf00      	nop
 80092ea:	e004      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092ec:	bf00      	nop
 80092ee:	e002      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092f0:	bf00      	nop
 80092f2:	e000      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80092f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80092fe:	4b39      	ldr	r3, [pc, #228]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930e:	4a35      	ldr	r2, [pc, #212]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009310:	430b      	orrs	r3, r1
 8009312:	6553      	str	r3, [r2, #84]	; 0x54
 8009314:	e003      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800931a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800932a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800932e:	2300      	movs	r3, #0
 8009330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009338:	460b      	mov	r3, r1
 800933a:	4313      	orrs	r3, r2
 800933c:	d058      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800933e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800934a:	d033      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800934c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009350:	d82c      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009356:	d02f      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935c:	d826      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800935e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009362:	d02b      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009368:	d820      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800936a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800936e:	d012      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009374:	d81a      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009376:	2b00      	cmp	r3, #0
 8009378:	d022      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800937a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800937e:	d115      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009384:	3308      	adds	r3, #8
 8009386:	2100      	movs	r1, #0
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fb99 	bl	8009ac0 <RCCEx_PLL2_Config>
 800938e:	4603      	mov	r3, r0
 8009390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009394:	e015      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939a:	3328      	adds	r3, #40	; 0x28
 800939c:	2102      	movs	r1, #2
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fc40 	bl	8009c24 <RCCEx_PLL3_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093aa:	e00a      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093b2:	e006      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b4:	bf00      	nop
 80093b6:	e004      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093b8:	bf00      	nop
 80093ba:	e002      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093bc:	bf00      	nop
 80093be:	e000      	b.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10e      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093da:	4a02      	ldr	r2, [pc, #8]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093dc:	430b      	orrs	r3, r1
 80093de:	6593      	str	r3, [r2, #88]	; 0x58
 80093e0:	e006      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80093e2:	bf00      	nop
 80093e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80093f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80093fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009400:	2300      	movs	r3, #0
 8009402:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009406:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800940a:	460b      	mov	r3, r1
 800940c:	4313      	orrs	r3, r2
 800940e:	d055      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009414:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009418:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800941c:	d033      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800941e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009422:	d82c      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009428:	d02f      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800942a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942e:	d826      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009430:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009434:	d02b      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800943a:	d820      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800943c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009440:	d012      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009446:	d81a      	bhi.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009448:	2b00      	cmp	r3, #0
 800944a:	d022      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800944c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009450:	d115      	bne.n	800947e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	3308      	adds	r3, #8
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f000 fb30 	bl	8009ac0 <RCCEx_PLL2_Config>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009466:	e015      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946c:	3328      	adds	r3, #40	; 0x28
 800946e:	2102      	movs	r1, #2
 8009470:	4618      	mov	r0, r3
 8009472:	f000 fbd7 	bl	8009c24 <RCCEx_PLL3_Config>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800947c:	e00a      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009484:	e006      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009486:	bf00      	nop
 8009488:	e004      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948a:	bf00      	nop
 800948c:	e002      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800948e:	bf00      	nop
 8009490:	e000      	b.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009494:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10b      	bne.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800949c:	4ba1      	ldr	r3, [pc, #644]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80094a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ac:	4a9d      	ldr	r2, [pc, #628]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ae:	430b      	orrs	r3, r1
 80094b0:	6593      	str	r3, [r2, #88]	; 0x58
 80094b2:	e003      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f002 0308 	and.w	r3, r2, #8
 80094c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80094d6:	460b      	mov	r3, r1
 80094d8:	4313      	orrs	r3, r2
 80094da:	d01e      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80094dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e8:	d10c      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	3328      	adds	r3, #40	; 0x28
 80094f0:	2102      	movs	r1, #2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fb96 	bl	8009c24 <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009504:	4b87      	ldr	r3, [pc, #540]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009508:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009514:	4a83      	ldr	r2, [pc, #524]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009516:	430b      	orrs	r3, r1
 8009518:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f002 0310 	and.w	r3, r2, #16
 8009526:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800952a:	2300      	movs	r3, #0
 800952c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009530:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009534:	460b      	mov	r3, r1
 8009536:	4313      	orrs	r3, r2
 8009538:	d01e      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800953e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	d10c      	bne.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954c:	3328      	adds	r3, #40	; 0x28
 800954e:	2102      	movs	r1, #2
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fb67 	bl	8009c24 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009562:	4b70      	ldr	r3, [pc, #448]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009566:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009572:	4a6c      	ldr	r2, [pc, #432]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009574:	430b      	orrs	r3, r1
 8009576:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009584:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009588:	2300      	movs	r3, #0
 800958a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800958e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009592:	460b      	mov	r3, r1
 8009594:	4313      	orrs	r3, r2
 8009596:	d03e      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095a4:	d022      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80095a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095aa:	d81b      	bhi.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80095b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095b4:	d00b      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80095b6:	e015      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095bc:	3308      	adds	r3, #8
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 fa7d 	bl	8009ac0 <RCCEx_PLL2_Config>
 80095c6:	4603      	mov	r3, r0
 80095c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095cc:	e00f      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	3328      	adds	r3, #40	; 0x28
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fb24 	bl	8009c24 <RCCEx_PLL3_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095e2:	e004      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ea:	e000      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80095ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095f6:	4b4b      	ldr	r3, [pc, #300]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80095fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009606:	4a47      	ldr	r2, [pc, #284]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009608:	430b      	orrs	r3, r1
 800960a:	6593      	str	r3, [r2, #88]	; 0x58
 800960c:	e003      	b.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009622:	67bb      	str	r3, [r7, #120]	; 0x78
 8009624:	2300      	movs	r3, #0
 8009626:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009628:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800962c:	460b      	mov	r3, r1
 800962e:	4313      	orrs	r3, r2
 8009630:	d03b      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800963a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800963e:	d01f      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009640:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009644:	d818      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964a:	d003      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800964c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009650:	d007      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009652:	e011      	b.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4b33      	ldr	r3, [pc, #204]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	4a32      	ldr	r2, [pc, #200]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800965e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009660:	e00f      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009666:	3328      	adds	r3, #40	; 0x28
 8009668:	2101      	movs	r1, #1
 800966a:	4618      	mov	r0, r3
 800966c:	f000 fada 	bl	8009c24 <RCCEx_PLL3_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009676:	e004      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800967e:	e000      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800968a:	4b26      	ldr	r3, [pc, #152]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	4a22      	ldr	r2, [pc, #136]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800969c:	430b      	orrs	r3, r1
 800969e:	6553      	str	r3, [r2, #84]	; 0x54
 80096a0:	e003      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80096b6:	673b      	str	r3, [r7, #112]	; 0x70
 80096b8:	2300      	movs	r3, #0
 80096ba:	677b      	str	r3, [r7, #116]	; 0x74
 80096bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80096c0:	460b      	mov	r3, r1
 80096c2:	4313      	orrs	r3, r2
 80096c4:	d034      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80096d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d4:	d007      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80096d6:	e011      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d8:	4b12      	ldr	r3, [pc, #72]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	4a11      	ldr	r2, [pc, #68]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096e4:	e00e      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ea:	3308      	adds	r3, #8
 80096ec:	2102      	movs	r1, #2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f9e6 	bl	8009ac0 <RCCEx_PLL2_Config>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096fa:	e003      	b.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10d      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800970c:	4b05      	ldr	r3, [pc, #20]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800970e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971a:	4a02      	ldr	r2, [pc, #8]	; (8009724 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800971c:	430b      	orrs	r3, r1
 800971e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009720:	e006      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009722:	bf00      	nop
 8009724:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009728:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800972c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800973c:	66bb      	str	r3, [r7, #104]	; 0x68
 800973e:	2300      	movs	r3, #0
 8009740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009742:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009746:	460b      	mov	r3, r1
 8009748:	4313      	orrs	r3, r2
 800974a:	d00c      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800974c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009750:	3328      	adds	r3, #40	; 0x28
 8009752:	2102      	movs	r1, #2
 8009754:	4618      	mov	r0, r3
 8009756:	f000 fa65 	bl	8009c24 <RCCEx_PLL3_Config>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009772:	663b      	str	r3, [r7, #96]	; 0x60
 8009774:	2300      	movs	r3, #0
 8009776:	667b      	str	r3, [r7, #100]	; 0x64
 8009778:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800977c:	460b      	mov	r3, r1
 800977e:	4313      	orrs	r3, r2
 8009780:	d038      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800978a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800978e:	d018      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009794:	d811      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979a:	d014      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800979c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097a0:	d80b      	bhi.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d011      	beq.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80097a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097aa:	d106      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ac:	4bc3      	ldr	r3, [pc, #780]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	4ac2      	ldr	r2, [pc, #776]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097b8:	e008      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c2:	bf00      	nop
 80097c4:	e002      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097c6:	bf00      	nop
 80097c8:	e000      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80097ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097d4:	4bb9      	ldr	r3, [pc, #740]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097e4:	4ab5      	ldr	r2, [pc, #724]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097e6:	430b      	orrs	r3, r1
 80097e8:	6553      	str	r3, [r2, #84]	; 0x54
 80097ea:	e003      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009800:	65bb      	str	r3, [r7, #88]	; 0x58
 8009802:	2300      	movs	r3, #0
 8009804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009806:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800980a:	460b      	mov	r3, r1
 800980c:	4313      	orrs	r3, r2
 800980e:	d009      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009810:	4baa      	ldr	r3, [pc, #680]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981e:	4aa7      	ldr	r2, [pc, #668]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009820:	430b      	orrs	r3, r1
 8009822:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009830:	653b      	str	r3, [r7, #80]	; 0x50
 8009832:	2300      	movs	r3, #0
 8009834:	657b      	str	r3, [r7, #84]	; 0x54
 8009836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800983a:	460b      	mov	r3, r1
 800983c:	4313      	orrs	r3, r2
 800983e:	d00a      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009840:	4b9e      	ldr	r3, [pc, #632]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009850:	4a9a      	ldr	r2, [pc, #616]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009852:	430b      	orrs	r3, r1
 8009854:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009862:	64bb      	str	r3, [r7, #72]	; 0x48
 8009864:	2300      	movs	r3, #0
 8009866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009868:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d009      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009872:	4b92      	ldr	r3, [pc, #584]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009876:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009880:	4a8e      	ldr	r2, [pc, #568]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009882:	430b      	orrs	r3, r1
 8009884:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009892:	643b      	str	r3, [r7, #64]	; 0x40
 8009894:	2300      	movs	r3, #0
 8009896:	647b      	str	r3, [r7, #68]	; 0x44
 8009898:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d00e      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098a2:	4b86      	ldr	r3, [pc, #536]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	4a85      	ldr	r2, [pc, #532]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ac:	6113      	str	r3, [r2, #16]
 80098ae:	4b83      	ldr	r3, [pc, #524]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098b0:	6919      	ldr	r1, [r3, #16]
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80098ba:	4a80      	ldr	r2, [pc, #512]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098bc:	430b      	orrs	r3, r1
 80098be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ce:	2300      	movs	r3, #0
 80098d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80098d6:	460b      	mov	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	d009      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098dc:	4b77      	ldr	r3, [pc, #476]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ea:	4a74      	ldr	r2, [pc, #464]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098ec:	430b      	orrs	r3, r1
 80098ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80098fc:	633b      	str	r3, [r7, #48]	; 0x30
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	; 0x34
 8009902:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d00a      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800990c:	4b6b      	ldr	r3, [pc, #428]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009910:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800991c:	4a67      	ldr	r2, [pc, #412]	; (8009abc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800991e:	430b      	orrs	r3, r1
 8009920:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	2100      	movs	r1, #0
 800992c:	62b9      	str	r1, [r7, #40]	; 0x28
 800992e:	f003 0301 	and.w	r3, r3, #1
 8009932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009934:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009938:	460b      	mov	r3, r1
 800993a:	4313      	orrs	r3, r2
 800993c:	d011      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009942:	3308      	adds	r3, #8
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f8ba 	bl	8009ac0 <RCCEx_PLL2_Config>
 800994c:	4603      	mov	r3, r0
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800995e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	2100      	movs	r1, #0
 800996c:	6239      	str	r1, [r7, #32]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
 8009974:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d011      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009982:	3308      	adds	r3, #8
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f89a 	bl	8009ac0 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800999e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	2100      	movs	r1, #0
 80099ac:	61b9      	str	r1, [r7, #24]
 80099ae:	f003 0304 	and.w	r3, r3, #4
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099b8:	460b      	mov	r3, r1
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d011      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c2:	3308      	adds	r3, #8
 80099c4:	2102      	movs	r1, #2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 f87a 	bl	8009ac0 <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	2100      	movs	r1, #0
 80099ec:	6139      	str	r1, [r7, #16]
 80099ee:	f003 0308 	and.w	r3, r3, #8
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d011      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a02:	3328      	adds	r3, #40	; 0x28
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 f90c 	bl	8009c24 <RCCEx_PLL3_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	f003 0310 	and.w	r3, r3, #16
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d011      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a42:	3328      	adds	r3, #40	; 0x28
 8009a44:	2101      	movs	r1, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 f8ec 	bl	8009c24 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	6039      	str	r1, [r7, #0]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	607b      	str	r3, [r7, #4]
 8009a74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d011      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a82:	3328      	adds	r3, #40	; 0x28
 8009a84:	2102      	movs	r1, #2
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 f8cc 	bl	8009c24 <RCCEx_PLL3_Config>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009aa2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009abc:	58024400 	.word	0x58024400

08009ac0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ace:	4b53      	ldr	r3, [pc, #332]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d101      	bne.n	8009ade <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e099      	b.n	8009c12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009ade:	4b4f      	ldr	r3, [pc, #316]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a4e      	ldr	r2, [pc, #312]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009ae4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aea:	f7f9 fe63 	bl	80037b4 <HAL_GetTick>
 8009aee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009af0:	e008      	b.n	8009b04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009af2:	f7f9 fe5f 	bl	80037b4 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d901      	bls.n	8009b04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e086      	b.n	8009c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b04:	4b45      	ldr	r3, [pc, #276]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f0      	bne.n	8009af2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b10:	4b42      	ldr	r3, [pc, #264]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	031b      	lsls	r3, r3, #12
 8009b1e:	493f      	ldr	r1, [pc, #252]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	628b      	str	r3, [r1, #40]	; 0x28
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	025b      	lsls	r3, r3, #9
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	061b      	lsls	r3, r3, #24
 8009b50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b54:	4931      	ldr	r1, [pc, #196]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b5a:	4b30      	ldr	r3, [pc, #192]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	492d      	ldr	r1, [pc, #180]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b6c:	4b2b      	ldr	r3, [pc, #172]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	f023 0220 	bic.w	r2, r3, #32
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	4928      	ldr	r1, [pc, #160]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b7e:	4b27      	ldr	r3, [pc, #156]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b84:	f023 0310 	bic.w	r3, r3, #16
 8009b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b8a:	4b24      	ldr	r3, [pc, #144]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b8e:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <RCCEx_PLL2_Config+0x160>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	69d2      	ldr	r2, [r2, #28]
 8009b96:	00d2      	lsls	r2, r2, #3
 8009b98:	4920      	ldr	r1, [pc, #128]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b9e:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	4a1e      	ldr	r2, [pc, #120]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009ba4:	f043 0310 	orr.w	r3, r3, #16
 8009ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bbc:	e00f      	b.n	8009bde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d106      	bne.n	8009bd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009bc4:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a14      	ldr	r2, [pc, #80]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bd0:	e005      	b.n	8009bde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009bde:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a0e      	ldr	r2, [pc, #56]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009be4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bea:	f7f9 fde3 	bl	80037b4 <HAL_GetTick>
 8009bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bf0:	e008      	b.n	8009c04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009bf2:	f7f9 fddf 	bl	80037b4 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e006      	b.n	8009c12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <RCCEx_PLL2_Config+0x15c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0f0      	beq.n	8009bf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	ffff0007 	.word	0xffff0007

08009c24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c32:	4b53      	ldr	r3, [pc, #332]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d101      	bne.n	8009c42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e099      	b.n	8009d76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c42:	4b4f      	ldr	r3, [pc, #316]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a4e      	ldr	r2, [pc, #312]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4e:	f7f9 fdb1 	bl	80037b4 <HAL_GetTick>
 8009c52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c54:	e008      	b.n	8009c68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c56:	f7f9 fdad 	bl	80037b4 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e086      	b.n	8009d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c68:	4b45      	ldr	r3, [pc, #276]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f0      	bne.n	8009c56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c74:	4b42      	ldr	r3, [pc, #264]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	051b      	lsls	r3, r3, #20
 8009c82:	493f      	ldr	r1, [pc, #252]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	628b      	str	r3, [r1, #40]	; 0x28
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	025b      	lsls	r3, r3, #9
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	431a      	orrs	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	061b      	lsls	r3, r3, #24
 8009cb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009cb8:	4931      	ldr	r1, [pc, #196]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009cbe:	4b30      	ldr	r3, [pc, #192]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	492d      	ldr	r1, [pc, #180]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009cd0:	4b2b      	ldr	r3, [pc, #172]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	4928      	ldr	r1, [pc, #160]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ce2:	4b27      	ldr	r3, [pc, #156]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	4a26      	ldr	r2, [pc, #152]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009cee:	4b24      	ldr	r3, [pc, #144]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cf2:	4b24      	ldr	r3, [pc, #144]	; (8009d84 <RCCEx_PLL3_Config+0x160>)
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	69d2      	ldr	r2, [r2, #28]
 8009cfa:	00d2      	lsls	r2, r2, #3
 8009cfc:	4920      	ldr	r1, [pc, #128]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d02:	4b1f      	ldr	r3, [pc, #124]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d06:	4a1e      	ldr	r2, [pc, #120]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d106      	bne.n	8009d22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d14:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d18:	4a19      	ldr	r2, [pc, #100]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d20:	e00f      	b.n	8009d42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d106      	bne.n	8009d36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d28:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d34:	e005      	b.n	8009d42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d36:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	4a11      	ldr	r2, [pc, #68]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d42:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a0e      	ldr	r2, [pc, #56]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d4e:	f7f9 fd31 	bl	80037b4 <HAL_GetTick>
 8009d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d54:	e008      	b.n	8009d68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d56:	f7f9 fd2d 	bl	80037b4 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d901      	bls.n	8009d68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e006      	b.n	8009d76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <RCCEx_PLL3_Config+0x15c>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0f0      	beq.n	8009d56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	58024400 	.word	0x58024400
 8009d84:	ffff0007 	.word	0xffff0007

08009d88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e02b      	b.n	8009df4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d106      	bne.n	8009db6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f825 	bl	8009e00 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4610      	mov	r0, r2
 8009dca:	f002 f9df 	bl	800c18c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6839      	ldr	r1, [r7, #0]
 8009dda:	f002 fa33 	bl	800c244 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009dde:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <HAL_SDRAM_Init+0x74>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a06      	ldr	r2, [pc, #24]	; (8009dfc <HAL_SDRAM_Init+0x74>)
 8009de4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009de8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	52004000 	.word	0x52004000

08009e00 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e26:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d101      	bne.n	8009e32 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e021      	b.n	8009e76 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d002      	beq.n	8009e3e <HAL_SDRAM_SendCommand+0x2a>
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b05      	cmp	r3, #5
 8009e3c:	d118      	bne.n	8009e70 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2202      	movs	r2, #2
 8009e42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	68b9      	ldr	r1, [r7, #8]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f002 fa62 	bl	800c318 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d104      	bne.n	8009e66 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2205      	movs	r2, #5
 8009e60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e64:	e006      	b.n	8009e74 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e6e:	e001      	b.n	8009e74 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e000      	b.n	8009e76 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d101      	bne.n	8009e98 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009e94:	2302      	movs	r3, #2
 8009e96:	e016      	b.n	8009ec6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d10f      	bne.n	8009ec4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f002 fa54 	bl	800c360 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e049      	b.n	8009f74 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d106      	bne.n	8009efa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7f6 fde1 	bl	8000abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2202      	movs	r2, #2
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f000 fdff 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d101      	bne.n	8009f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e049      	b.n	800a022 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d106      	bne.n	8009fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f89d 	bl	800a0e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f000 fda8 	bl	800ab10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b082      	sub	sp, #8
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2202      	movs	r2, #2
 800a036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	6a1a      	ldr	r2, [r3, #32]
 800a040:	f241 1311 	movw	r3, #4369	; 0x1111
 800a044:	4013      	ands	r3, r2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10f      	bne.n	800a06a <HAL_TIM_PWM_DeInit+0x40>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6a1a      	ldr	r2, [r3, #32]
 800a050:	f240 4344 	movw	r3, #1092	; 0x444
 800a054:	4013      	ands	r3, r2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d107      	bne.n	800a06a <HAL_TIM_PWM_DeInit+0x40>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f022 0201 	bic.w	r2, r2, #1
 800a068:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f843 	bl	800a0f6 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b083      	sub	sp, #12
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0ea:	bf00      	nop
 800a0ec:	370c      	adds	r7, #12
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b083      	sub	sp, #12
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <HAL_TIM_PWM_Start+0x24>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a122:	b2db      	uxtb	r3, r3
 800a124:	2b01      	cmp	r3, #1
 800a126:	bf14      	ite	ne
 800a128:	2301      	movne	r3, #1
 800a12a:	2300      	moveq	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	e03c      	b.n	800a1aa <HAL_TIM_PWM_Start+0x9e>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	2b04      	cmp	r3, #4
 800a134:	d109      	bne.n	800a14a <HAL_TIM_PWM_Start+0x3e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b01      	cmp	r3, #1
 800a140:	bf14      	ite	ne
 800a142:	2301      	movne	r3, #1
 800a144:	2300      	moveq	r3, #0
 800a146:	b2db      	uxtb	r3, r3
 800a148:	e02f      	b.n	800a1aa <HAL_TIM_PWM_Start+0x9e>
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d109      	bne.n	800a164 <HAL_TIM_PWM_Start+0x58>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	bf14      	ite	ne
 800a15c:	2301      	movne	r3, #1
 800a15e:	2300      	moveq	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	e022      	b.n	800a1aa <HAL_TIM_PWM_Start+0x9e>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b0c      	cmp	r3, #12
 800a168:	d109      	bne.n	800a17e <HAL_TIM_PWM_Start+0x72>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b01      	cmp	r3, #1
 800a174:	bf14      	ite	ne
 800a176:	2301      	movne	r3, #1
 800a178:	2300      	moveq	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	e015      	b.n	800a1aa <HAL_TIM_PWM_Start+0x9e>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b10      	cmp	r3, #16
 800a182:	d109      	bne.n	800a198 <HAL_TIM_PWM_Start+0x8c>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	bf14      	ite	ne
 800a190:	2301      	movne	r3, #1
 800a192:	2300      	moveq	r3, #0
 800a194:	b2db      	uxtb	r3, r3
 800a196:	e008      	b.n	800a1aa <HAL_TIM_PWM_Start+0x9e>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	bf14      	ite	ne
 800a1a4:	2301      	movne	r3, #1
 800a1a6:	2300      	moveq	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e0a1      	b.n	800a2f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <HAL_TIM_PWM_Start+0xb6>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1c0:	e023      	b.n	800a20a <HAL_TIM_PWM_Start+0xfe>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	d104      	bne.n	800a1d2 <HAL_TIM_PWM_Start+0xc6>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1d0:	e01b      	b.n	800a20a <HAL_TIM_PWM_Start+0xfe>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d104      	bne.n	800a1e2 <HAL_TIM_PWM_Start+0xd6>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1e0:	e013      	b.n	800a20a <HAL_TIM_PWM_Start+0xfe>
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b0c      	cmp	r3, #12
 800a1e6:	d104      	bne.n	800a1f2 <HAL_TIM_PWM_Start+0xe6>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1f0:	e00b      	b.n	800a20a <HAL_TIM_PWM_Start+0xfe>
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d104      	bne.n	800a202 <HAL_TIM_PWM_Start+0xf6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a200:	e003      	b.n	800a20a <HAL_TIM_PWM_Start+0xfe>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2202      	movs	r2, #2
 800a206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2201      	movs	r2, #1
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	4618      	mov	r0, r3
 800a214:	f001 f88a 	bl	800b32c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a38      	ldr	r2, [pc, #224]	; (800a300 <HAL_TIM_PWM_Start+0x1f4>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d013      	beq.n	800a24a <HAL_TIM_PWM_Start+0x13e>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a37      	ldr	r2, [pc, #220]	; (800a304 <HAL_TIM_PWM_Start+0x1f8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00e      	beq.n	800a24a <HAL_TIM_PWM_Start+0x13e>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a35      	ldr	r2, [pc, #212]	; (800a308 <HAL_TIM_PWM_Start+0x1fc>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d009      	beq.n	800a24a <HAL_TIM_PWM_Start+0x13e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a34      	ldr	r2, [pc, #208]	; (800a30c <HAL_TIM_PWM_Start+0x200>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d004      	beq.n	800a24a <HAL_TIM_PWM_Start+0x13e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a32      	ldr	r2, [pc, #200]	; (800a310 <HAL_TIM_PWM_Start+0x204>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d101      	bne.n	800a24e <HAL_TIM_PWM_Start+0x142>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <HAL_TIM_PWM_Start+0x144>
 800a24e:	2300      	movs	r3, #0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d007      	beq.n	800a264 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a262:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a25      	ldr	r2, [pc, #148]	; (800a300 <HAL_TIM_PWM_Start+0x1f4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d022      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a276:	d01d      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a25      	ldr	r2, [pc, #148]	; (800a314 <HAL_TIM_PWM_Start+0x208>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d018      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a24      	ldr	r2, [pc, #144]	; (800a318 <HAL_TIM_PWM_Start+0x20c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d013      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a22      	ldr	r2, [pc, #136]	; (800a31c <HAL_TIM_PWM_Start+0x210>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00e      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1a      	ldr	r2, [pc, #104]	; (800a304 <HAL_TIM_PWM_Start+0x1f8>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d009      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1e      	ldr	r2, [pc, #120]	; (800a320 <HAL_TIM_PWM_Start+0x214>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d004      	beq.n	800a2b4 <HAL_TIM_PWM_Start+0x1a8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a16      	ldr	r2, [pc, #88]	; (800a308 <HAL_TIM_PWM_Start+0x1fc>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d115      	bne.n	800a2e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	4b1a      	ldr	r3, [pc, #104]	; (800a324 <HAL_TIM_PWM_Start+0x218>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d015      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x1e6>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2cc:	d011      	beq.n	800a2f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0201 	orr.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2de:	e008      	b.n	800a2f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f042 0201 	orr.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e000      	b.n	800a2f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	40010000 	.word	0x40010000
 800a304:	40010400 	.word	0x40010400
 800a308:	40014000 	.word	0x40014000
 800a30c:	40014400 	.word	0x40014400
 800a310:	40014800 	.word	0x40014800
 800a314:	40000400 	.word	0x40000400
 800a318:	40000800 	.word	0x40000800
 800a31c:	40000c00 	.word	0x40000c00
 800a320:	40001800 	.word	0x40001800
 800a324:	00010007 	.word	0x00010007

0800a328 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	6839      	ldr	r1, [r7, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fff6 	bl	800b32c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a3e      	ldr	r2, [pc, #248]	; (800a440 <HAL_TIM_PWM_Stop+0x118>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d013      	beq.n	800a372 <HAL_TIM_PWM_Stop+0x4a>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a3d      	ldr	r2, [pc, #244]	; (800a444 <HAL_TIM_PWM_Stop+0x11c>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d00e      	beq.n	800a372 <HAL_TIM_PWM_Stop+0x4a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a3b      	ldr	r2, [pc, #236]	; (800a448 <HAL_TIM_PWM_Stop+0x120>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d009      	beq.n	800a372 <HAL_TIM_PWM_Stop+0x4a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a3a      	ldr	r2, [pc, #232]	; (800a44c <HAL_TIM_PWM_Stop+0x124>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d004      	beq.n	800a372 <HAL_TIM_PWM_Stop+0x4a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a38      	ldr	r2, [pc, #224]	; (800a450 <HAL_TIM_PWM_Stop+0x128>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d101      	bne.n	800a376 <HAL_TIM_PWM_Stop+0x4e>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <HAL_TIM_PWM_Stop+0x50>
 800a376:	2300      	movs	r3, #0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d017      	beq.n	800a3ac <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6a1a      	ldr	r2, [r3, #32]
 800a382:	f241 1311 	movw	r3, #4369	; 0x1111
 800a386:	4013      	ands	r3, r2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10f      	bne.n	800a3ac <HAL_TIM_PWM_Stop+0x84>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a1a      	ldr	r2, [r3, #32]
 800a392:	f240 4344 	movw	r3, #1092	; 0x444
 800a396:	4013      	ands	r3, r2
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d107      	bne.n	800a3ac <HAL_TIM_PWM_Stop+0x84>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a3aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a1a      	ldr	r2, [r3, #32]
 800a3b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10f      	bne.n	800a3dc <HAL_TIM_PWM_Stop+0xb4>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6a1a      	ldr	r2, [r3, #32]
 800a3c2:	f240 4344 	movw	r3, #1092	; 0x444
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d107      	bne.n	800a3dc <HAL_TIM_PWM_Stop+0xb4>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d104      	bne.n	800a3ec <HAL_TIM_PWM_Stop+0xc4>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ea:	e023      	b.n	800a434 <HAL_TIM_PWM_Stop+0x10c>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d104      	bne.n	800a3fc <HAL_TIM_PWM_Stop+0xd4>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3fa:	e01b      	b.n	800a434 <HAL_TIM_PWM_Stop+0x10c>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	d104      	bne.n	800a40c <HAL_TIM_PWM_Stop+0xe4>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a40a:	e013      	b.n	800a434 <HAL_TIM_PWM_Stop+0x10c>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b0c      	cmp	r3, #12
 800a410:	d104      	bne.n	800a41c <HAL_TIM_PWM_Stop+0xf4>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a41a:	e00b      	b.n	800a434 <HAL_TIM_PWM_Stop+0x10c>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d104      	bne.n	800a42c <HAL_TIM_PWM_Stop+0x104>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a42a:	e003      	b.n	800a434 <HAL_TIM_PWM_Stop+0x10c>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800a434:	2300      	movs	r3, #0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40010000 	.word	0x40010000
 800a444:	40010400 	.word	0x40010400
 800a448:	40014000 	.word	0x40014000
 800a44c:	40014400 	.word	0x40014400
 800a450:	40014800 	.word	0x40014800

0800a454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b02      	cmp	r3, #2
 800a468:	d122      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b02      	cmp	r3, #2
 800a476:	d11b      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f06f 0202 	mvn.w	r2, #2
 800a480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 fb1c 	bl	800aad4 <HAL_TIM_IC_CaptureCallback>
 800a49c:	e005      	b.n	800a4aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fb0e 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fb1f 	bl	800aae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0304 	and.w	r3, r3, #4
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	d122      	bne.n	800a504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d11b      	bne.n	800a504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0204 	mvn.w	r2, #4
 800a4d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 faf2 	bl	800aad4 <HAL_TIM_IC_CaptureCallback>
 800a4f0:	e005      	b.n	800a4fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fae4 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 faf5 	bl	800aae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0308 	and.w	r3, r3, #8
 800a50e:	2b08      	cmp	r3, #8
 800a510:	d122      	bne.n	800a558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0308 	and.w	r3, r3, #8
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d11b      	bne.n	800a558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0208 	mvn.w	r2, #8
 800a528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2204      	movs	r2, #4
 800a52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fac8 	bl	800aad4 <HAL_TIM_IC_CaptureCallback>
 800a544:	e005      	b.n	800a552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 faba 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 facb 	bl	800aae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f003 0310 	and.w	r3, r3, #16
 800a562:	2b10      	cmp	r3, #16
 800a564:	d122      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f003 0310 	and.w	r3, r3, #16
 800a570:	2b10      	cmp	r3, #16
 800a572:	d11b      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f06f 0210 	mvn.w	r2, #16
 800a57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2208      	movs	r2, #8
 800a582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa9e 	bl	800aad4 <HAL_TIM_IC_CaptureCallback>
 800a598:	e005      	b.n	800a5a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa90 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 faa1 	bl	800aae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d10e      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d107      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0201 	mvn.w	r2, #1
 800a5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa6a 	bl	800aaac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5e2:	2b80      	cmp	r3, #128	; 0x80
 800a5e4:	d10e      	bne.n	800a604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f0:	2b80      	cmp	r3, #128	; 0x80
 800a5f2:	d107      	bne.n	800a604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 ff52 	bl	800b4a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a612:	d10e      	bne.n	800a632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61e:	2b80      	cmp	r3, #128	; 0x80
 800a620:	d107      	bne.n	800a632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 ff45 	bl	800b4bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63c:	2b40      	cmp	r3, #64	; 0x40
 800a63e:	d10e      	bne.n	800a65e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a64a:	2b40      	cmp	r3, #64	; 0x40
 800a64c:	d107      	bne.n	800a65e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fa4f 	bl	800aafc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d10e      	bne.n	800a68a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f003 0320 	and.w	r3, r3, #32
 800a676:	2b20      	cmp	r3, #32
 800a678:	d107      	bne.n	800a68a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f06f 0220 	mvn.w	r2, #32
 800a682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 ff05 	bl	800b494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e0ff      	b.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b14      	cmp	r3, #20
 800a6be:	f200 80f0 	bhi.w	800a8a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a71d 	.word	0x0800a71d
 800a6cc:	0800a8a3 	.word	0x0800a8a3
 800a6d0:	0800a8a3 	.word	0x0800a8a3
 800a6d4:	0800a8a3 	.word	0x0800a8a3
 800a6d8:	0800a75d 	.word	0x0800a75d
 800a6dc:	0800a8a3 	.word	0x0800a8a3
 800a6e0:	0800a8a3 	.word	0x0800a8a3
 800a6e4:	0800a8a3 	.word	0x0800a8a3
 800a6e8:	0800a79f 	.word	0x0800a79f
 800a6ec:	0800a8a3 	.word	0x0800a8a3
 800a6f0:	0800a8a3 	.word	0x0800a8a3
 800a6f4:	0800a8a3 	.word	0x0800a8a3
 800a6f8:	0800a7df 	.word	0x0800a7df
 800a6fc:	0800a8a3 	.word	0x0800a8a3
 800a700:	0800a8a3 	.word	0x0800a8a3
 800a704:	0800a8a3 	.word	0x0800a8a3
 800a708:	0800a821 	.word	0x0800a821
 800a70c:	0800a8a3 	.word	0x0800a8a3
 800a710:	0800a8a3 	.word	0x0800a8a3
 800a714:	0800a8a3 	.word	0x0800a8a3
 800a718:	0800a861 	.word	0x0800a861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68b9      	ldr	r1, [r7, #8]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fa8e 	bl	800ac44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	699a      	ldr	r2, [r3, #24]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0208 	orr.w	r2, r2, #8
 800a736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	699a      	ldr	r2, [r3, #24]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f022 0204 	bic.w	r2, r2, #4
 800a746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6999      	ldr	r1, [r3, #24]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	691a      	ldr	r2, [r3, #16]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	430a      	orrs	r2, r1
 800a758:	619a      	str	r2, [r3, #24]
      break;
 800a75a:	e0a5      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68b9      	ldr	r1, [r7, #8]
 800a762:	4618      	mov	r0, r3
 800a764:	f000 fafe 	bl	800ad64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699a      	ldr	r2, [r3, #24]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	6999      	ldr	r1, [r3, #24]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	021a      	lsls	r2, r3, #8
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	619a      	str	r2, [r3, #24]
      break;
 800a79c:	e084      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68b9      	ldr	r1, [r7, #8]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fb67 	bl	800ae78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	69da      	ldr	r2, [r3, #28]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f042 0208 	orr.w	r2, r2, #8
 800a7b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	69da      	ldr	r2, [r3, #28]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0204 	bic.w	r2, r2, #4
 800a7c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	69d9      	ldr	r1, [r3, #28]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	691a      	ldr	r2, [r3, #16]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	430a      	orrs	r2, r1
 800a7da:	61da      	str	r2, [r3, #28]
      break;
 800a7dc:	e064      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	68b9      	ldr	r1, [r7, #8]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fbcf 	bl	800af88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69da      	ldr	r2, [r3, #28]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69d9      	ldr	r1, [r3, #28]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	021a      	lsls	r2, r3, #8
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	61da      	str	r2, [r3, #28]
      break;
 800a81e:	e043      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fc18 	bl	800b05c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f042 0208 	orr.w	r2, r2, #8
 800a83a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f022 0204 	bic.w	r2, r2, #4
 800a84a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	691a      	ldr	r2, [r3, #16]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a85e:	e023      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68b9      	ldr	r1, [r7, #8]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fc5c 	bl	800b124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a87a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a88a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	021a      	lsls	r2, r3, #8
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8a0:	e002      	b.n	800a8a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop

0800a8bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e0dc      	b.n	800aa92 <HAL_TIM_ConfigClockSource+0x1d6>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	4b6a      	ldr	r3, [pc, #424]	; (800aa9c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a8fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a64      	ldr	r2, [pc, #400]	; (800aaa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f000 80a9 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a914:	4a62      	ldr	r2, [pc, #392]	; (800aaa0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a916:	4293      	cmp	r3, r2
 800a918:	f200 80ae 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a91c:	4a61      	ldr	r2, [pc, #388]	; (800aaa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	f000 80a1 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a924:	4a5f      	ldr	r2, [pc, #380]	; (800aaa4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a926:	4293      	cmp	r3, r2
 800a928:	f200 80a6 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a92c:	4a5e      	ldr	r2, [pc, #376]	; (800aaa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	f000 8099 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a934:	4a5c      	ldr	r2, [pc, #368]	; (800aaa8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a936:	4293      	cmp	r3, r2
 800a938:	f200 809e 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a93c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a940:	f000 8091 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a944:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a948:	f200 8096 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a94c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a950:	f000 8089 	beq.w	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a958:	f200 808e 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a95c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a960:	d03e      	beq.n	800a9e0 <HAL_TIM_ConfigClockSource+0x124>
 800a962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a966:	f200 8087 	bhi.w	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a96e:	f000 8086 	beq.w	800aa7e <HAL_TIM_ConfigClockSource+0x1c2>
 800a972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a976:	d87f      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a978:	2b70      	cmp	r3, #112	; 0x70
 800a97a:	d01a      	beq.n	800a9b2 <HAL_TIM_ConfigClockSource+0xf6>
 800a97c:	2b70      	cmp	r3, #112	; 0x70
 800a97e:	d87b      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a980:	2b60      	cmp	r3, #96	; 0x60
 800a982:	d050      	beq.n	800aa26 <HAL_TIM_ConfigClockSource+0x16a>
 800a984:	2b60      	cmp	r3, #96	; 0x60
 800a986:	d877      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a988:	2b50      	cmp	r3, #80	; 0x50
 800a98a:	d03c      	beq.n	800aa06 <HAL_TIM_ConfigClockSource+0x14a>
 800a98c:	2b50      	cmp	r3, #80	; 0x50
 800a98e:	d873      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a990:	2b40      	cmp	r3, #64	; 0x40
 800a992:	d058      	beq.n	800aa46 <HAL_TIM_ConfigClockSource+0x18a>
 800a994:	2b40      	cmp	r3, #64	; 0x40
 800a996:	d86f      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a998:	2b30      	cmp	r3, #48	; 0x30
 800a99a:	d064      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a99c:	2b30      	cmp	r3, #48	; 0x30
 800a99e:	d86b      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	d060      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d867      	bhi.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d05c      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9ac:	2b10      	cmp	r3, #16
 800a9ae:	d05a      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9b0:	e062      	b.n	800aa78 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6818      	ldr	r0, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	6899      	ldr	r1, [r3, #8]
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f000 fc93 	bl	800b2ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68ba      	ldr	r2, [r7, #8]
 800a9dc:	609a      	str	r2, [r3, #8]
      break;
 800a9de:	e04f      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	6899      	ldr	r1, [r3, #8]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	685a      	ldr	r2, [r3, #4]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f000 fc7c 	bl	800b2ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689a      	ldr	r2, [r3, #8]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa02:	609a      	str	r2, [r3, #8]
      break;
 800aa04:	e03c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	6859      	ldr	r1, [r3, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f000 fbec 	bl	800b1f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2150      	movs	r1, #80	; 0x50
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fc46 	bl	800b2b0 <TIM_ITRx_SetConfig>
      break;
 800aa24:	e02c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	6859      	ldr	r1, [r3, #4]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f000 fc0b 	bl	800b24e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2160      	movs	r1, #96	; 0x60
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 fc36 	bl	800b2b0 <TIM_ITRx_SetConfig>
      break;
 800aa44:	e01c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6859      	ldr	r1, [r3, #4]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	461a      	mov	r2, r3
 800aa54:	f000 fbcc 	bl	800b1f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2140      	movs	r1, #64	; 0x40
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f000 fc26 	bl	800b2b0 <TIM_ITRx_SetConfig>
      break;
 800aa64:	e00c      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f000 fc1d 	bl	800b2b0 <TIM_ITRx_SetConfig>
      break;
 800aa76:	e003      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa7c:	e000      	b.n	800aa80 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aa7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	ffceff88 	.word	0xffceff88
 800aaa0:	00100040 	.word	0x00100040
 800aaa4:	00100030 	.word	0x00100030
 800aaa8:	00100020 	.word	0x00100020

0800aaac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b083      	sub	sp, #12
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab04:	bf00      	nop
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a40      	ldr	r2, [pc, #256]	; (800ac24 <TIM_Base_SetConfig+0x114>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d013      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d00f      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a3d      	ldr	r2, [pc, #244]	; (800ac28 <TIM_Base_SetConfig+0x118>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d00b      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a3c      	ldr	r2, [pc, #240]	; (800ac2c <TIM_Base_SetConfig+0x11c>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d007      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a3b      	ldr	r2, [pc, #236]	; (800ac30 <TIM_Base_SetConfig+0x120>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d003      	beq.n	800ab50 <TIM_Base_SetConfig+0x40>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a3a      	ldr	r2, [pc, #232]	; (800ac34 <TIM_Base_SetConfig+0x124>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d108      	bne.n	800ab62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a2f      	ldr	r2, [pc, #188]	; (800ac24 <TIM_Base_SetConfig+0x114>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d01f      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab70:	d01b      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a2c      	ldr	r2, [pc, #176]	; (800ac28 <TIM_Base_SetConfig+0x118>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d017      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a2b      	ldr	r2, [pc, #172]	; (800ac2c <TIM_Base_SetConfig+0x11c>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d013      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a2a      	ldr	r2, [pc, #168]	; (800ac30 <TIM_Base_SetConfig+0x120>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a29      	ldr	r2, [pc, #164]	; (800ac34 <TIM_Base_SetConfig+0x124>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a28      	ldr	r2, [pc, #160]	; (800ac38 <TIM_Base_SetConfig+0x128>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a27      	ldr	r2, [pc, #156]	; (800ac3c <TIM_Base_SetConfig+0x12c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_Base_SetConfig+0x9a>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a26      	ldr	r2, [pc, #152]	; (800ac40 <TIM_Base_SetConfig+0x130>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d108      	bne.n	800abbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4313      	orrs	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689a      	ldr	r2, [r3, #8]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a10      	ldr	r2, [pc, #64]	; (800ac24 <TIM_Base_SetConfig+0x114>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d00f      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a12      	ldr	r2, [pc, #72]	; (800ac34 <TIM_Base_SetConfig+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d00b      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a11      	ldr	r2, [pc, #68]	; (800ac38 <TIM_Base_SetConfig+0x128>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d007      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a10      	ldr	r2, [pc, #64]	; (800ac3c <TIM_Base_SetConfig+0x12c>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <TIM_Base_SetConfig+0xf8>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <TIM_Base_SetConfig+0x130>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d103      	bne.n	800ac10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	691a      	ldr	r2, [r3, #16]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	615a      	str	r2, [r3, #20]
}
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	40000800 	.word	0x40000800
 800ac30:	40000c00 	.word	0x40000c00
 800ac34:	40010400 	.word	0x40010400
 800ac38:	40014000 	.word	0x40014000
 800ac3c:	40014400 	.word	0x40014400
 800ac40:	40014800 	.word	0x40014800

0800ac44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b087      	sub	sp, #28
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	f023 0201 	bic.w	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4b37      	ldr	r3, [pc, #220]	; (800ad4c <TIM_OC1_SetConfig+0x108>)
 800ac70:	4013      	ands	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f023 0303 	bic.w	r3, r3, #3
 800ac7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f023 0302 	bic.w	r3, r3, #2
 800ac8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a2d      	ldr	r2, [pc, #180]	; (800ad50 <TIM_OC1_SetConfig+0x10c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00f      	beq.n	800acc0 <TIM_OC1_SetConfig+0x7c>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a2c      	ldr	r2, [pc, #176]	; (800ad54 <TIM_OC1_SetConfig+0x110>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d00b      	beq.n	800acc0 <TIM_OC1_SetConfig+0x7c>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a2b      	ldr	r2, [pc, #172]	; (800ad58 <TIM_OC1_SetConfig+0x114>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d007      	beq.n	800acc0 <TIM_OC1_SetConfig+0x7c>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a2a      	ldr	r2, [pc, #168]	; (800ad5c <TIM_OC1_SetConfig+0x118>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d003      	beq.n	800acc0 <TIM_OC1_SetConfig+0x7c>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a29      	ldr	r2, [pc, #164]	; (800ad60 <TIM_OC1_SetConfig+0x11c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d10c      	bne.n	800acda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f023 0308 	bic.w	r3, r3, #8
 800acc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	4313      	orrs	r3, r2
 800acd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f023 0304 	bic.w	r3, r3, #4
 800acd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4a1c      	ldr	r2, [pc, #112]	; (800ad50 <TIM_OC1_SetConfig+0x10c>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d00f      	beq.n	800ad02 <TIM_OC1_SetConfig+0xbe>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <TIM_OC1_SetConfig+0x110>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00b      	beq.n	800ad02 <TIM_OC1_SetConfig+0xbe>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a1a      	ldr	r2, [pc, #104]	; (800ad58 <TIM_OC1_SetConfig+0x114>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d007      	beq.n	800ad02 <TIM_OC1_SetConfig+0xbe>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a19      	ldr	r2, [pc, #100]	; (800ad5c <TIM_OC1_SetConfig+0x118>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d003      	beq.n	800ad02 <TIM_OC1_SetConfig+0xbe>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <TIM_OC1_SetConfig+0x11c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d111      	bne.n	800ad26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	697a      	ldr	r2, [r7, #20]
 800ad3e:	621a      	str	r2, [r3, #32]
}
 800ad40:	bf00      	nop
 800ad42:	371c      	adds	r7, #28
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	fffeff8f 	.word	0xfffeff8f
 800ad50:	40010000 	.word	0x40010000
 800ad54:	40010400 	.word	0x40010400
 800ad58:	40014000 	.word	0x40014000
 800ad5c:	40014400 	.word	0x40014400
 800ad60:	40014800 	.word	0x40014800

0800ad64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0210 	bic.w	r2, r3, #16
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a1b      	ldr	r3, [r3, #32]
 800ad7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	4b34      	ldr	r3, [pc, #208]	; (800ae60 <TIM_OC2_SetConfig+0xfc>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f023 0320 	bic.w	r3, r3, #32
 800adae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	4313      	orrs	r3, r2
 800adba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a29      	ldr	r2, [pc, #164]	; (800ae64 <TIM_OC2_SetConfig+0x100>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_OC2_SetConfig+0x68>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a28      	ldr	r2, [pc, #160]	; (800ae68 <TIM_OC2_SetConfig+0x104>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d10d      	bne.n	800ade8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800add2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	011b      	lsls	r3, r3, #4
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ade6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a1e      	ldr	r2, [pc, #120]	; (800ae64 <TIM_OC2_SetConfig+0x100>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00f      	beq.n	800ae10 <TIM_OC2_SetConfig+0xac>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a1d      	ldr	r2, [pc, #116]	; (800ae68 <TIM_OC2_SetConfig+0x104>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d00b      	beq.n	800ae10 <TIM_OC2_SetConfig+0xac>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a1c      	ldr	r2, [pc, #112]	; (800ae6c <TIM_OC2_SetConfig+0x108>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d007      	beq.n	800ae10 <TIM_OC2_SetConfig+0xac>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <TIM_OC2_SetConfig+0x10c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d003      	beq.n	800ae10 <TIM_OC2_SetConfig+0xac>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a1a      	ldr	r2, [pc, #104]	; (800ae74 <TIM_OC2_SetConfig+0x110>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d113      	bne.n	800ae38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	693a      	ldr	r2, [r7, #16]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	621a      	str	r2, [r3, #32]
}
 800ae52:	bf00      	nop
 800ae54:	371c      	adds	r7, #28
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	feff8fff 	.word	0xfeff8fff
 800ae64:	40010000 	.word	0x40010000
 800ae68:	40010400 	.word	0x40010400
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	40014400 	.word	0x40014400
 800ae74:	40014800 	.word	0x40014800

0800ae78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	4b33      	ldr	r3, [pc, #204]	; (800af70 <TIM_OC3_SetConfig+0xf8>)
 800aea4:	4013      	ands	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	021b      	lsls	r3, r3, #8
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a28      	ldr	r2, [pc, #160]	; (800af74 <TIM_OC3_SetConfig+0xfc>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d003      	beq.n	800aede <TIM_OC3_SetConfig+0x66>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a27      	ldr	r2, [pc, #156]	; (800af78 <TIM_OC3_SetConfig+0x100>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d10d      	bne.n	800aefa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a1d      	ldr	r2, [pc, #116]	; (800af74 <TIM_OC3_SetConfig+0xfc>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00f      	beq.n	800af22 <TIM_OC3_SetConfig+0xaa>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1c      	ldr	r2, [pc, #112]	; (800af78 <TIM_OC3_SetConfig+0x100>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00b      	beq.n	800af22 <TIM_OC3_SetConfig+0xaa>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1b      	ldr	r2, [pc, #108]	; (800af7c <TIM_OC3_SetConfig+0x104>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d007      	beq.n	800af22 <TIM_OC3_SetConfig+0xaa>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1a      	ldr	r2, [pc, #104]	; (800af80 <TIM_OC3_SetConfig+0x108>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d003      	beq.n	800af22 <TIM_OC3_SetConfig+0xaa>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a19      	ldr	r2, [pc, #100]	; (800af84 <TIM_OC3_SetConfig+0x10c>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d113      	bne.n	800af4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	621a      	str	r2, [r3, #32]
}
 800af64:	bf00      	nop
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	fffeff8f 	.word	0xfffeff8f
 800af74:	40010000 	.word	0x40010000
 800af78:	40010400 	.word	0x40010400
 800af7c:	40014000 	.word	0x40014000
 800af80:	40014400 	.word	0x40014400
 800af84:	40014800 	.word	0x40014800

0800af88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <TIM_OC4_SetConfig+0xbc>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	021b      	lsls	r3, r3, #8
 800afc6:	68fa      	ldr	r2, [r7, #12]
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	031b      	lsls	r3, r3, #12
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	4313      	orrs	r3, r2
 800afde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a19      	ldr	r2, [pc, #100]	; (800b048 <TIM_OC4_SetConfig+0xc0>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d00f      	beq.n	800b008 <TIM_OC4_SetConfig+0x80>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a18      	ldr	r2, [pc, #96]	; (800b04c <TIM_OC4_SetConfig+0xc4>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d00b      	beq.n	800b008 <TIM_OC4_SetConfig+0x80>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	4a17      	ldr	r2, [pc, #92]	; (800b050 <TIM_OC4_SetConfig+0xc8>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d007      	beq.n	800b008 <TIM_OC4_SetConfig+0x80>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a16      	ldr	r2, [pc, #88]	; (800b054 <TIM_OC4_SetConfig+0xcc>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d003      	beq.n	800b008 <TIM_OC4_SetConfig+0x80>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a15      	ldr	r2, [pc, #84]	; (800b058 <TIM_OC4_SetConfig+0xd0>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d109      	bne.n	800b01c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b00e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	019b      	lsls	r3, r3, #6
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	4313      	orrs	r3, r2
 800b01a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	621a      	str	r2, [r3, #32]
}
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	feff8fff 	.word	0xfeff8fff
 800b048:	40010000 	.word	0x40010000
 800b04c:	40010400 	.word	0x40010400
 800b050:	40014000 	.word	0x40014000
 800b054:	40014400 	.word	0x40014400
 800b058:	40014800 	.word	0x40014800

0800b05c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b087      	sub	sp, #28
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	4b21      	ldr	r3, [pc, #132]	; (800b10c <TIM_OC5_SetConfig+0xb0>)
 800b088:	4013      	ands	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b09c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	041b      	lsls	r3, r3, #16
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a18      	ldr	r2, [pc, #96]	; (800b110 <TIM_OC5_SetConfig+0xb4>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00f      	beq.n	800b0d2 <TIM_OC5_SetConfig+0x76>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a17      	ldr	r2, [pc, #92]	; (800b114 <TIM_OC5_SetConfig+0xb8>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d00b      	beq.n	800b0d2 <TIM_OC5_SetConfig+0x76>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a16      	ldr	r2, [pc, #88]	; (800b118 <TIM_OC5_SetConfig+0xbc>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d007      	beq.n	800b0d2 <TIM_OC5_SetConfig+0x76>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a15      	ldr	r2, [pc, #84]	; (800b11c <TIM_OC5_SetConfig+0xc0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d003      	beq.n	800b0d2 <TIM_OC5_SetConfig+0x76>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a14      	ldr	r2, [pc, #80]	; (800b120 <TIM_OC5_SetConfig+0xc4>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d109      	bne.n	800b0e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	621a      	str	r2, [r3, #32]
}
 800b100:	bf00      	nop
 800b102:	371c      	adds	r7, #28
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	fffeff8f 	.word	0xfffeff8f
 800b110:	40010000 	.word	0x40010000
 800b114:	40010400 	.word	0x40010400
 800b118:	40014000 	.word	0x40014000
 800b11c:	40014400 	.word	0x40014400
 800b120:	40014800 	.word	0x40014800

0800b124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4b22      	ldr	r3, [pc, #136]	; (800b1d8 <TIM_OC6_SetConfig+0xb4>)
 800b150:	4013      	ands	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	021b      	lsls	r3, r3, #8
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	051b      	lsls	r3, r3, #20
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	4313      	orrs	r3, r2
 800b172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a19      	ldr	r2, [pc, #100]	; (800b1dc <TIM_OC6_SetConfig+0xb8>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00f      	beq.n	800b19c <TIM_OC6_SetConfig+0x78>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a18      	ldr	r2, [pc, #96]	; (800b1e0 <TIM_OC6_SetConfig+0xbc>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00b      	beq.n	800b19c <TIM_OC6_SetConfig+0x78>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a17      	ldr	r2, [pc, #92]	; (800b1e4 <TIM_OC6_SetConfig+0xc0>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d007      	beq.n	800b19c <TIM_OC6_SetConfig+0x78>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a16      	ldr	r2, [pc, #88]	; (800b1e8 <TIM_OC6_SetConfig+0xc4>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d003      	beq.n	800b19c <TIM_OC6_SetConfig+0x78>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a15      	ldr	r2, [pc, #84]	; (800b1ec <TIM_OC6_SetConfig+0xc8>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d109      	bne.n	800b1b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	029b      	lsls	r3, r3, #10
 800b1aa:	697a      	ldr	r2, [r7, #20]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	621a      	str	r2, [r3, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	feff8fff 	.word	0xfeff8fff
 800b1dc:	40010000 	.word	0x40010000
 800b1e0:	40010400 	.word	0x40010400
 800b1e4:	40014000 	.word	0x40014000
 800b1e8:	40014400 	.word	0x40014400
 800b1ec:	40014800 	.word	0x40014800

0800b1f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	f023 0201 	bic.w	r2, r3, #1
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b21a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	011b      	lsls	r3, r3, #4
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4313      	orrs	r3, r2
 800b224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f023 030a 	bic.w	r3, r3, #10
 800b22c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	4313      	orrs	r3, r2
 800b234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	621a      	str	r2, [r3, #32]
}
 800b242:	bf00      	nop
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b24e:	b480      	push	{r7}
 800b250:	b087      	sub	sp, #28
 800b252:	af00      	add	r7, sp, #0
 800b254:	60f8      	str	r0, [r7, #12]
 800b256:	60b9      	str	r1, [r7, #8]
 800b258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6a1b      	ldr	r3, [r3, #32]
 800b25e:	f023 0210 	bic.w	r2, r3, #16
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	031b      	lsls	r3, r3, #12
 800b27e:	697a      	ldr	r2, [r7, #20]
 800b280:	4313      	orrs	r3, r2
 800b282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b28a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	011b      	lsls	r3, r3, #4
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	621a      	str	r2, [r3, #32]
}
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <TIM_ITRx_SetConfig+0x38>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	f043 0307 	orr.w	r3, r3, #7
 800b2d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	609a      	str	r2, [r3, #8]
}
 800b2da:	bf00      	nop
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	ffcfff8f 	.word	0xffcfff8f

0800b2ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	021a      	lsls	r2, r3, #8
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	431a      	orrs	r2, r3
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	4313      	orrs	r3, r2
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	4313      	orrs	r3, r2
 800b318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	609a      	str	r2, [r3, #8]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b087      	sub	sp, #28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	f003 031f 	and.w	r3, r3, #31
 800b33e:	2201      	movs	r2, #1
 800b340:	fa02 f303 	lsl.w	r3, r2, r3
 800b344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a1a      	ldr	r2, [r3, #32]
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	43db      	mvns	r3, r3
 800b34e:	401a      	ands	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1a      	ldr	r2, [r3, #32]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f003 031f 	and.w	r3, r3, #31
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	fa01 f303 	lsl.w	r3, r1, r3
 800b364:	431a      	orrs	r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d101      	bne.n	800b390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e06d      	b.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a30      	ldr	r2, [pc, #192]	; (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a2f      	ldr	r2, [pc, #188]	; (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d108      	bne.n	800b3d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a20      	ldr	r2, [pc, #128]	; (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d022      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b402:	d01d      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1d      	ldr	r2, [pc, #116]	; (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d018      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a1c      	ldr	r2, [pc, #112]	; (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d013      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a1a      	ldr	r2, [pc, #104]	; (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00e      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a15      	ldr	r2, [pc, #84]	; (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d009      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a16      	ldr	r2, [pc, #88]	; (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d004      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a15      	ldr	r2, [pc, #84]	; (800b490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d10c      	bne.n	800b45a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	40010000 	.word	0x40010000
 800b47c:	40010400 	.word	0x40010400
 800b480:	40000400 	.word	0x40000400
 800b484:	40000800 	.word	0x40000800
 800b488:	40000c00 	.word	0x40000c00
 800b48c:	40001800 	.word	0x40001800
 800b490:	40014000 	.word	0x40014000

0800b494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b08a      	sub	sp, #40	; 0x28
 800b4d4:	af02      	add	r7, sp, #8
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	603b      	str	r3, [r7, #0]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e6:	2b20      	cmp	r3, #32
 800b4e8:	d17b      	bne.n	800b5e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d002      	beq.n	800b4f6 <HAL_UART_Transmit+0x26>
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d101      	bne.n	800b4fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e074      	b.n	800b5e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2221      	movs	r2, #33	; 0x21
 800b506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b50a:	f7f8 f953 	bl	80037b4 <HAL_GetTick>
 800b50e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	88fa      	ldrh	r2, [r7, #6]
 800b514:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	88fa      	ldrh	r2, [r7, #6]
 800b51c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b528:	d108      	bne.n	800b53c <HAL_UART_Transmit+0x6c>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	61bb      	str	r3, [r7, #24]
 800b53a:	e003      	b.n	800b544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b540:	2300      	movs	r3, #0
 800b542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b544:	e030      	b.n	800b5a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2200      	movs	r2, #0
 800b54e:	2180      	movs	r1, #128	; 0x80
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 fced 	bl	800bf30 <UART_WaitOnFlagUntilTimeout>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d005      	beq.n	800b568 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2220      	movs	r2, #32
 800b560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b564:	2303      	movs	r3, #3
 800b566:	e03d      	b.n	800b5e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10b      	bne.n	800b586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	881b      	ldrh	r3, [r3, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b57c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	3302      	adds	r3, #2
 800b582:	61bb      	str	r3, [r7, #24]
 800b584:	e007      	b.n	800b596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	3301      	adds	r3, #1
 800b594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1c8      	bne.n	800b546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	2140      	movs	r1, #64	; 0x40
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f000 fcb6 	bl	800bf30 <UART_WaitOnFlagUntilTimeout>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d005      	beq.n	800b5d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e006      	b.n	800b5e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e000      	b.n	800b5e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b5e2:	2302      	movs	r3, #2
  }
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b602:	2b20      	cmp	r3, #32
 800b604:	f040 80b5 	bne.w	800b772 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <HAL_UART_Receive+0x28>
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	e0ad      	b.n	800b774 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2222      	movs	r2, #34	; 0x22
 800b624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b62e:	f7f8 f8c1 	bl	80037b4 <HAL_GetTick>
 800b632:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	88fa      	ldrh	r2, [r7, #6]
 800b638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	88fa      	ldrh	r2, [r7, #6]
 800b640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64c:	d10e      	bne.n	800b66c <HAL_UART_Receive+0x80>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <HAL_UART_Receive+0x76>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b65c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b660:	e02d      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	22ff      	movs	r2, #255	; 0xff
 800b666:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b66a:	e028      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10d      	bne.n	800b690 <HAL_UART_Receive+0xa4>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d104      	bne.n	800b686 <HAL_UART_Receive+0x9a>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	22ff      	movs	r2, #255	; 0xff
 800b680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b684:	e01b      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	227f      	movs	r2, #127	; 0x7f
 800b68a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b68e:	e016      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b698:	d10d      	bne.n	800b6b6 <HAL_UART_Receive+0xca>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d104      	bne.n	800b6ac <HAL_UART_Receive+0xc0>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	227f      	movs	r2, #127	; 0x7f
 800b6a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6aa:	e008      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	223f      	movs	r2, #63	; 0x3f
 800b6b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6b4:	e003      	b.n	800b6be <HAL_UART_Receive+0xd2>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6ce:	d108      	bne.n	800b6e2 <HAL_UART_Receive+0xf6>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d104      	bne.n	800b6e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	61bb      	str	r3, [r7, #24]
 800b6e0:	e003      	b.n	800b6ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b6ea:	e036      	b.n	800b75a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2120      	movs	r1, #32
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f000 fc1a 	bl	800bf30 <UART_WaitOnFlagUntilTimeout>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e032      	b.n	800b774 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10c      	bne.n	800b72e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	8a7b      	ldrh	r3, [r7, #18]
 800b71e:	4013      	ands	r3, r2
 800b720:	b29a      	uxth	r2, r3
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	3302      	adds	r3, #2
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	e00c      	b.n	800b748 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	b2da      	uxtb	r2, r3
 800b736:	8a7b      	ldrh	r3, [r7, #18]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	4013      	ands	r3, r2
 800b73c:	b2da      	uxtb	r2, r3
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	3301      	adds	r3, #1
 800b746:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b74e:	b29b      	uxth	r3, r3
 800b750:	3b01      	subs	r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b760:	b29b      	uxth	r3, r3
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1c2      	bne.n	800b6ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2220      	movs	r2, #32
 800b76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	e000      	b.n	800b774 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800b772:	2302      	movs	r3, #2
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b0ba      	sub	sp, #232	; 0xe8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	69db      	ldr	r3, [r3, #28]
 800b78a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b7a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b7a6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b7b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11b      	bne.n	800b7f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7bc:	f003 0320 	and.w	r3, r3, #32
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d015      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b7c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7c8:	f003 0320 	and.w	r3, r3, #32
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b7d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d009      	beq.n	800b7f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8377 	beq.w	800bed4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	4798      	blx	r3
      }
      return;
 800b7ee:	e371      	b.n	800bed4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	f000 8123 	beq.w	800ba40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b7fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b7fe:	4b8d      	ldr	r3, [pc, #564]	; (800ba34 <HAL_UART_IRQHandler+0x2b8>)
 800b800:	4013      	ands	r3, r2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d106      	bne.n	800b814 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b80a:	4b8b      	ldr	r3, [pc, #556]	; (800ba38 <HAL_UART_IRQHandler+0x2bc>)
 800b80c:	4013      	ands	r3, r2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8116 	beq.w	800ba40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d011      	beq.n	800b844 <HAL_UART_IRQHandler+0xc8>
 800b820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00b      	beq.n	800b844 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2201      	movs	r2, #1
 800b832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b83a:	f043 0201 	orr.w	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d011      	beq.n	800b874 <HAL_UART_IRQHandler+0xf8>
 800b850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00b      	beq.n	800b874 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2202      	movs	r2, #2
 800b862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b86a:	f043 0204 	orr.w	r2, r3, #4
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d011      	beq.n	800b8a4 <HAL_UART_IRQHandler+0x128>
 800b880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00b      	beq.n	800b8a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2204      	movs	r2, #4
 800b892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89a:	f043 0202 	orr.w	r2, r3, #2
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a8:	f003 0308 	and.w	r3, r3, #8
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d017      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d105      	bne.n	800b8c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b8bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b8c0:	4b5c      	ldr	r3, [pc, #368]	; (800ba34 <HAL_UART_IRQHandler+0x2b8>)
 800b8c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2208      	movs	r2, #8
 800b8ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8d6:	f043 0208 	orr.w	r2, r3, #8
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d012      	beq.n	800b912 <HAL_UART_IRQHandler+0x196>
 800b8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00c      	beq.n	800b912 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b908:	f043 0220 	orr.w	r2, r3, #32
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f000 82dd 	beq.w	800bed8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b922:	f003 0320 	and.w	r3, r3, #32
 800b926:	2b00      	cmp	r3, #0
 800b928:	d013      	beq.n	800b952 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b92e:	f003 0320 	and.w	r3, r3, #32
 800b932:	2b00      	cmp	r3, #0
 800b934:	d105      	bne.n	800b942 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b93a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d007      	beq.n	800b952 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b966:	2b40      	cmp	r3, #64	; 0x40
 800b968:	d005      	beq.n	800b976 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b96a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b96e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b972:	2b00      	cmp	r3, #0
 800b974:	d054      	beq.n	800ba20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fb42 	bl	800c000 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b986:	2b40      	cmp	r3, #64	; 0x40
 800b988:	d146      	bne.n	800ba18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3308      	adds	r3, #8
 800b990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b998:	e853 3f00 	ldrex	r3, [r3]
 800b99c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b9a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b9b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b9ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b9c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b9ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1d9      	bne.n	800b98a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d017      	beq.n	800ba10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9e6:	4a15      	ldr	r2, [pc, #84]	; (800ba3c <HAL_UART_IRQHandler+0x2c0>)
 800b9e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7f8 fb59 	bl	80040a8 <HAL_DMA_Abort_IT>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d019      	beq.n	800ba30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba0e:	e00f      	b.n	800ba30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 fa77 	bl	800bf04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba16:	e00b      	b.n	800ba30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fa73 	bl	800bf04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba1e:	e007      	b.n	800ba30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fa6f 	bl	800bf04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ba2e:	e253      	b.n	800bed8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba30:	bf00      	nop
    return;
 800ba32:	e251      	b.n	800bed8 <HAL_UART_IRQHandler+0x75c>
 800ba34:	10000001 	.word	0x10000001
 800ba38:	04000120 	.word	0x04000120
 800ba3c:	0800c0cd 	.word	0x0800c0cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	f040 81e7 	bne.w	800be18 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ba4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba4e:	f003 0310 	and.w	r3, r3, #16
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 81e0 	beq.w	800be18 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ba58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5c:	f003 0310 	and.w	r3, r3, #16
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 81d9 	beq.w	800be18 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2210      	movs	r2, #16
 800ba6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba78:	2b40      	cmp	r3, #64	; 0x40
 800ba7a:	f040 8151 	bne.w	800bd20 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a96      	ldr	r2, [pc, #600]	; (800bce0 <HAL_UART_IRQHandler+0x564>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d068      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a93      	ldr	r2, [pc, #588]	; (800bce4 <HAL_UART_IRQHandler+0x568>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d061      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a91      	ldr	r2, [pc, #580]	; (800bce8 <HAL_UART_IRQHandler+0x56c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d05a      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a8e      	ldr	r2, [pc, #568]	; (800bcec <HAL_UART_IRQHandler+0x570>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d053      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a8c      	ldr	r2, [pc, #560]	; (800bcf0 <HAL_UART_IRQHandler+0x574>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d04c      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a89      	ldr	r2, [pc, #548]	; (800bcf4 <HAL_UART_IRQHandler+0x578>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d045      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a87      	ldr	r2, [pc, #540]	; (800bcf8 <HAL_UART_IRQHandler+0x57c>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d03e      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a84      	ldr	r2, [pc, #528]	; (800bcfc <HAL_UART_IRQHandler+0x580>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d037      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a82      	ldr	r2, [pc, #520]	; (800bd00 <HAL_UART_IRQHandler+0x584>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d030      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a7f      	ldr	r2, [pc, #508]	; (800bd04 <HAL_UART_IRQHandler+0x588>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d029      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a7d      	ldr	r2, [pc, #500]	; (800bd08 <HAL_UART_IRQHandler+0x58c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d022      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a7a      	ldr	r2, [pc, #488]	; (800bd0c <HAL_UART_IRQHandler+0x590>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d01b      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a78      	ldr	r2, [pc, #480]	; (800bd10 <HAL_UART_IRQHandler+0x594>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d014      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a75      	ldr	r2, [pc, #468]	; (800bd14 <HAL_UART_IRQHandler+0x598>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d00d      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a73      	ldr	r2, [pc, #460]	; (800bd18 <HAL_UART_IRQHandler+0x59c>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d006      	beq.n	800bb5e <HAL_UART_IRQHandler+0x3e2>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a70      	ldr	r2, [pc, #448]	; (800bd1c <HAL_UART_IRQHandler+0x5a0>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d106      	bne.n	800bb6c <HAL_UART_IRQHandler+0x3f0>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	685b      	ldr	r3, [r3, #4]
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	e005      	b.n	800bb78 <HAL_UART_IRQHandler+0x3fc>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bb7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 81ab 	beq.w	800bedc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb90:	429a      	cmp	r2, r3
 800bb92:	f080 81a3 	bcs.w	800bedc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bb9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbac:	f000 8087 	beq.w	800bcbe <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bbc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bbda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bbde:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bbe6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bbf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d1da      	bne.n	800bbb0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	3308      	adds	r3, #8
 800bc00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc0c:	f023 0301 	bic.w	r3, r3, #1
 800bc10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3308      	adds	r3, #8
 800bc1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e1      	bne.n	800bbfa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3308      	adds	r3, #8
 800bc56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e3      	bne.n	800bc36 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bc8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc8c:	f023 0310 	bic.w	r3, r3, #16
 800bc90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bca0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bca4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bcac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e4      	bne.n	800bc7c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7f7 fed7 	bl	8003a6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2202      	movs	r2, #2
 800bcc2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 f91d 	bl	800bf18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bcde:	e0fd      	b.n	800bedc <HAL_UART_IRQHandler+0x760>
 800bce0:	40020010 	.word	0x40020010
 800bce4:	40020028 	.word	0x40020028
 800bce8:	40020040 	.word	0x40020040
 800bcec:	40020058 	.word	0x40020058
 800bcf0:	40020070 	.word	0x40020070
 800bcf4:	40020088 	.word	0x40020088
 800bcf8:	400200a0 	.word	0x400200a0
 800bcfc:	400200b8 	.word	0x400200b8
 800bd00:	40020410 	.word	0x40020410
 800bd04:	40020428 	.word	0x40020428
 800bd08:	40020440 	.word	0x40020440
 800bd0c:	40020458 	.word	0x40020458
 800bd10:	40020470 	.word	0x40020470
 800bd14:	40020488 	.word	0x40020488
 800bd18:	400204a0 	.word	0x400204a0
 800bd1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	1ad3      	subs	r3, r2, r3
 800bd30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 80cf 	beq.w	800bee0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bd42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	f000 80ca 	beq.w	800bee0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	e853 3f00 	ldrex	r3, [r3]
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	461a      	mov	r2, r3
 800bd6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd76:	e841 2300 	strex	r3, r2, [r1]
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1e4      	bne.n	800bd4c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	3308      	adds	r3, #8
 800bd88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	e853 3f00 	ldrex	r3, [r3]
 800bd90:	623b      	str	r3, [r7, #32]
   return(result);
 800bd92:	6a3a      	ldr	r2, [r7, #32]
 800bd94:	4b55      	ldr	r3, [pc, #340]	; (800beec <HAL_UART_IRQHandler+0x770>)
 800bd96:	4013      	ands	r3, r2
 800bd98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	3308      	adds	r3, #8
 800bda2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bda6:	633a      	str	r2, [r7, #48]	; 0x30
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e3      	bne.n	800bd82 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	e853 3f00 	ldrex	r3, [r3]
 800bdda:	60fb      	str	r3, [r7, #12]
   return(result);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f023 0310 	bic.w	r3, r3, #16
 800bde2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bdf0:	61fb      	str	r3, [r7, #28]
 800bdf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf4:	69b9      	ldr	r1, [r7, #24]
 800bdf6:	69fa      	ldr	r2, [r7, #28]
 800bdf8:	e841 2300 	strex	r3, r2, [r1]
 800bdfc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1e4      	bne.n	800bdce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800be0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f881 	bl	800bf18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be16:	e063      	b.n	800bee0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800be18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00e      	beq.n	800be42 <HAL_UART_IRQHandler+0x6c6>
 800be24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d008      	beq.n	800be42 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800be38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f987 	bl	800c14e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800be40:	e051      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800be42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d014      	beq.n	800be78 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800be4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800be5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be62:	2b00      	cmp	r3, #0
 800be64:	d008      	beq.n	800be78 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d03a      	beq.n	800bee4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	4798      	blx	r3
    }
    return;
 800be76:	e035      	b.n	800bee4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800be78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <HAL_UART_IRQHandler+0x71c>
 800be84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d003      	beq.n	800be98 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f931 	bl	800c0f8 <UART_EndTransmit_IT>
    return;
 800be96:	e026      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d009      	beq.n	800beb8 <HAL_UART_IRQHandler+0x73c>
 800bea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f960 	bl	800c176 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800beb6:	e016      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800beb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d010      	beq.n	800bee6 <HAL_UART_IRQHandler+0x76a>
 800bec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da0c      	bge.n	800bee6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f948 	bl	800c162 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bed2:	e008      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bed4:	bf00      	nop
 800bed6:	e006      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bed8:	bf00      	nop
 800beda:	e004      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bedc:	bf00      	nop
 800bede:	e002      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
      return;
 800bee0:	bf00      	nop
 800bee2:	e000      	b.n	800bee6 <HAL_UART_IRQHandler+0x76a>
    return;
 800bee4:	bf00      	nop
  }
}
 800bee6:	37e8      	adds	r7, #232	; 0xe8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	effffffe 	.word	0xeffffffe

0800bef0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	460b      	mov	r3, r1
 800bf22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf40:	e049      	b.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf48:	d045      	beq.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4a:	f7f7 fc33 	bl	80037b4 <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d302      	bcc.n	800bf60 <UART_WaitOnFlagUntilTimeout+0x30>
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d101      	bne.n	800bf64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e048      	b.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0304 	and.w	r3, r3, #4
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d031      	beq.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	f003 0308 	and.w	r3, r3, #8
 800bf7c:	2b08      	cmp	r3, #8
 800bf7e:	d110      	bne.n	800bfa2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2208      	movs	r2, #8
 800bf86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 f839 	bl	800c000 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2208      	movs	r2, #8
 800bf92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e029      	b.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	69db      	ldr	r3, [r3, #28]
 800bfa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfb0:	d111      	bne.n	800bfd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f81f 	bl	800c000 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e00f      	b.n	800bff6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69da      	ldr	r2, [r3, #28]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	4013      	ands	r3, r2
 800bfe0:	68ba      	ldr	r2, [r7, #8]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	bf0c      	ite	eq
 800bfe6:	2301      	moveq	r3, #1
 800bfe8:	2300      	movne	r3, #0
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	461a      	mov	r2, r3
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d0a6      	beq.n	800bf42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c000:	b480      	push	{r7}
 800c002:	b095      	sub	sp, #84	; 0x54
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	e853 3f00 	ldrex	r3, [r3]
 800c014:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c018:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c01c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c026:	643b      	str	r3, [r7, #64]	; 0x40
 800c028:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c02c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c02e:	e841 2300 	strex	r3, r2, [r1]
 800c032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	2b00      	cmp	r3, #0
 800c038:	d1e6      	bne.n	800c008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	3308      	adds	r3, #8
 800c040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	e853 3f00 	ldrex	r3, [r3]
 800c048:	61fb      	str	r3, [r7, #28]
   return(result);
 800c04a:	69fa      	ldr	r2, [r7, #28]
 800c04c:	4b1e      	ldr	r3, [pc, #120]	; (800c0c8 <UART_EndRxTransfer+0xc8>)
 800c04e:	4013      	ands	r3, r2
 800c050:	64bb      	str	r3, [r7, #72]	; 0x48
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c05a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c05c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1e5      	bne.n	800c03a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c072:	2b01      	cmp	r3, #1
 800c074:	d118      	bne.n	800c0a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	e853 3f00 	ldrex	r3, [r3]
 800c082:	60bb      	str	r3, [r7, #8]
   return(result);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f023 0310 	bic.w	r3, r3, #16
 800c08a:	647b      	str	r3, [r7, #68]	; 0x44
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c094:	61bb      	str	r3, [r7, #24]
 800c096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c098:	6979      	ldr	r1, [r7, #20]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	e841 2300 	strex	r3, r2, [r1]
 800c0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d1e6      	bne.n	800c076 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c0bc:	bf00      	nop
 800c0be:	3754      	adds	r7, #84	; 0x54
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	effffffe 	.word	0xeffffffe

0800c0cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	f7ff ff0a 	bl	800bf04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	e853 3f00 	ldrex	r3, [r3]
 800c10c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c114:	61fb      	str	r3, [r7, #28]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	61bb      	str	r3, [r7, #24]
 800c120:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c122:	6979      	ldr	r1, [r7, #20]
 800c124:	69ba      	ldr	r2, [r7, #24]
 800c126:	e841 2300 	strex	r3, r2, [r1]
 800c12a:	613b      	str	r3, [r7, #16]
   return(result);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1e6      	bne.n	800c100 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2220      	movs	r2, #32
 800c136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2200      	movs	r2, #0
 800c13e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fed5 	bl	800bef0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c146:	bf00      	nop
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c14e:	b480      	push	{r7}
 800c150:	b083      	sub	sp, #12
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c176:	b480      	push	{r7}
 800c178:	b083      	sub	sp, #12
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c17e:	bf00      	nop
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
	...

0800c18c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d121      	bne.n	800c1e2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	4b27      	ldr	r3, [pc, #156]	; (800c240 <FMC_SDRAM_Init+0xb4>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	683a      	ldr	r2, [r7, #0]
 800c1a8:	6851      	ldr	r1, [r2, #4]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	6892      	ldr	r2, [r2, #8]
 800c1ae:	4311      	orrs	r1, r2
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	68d2      	ldr	r2, [r2, #12]
 800c1b4:	4311      	orrs	r1, r2
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	6912      	ldr	r2, [r2, #16]
 800c1ba:	4311      	orrs	r1, r2
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	6952      	ldr	r2, [r2, #20]
 800c1c0:	4311      	orrs	r1, r2
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	6992      	ldr	r2, [r2, #24]
 800c1c6:	4311      	orrs	r1, r2
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	69d2      	ldr	r2, [r2, #28]
 800c1cc:	4311      	orrs	r1, r2
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	6a12      	ldr	r2, [r2, #32]
 800c1d2:	4311      	orrs	r1, r2
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c1d8:	430a      	orrs	r2, r1
 800c1da:	431a      	orrs	r2, r3
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	e026      	b.n	800c230 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	69d9      	ldr	r1, [r3, #28]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	4319      	orrs	r1, r3
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <FMC_SDRAM_Init+0xb4>)
 800c206:	4013      	ands	r3, r2
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	6851      	ldr	r1, [r2, #4]
 800c20c:	683a      	ldr	r2, [r7, #0]
 800c20e:	6892      	ldr	r2, [r2, #8]
 800c210:	4311      	orrs	r1, r2
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	68d2      	ldr	r2, [r2, #12]
 800c216:	4311      	orrs	r1, r2
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	6912      	ldr	r2, [r2, #16]
 800c21c:	4311      	orrs	r1, r2
 800c21e:	683a      	ldr	r2, [r7, #0]
 800c220:	6952      	ldr	r2, [r2, #20]
 800c222:	4311      	orrs	r1, r2
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	6992      	ldr	r2, [r2, #24]
 800c228:	430a      	orrs	r2, r1
 800c22a:	431a      	orrs	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
 800c23e:	bf00      	nop
 800c240:	ffff8000 	.word	0xffff8000

0800c244 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d128      	bne.n	800c2a8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	1e59      	subs	r1, r3, #1
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	3b01      	subs	r3, #1
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	4319      	orrs	r1, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	3b01      	subs	r3, #1
 800c274:	021b      	lsls	r3, r3, #8
 800c276:	4319      	orrs	r1, r3
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	031b      	lsls	r3, r3, #12
 800c280:	4319      	orrs	r1, r3
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	3b01      	subs	r3, #1
 800c288:	041b      	lsls	r3, r3, #16
 800c28a:	4319      	orrs	r1, r3
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	3b01      	subs	r3, #1
 800c292:	051b      	lsls	r3, r3, #20
 800c294:	4319      	orrs	r1, r3
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	061b      	lsls	r3, r3, #24
 800c29e:	430b      	orrs	r3, r1
 800c2a0:	431a      	orrs	r2, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	609a      	str	r2, [r3, #8]
 800c2a6:	e02d      	b.n	800c304 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	4b19      	ldr	r3, [pc, #100]	; (800c314 <FMC_SDRAM_Timing_Init+0xd0>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	68d2      	ldr	r2, [r2, #12]
 800c2b4:	3a01      	subs	r2, #1
 800c2b6:	0311      	lsls	r1, r2, #12
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	6952      	ldr	r2, [r2, #20]
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	0512      	lsls	r2, r2, #20
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	1e59      	subs	r1, r3, #1
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	011b      	lsls	r3, r3, #4
 800c2de:	4319      	orrs	r1, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	021b      	lsls	r3, r3, #8
 800c2e8:	4319      	orrs	r1, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	041b      	lsls	r3, r3, #16
 800c2f2:	4319      	orrs	r1, r3
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	061b      	lsls	r3, r3, #24
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	431a      	orrs	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3714      	adds	r7, #20
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	ff0f0fff 	.word	0xff0f0fff

0800c318 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	691a      	ldr	r2, [r3, #16]
 800c328:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <FMC_SDRAM_SendCommand+0x44>)
 800c32a:	4013      	ands	r3, r2
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	6811      	ldr	r1, [r2, #0]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	6852      	ldr	r2, [r2, #4]
 800c334:	4311      	orrs	r1, r2
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	6892      	ldr	r2, [r2, #8]
 800c33a:	3a01      	subs	r2, #1
 800c33c:	0152      	lsls	r2, r2, #5
 800c33e:	4311      	orrs	r1, r2
 800c340:	68ba      	ldr	r2, [r7, #8]
 800c342:	68d2      	ldr	r2, [r2, #12]
 800c344:	0252      	lsls	r2, r2, #9
 800c346:	430a      	orrs	r2, r1
 800c348:	431a      	orrs	r2, r3
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	ffc00000 	.word	0xffc00000

0800c360 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	695a      	ldr	r2, [r3, #20]
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c370:	4013      	ands	r3, r2
 800c372:	683a      	ldr	r2, [r7, #0]
 800c374:	0052      	lsls	r2, r2, #1
 800c376:	431a      	orrs	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	ffffc001 	.word	0xffffc001

0800c390 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	68fa      	ldr	r2, [r7, #12]
 800c3a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	683a      	ldr	r2, [r7, #0]
 800c3ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	601a      	str	r2, [r3, #0]
}
 800c3cc:	bf00      	nop
 800c3ce:	3714      	adds	r7, #20
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6892      	ldr	r2, [r2, #8]
 800c3ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	6852      	ldr	r2, [r2, #4]
 800c3f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	429a      	cmp	r2, r3
 800c402:	d103      	bne.n	800c40c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	689a      	ldr	r2, [r3, #8]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	1e5a      	subs	r2, r3, #1
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b086      	sub	sp, #24
 800c430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c432:	2300      	movs	r3, #0
 800c434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c436:	4b4f      	ldr	r3, [pc, #316]	; (800c574 <xTaskIncrementTick+0x148>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f040 808f 	bne.w	800c55e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c440:	4b4d      	ldr	r3, [pc, #308]	; (800c578 <xTaskIncrementTick+0x14c>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3301      	adds	r3, #1
 800c446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c448:	4a4b      	ldr	r2, [pc, #300]	; (800c578 <xTaskIncrementTick+0x14c>)
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d120      	bne.n	800c496 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c454:	4b49      	ldr	r3, [pc, #292]	; (800c57c <xTaskIncrementTick+0x150>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00a      	beq.n	800c474 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c462:	f383 8811 	msr	BASEPRI, r3
 800c466:	f3bf 8f6f 	isb	sy
 800c46a:	f3bf 8f4f 	dsb	sy
 800c46e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c470:	bf00      	nop
 800c472:	e7fe      	b.n	800c472 <xTaskIncrementTick+0x46>
 800c474:	4b41      	ldr	r3, [pc, #260]	; (800c57c <xTaskIncrementTick+0x150>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	60fb      	str	r3, [r7, #12]
 800c47a:	4b41      	ldr	r3, [pc, #260]	; (800c580 <xTaskIncrementTick+0x154>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a3f      	ldr	r2, [pc, #252]	; (800c57c <xTaskIncrementTick+0x150>)
 800c480:	6013      	str	r3, [r2, #0]
 800c482:	4a3f      	ldr	r2, [pc, #252]	; (800c580 <xTaskIncrementTick+0x154>)
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6013      	str	r3, [r2, #0]
 800c488:	4b3e      	ldr	r3, [pc, #248]	; (800c584 <xTaskIncrementTick+0x158>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	3301      	adds	r3, #1
 800c48e:	4a3d      	ldr	r2, [pc, #244]	; (800c584 <xTaskIncrementTick+0x158>)
 800c490:	6013      	str	r3, [r2, #0]
 800c492:	f000 f8e3 	bl	800c65c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c496:	4b3c      	ldr	r3, [pc, #240]	; (800c588 <xTaskIncrementTick+0x15c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d349      	bcc.n	800c534 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4a0:	4b36      	ldr	r3, [pc, #216]	; (800c57c <xTaskIncrementTick+0x150>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d104      	bne.n	800c4b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4aa:	4b37      	ldr	r3, [pc, #220]	; (800c588 <xTaskIncrementTick+0x15c>)
 800c4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4b0:	601a      	str	r2, [r3, #0]
					break;
 800c4b2:	e03f      	b.n	800c534 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4b4:	4b31      	ldr	r3, [pc, #196]	; (800c57c <xTaskIncrementTick+0x150>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d203      	bcs.n	800c4d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4cc:	4a2e      	ldr	r2, [pc, #184]	; (800c588 <xTaskIncrementTick+0x15c>)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4d2:	e02f      	b.n	800c534 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7ff ff7d 	bl	800c3d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d004      	beq.n	800c4f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	3318      	adds	r3, #24
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff ff74 	bl	800c3d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f4:	4b25      	ldr	r3, [pc, #148]	; (800c58c <xTaskIncrementTick+0x160>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d903      	bls.n	800c504 <xTaskIncrementTick+0xd8>
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	4a22      	ldr	r2, [pc, #136]	; (800c58c <xTaskIncrementTick+0x160>)
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c508:	4613      	mov	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	4a1f      	ldr	r2, [pc, #124]	; (800c590 <xTaskIncrementTick+0x164>)
 800c512:	441a      	add	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	3304      	adds	r3, #4
 800c518:	4619      	mov	r1, r3
 800c51a:	4610      	mov	r0, r2
 800c51c:	f7ff ff38 	bl	800c390 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c524:	4b1b      	ldr	r3, [pc, #108]	; (800c594 <xTaskIncrementTick+0x168>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d3b8      	bcc.n	800c4a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c52e:	2301      	movs	r3, #1
 800c530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c532:	e7b5      	b.n	800c4a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c534:	4b17      	ldr	r3, [pc, #92]	; (800c594 <xTaskIncrementTick+0x168>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	4915      	ldr	r1, [pc, #84]	; (800c590 <xTaskIncrementTick+0x164>)
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	440b      	add	r3, r1
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d901      	bls.n	800c550 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c54c:	2301      	movs	r3, #1
 800c54e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c550:	4b11      	ldr	r3, [pc, #68]	; (800c598 <xTaskIncrementTick+0x16c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d007      	beq.n	800c568 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c558:	2301      	movs	r3, #1
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	e004      	b.n	800c568 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c55e:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <xTaskIncrementTick+0x170>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	4a0d      	ldr	r2, [pc, #52]	; (800c59c <xTaskIncrementTick+0x170>)
 800c566:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c568:	697b      	ldr	r3, [r7, #20]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	24001504 	.word	0x24001504
 800c578:	240014e8 	.word	0x240014e8
 800c57c:	240014e0 	.word	0x240014e0
 800c580:	240014e4 	.word	0x240014e4
 800c584:	240014fc 	.word	0x240014fc
 800c588:	24001500 	.word	0x24001500
 800c58c:	240014ec 	.word	0x240014ec
 800c590:	24001080 	.word	0x24001080
 800c594:	2400107c 	.word	0x2400107c
 800c598:	240014f8 	.word	0x240014f8
 800c59c:	240014f4 	.word	0x240014f4

0800c5a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5a6:	4b28      	ldr	r3, [pc, #160]	; (800c648 <vTaskSwitchContext+0xa8>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5ae:	4b27      	ldr	r3, [pc, #156]	; (800c64c <vTaskSwitchContext+0xac>)
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5b4:	e041      	b.n	800c63a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c5b6:	4b25      	ldr	r3, [pc, #148]	; (800c64c <vTaskSwitchContext+0xac>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5bc:	4b24      	ldr	r3, [pc, #144]	; (800c650 <vTaskSwitchContext+0xb0>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	e010      	b.n	800c5e6 <vTaskSwitchContext+0x46>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10a      	bne.n	800c5e0 <vTaskSwitchContext+0x40>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	607b      	str	r3, [r7, #4]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <vTaskSwitchContext+0x3e>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	491b      	ldr	r1, [pc, #108]	; (800c654 <vTaskSwitchContext+0xb4>)
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	009b      	lsls	r3, r3, #2
 800c5ee:	4413      	add	r3, r2
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	440b      	add	r3, r1
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0e4      	beq.n	800c5c4 <vTaskSwitchContext+0x24>
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4a13      	ldr	r2, [pc, #76]	; (800c654 <vTaskSwitchContext+0xb4>)
 800c606:	4413      	add	r3, r2
 800c608:	60bb      	str	r3, [r7, #8]
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	605a      	str	r2, [r3, #4]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	3308      	adds	r3, #8
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d104      	bne.n	800c62a <vTaskSwitchContext+0x8a>
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	605a      	str	r2, [r3, #4]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	4a09      	ldr	r2, [pc, #36]	; (800c658 <vTaskSwitchContext+0xb8>)
 800c632:	6013      	str	r3, [r2, #0]
 800c634:	4a06      	ldr	r2, [pc, #24]	; (800c650 <vTaskSwitchContext+0xb0>)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6013      	str	r3, [r2, #0]
}
 800c63a:	bf00      	nop
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	24001504 	.word	0x24001504
 800c64c:	240014f8 	.word	0x240014f8
 800c650:	240014ec 	.word	0x240014ec
 800c654:	24001080 	.word	0x24001080
 800c658:	2400107c 	.word	0x2400107c

0800c65c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c662:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <prvResetNextTaskUnblockTime+0x38>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d104      	bne.n	800c676 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <prvResetNextTaskUnblockTime+0x3c>)
 800c66e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c672:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c674:	e008      	b.n	800c688 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c676:	4b07      	ldr	r3, [pc, #28]	; (800c694 <prvResetNextTaskUnblockTime+0x38>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	4a04      	ldr	r2, [pc, #16]	; (800c698 <prvResetNextTaskUnblockTime+0x3c>)
 800c686:	6013      	str	r3, [r2, #0]
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	240014e0 	.word	0x240014e0
 800c698:	24001500 	.word	0x24001500

0800c69c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c6a2:	4b0b      	ldr	r3, [pc, #44]	; (800c6d0 <xTaskGetSchedulerState+0x34>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d102      	bne.n	800c6b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	607b      	str	r3, [r7, #4]
 800c6ae:	e008      	b.n	800c6c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6b0:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <xTaskGetSchedulerState+0x38>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	607b      	str	r3, [r7, #4]
 800c6bc:	e001      	b.n	800c6c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6c2:	687b      	ldr	r3, [r7, #4]
	}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	240014f0 	.word	0x240014f0
 800c6d4:	24001504 	.word	0x24001504
	...

0800c6e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	; (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	2400107c 	.word	0x2400107c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
	...

0800c710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c710:	f3ef 8009 	mrs	r0, PSP
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	4b15      	ldr	r3, [pc, #84]	; (800c770 <pxCurrentTCBConst>)
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	f01e 0f10 	tst.w	lr, #16
 800c720:	bf08      	it	eq
 800c722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c72a:	6010      	str	r0, [r2, #0]
 800c72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c734:	f380 8811 	msr	BASEPRI, r0
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f7ff ff2e 	bl	800c5a0 <vTaskSwitchContext>
 800c744:	f04f 0000 	mov.w	r0, #0
 800c748:	f380 8811 	msr	BASEPRI, r0
 800c74c:	bc09      	pop	{r0, r3}
 800c74e:	6819      	ldr	r1, [r3, #0]
 800c750:	6808      	ldr	r0, [r1, #0]
 800c752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c756:	f01e 0f10 	tst.w	lr, #16
 800c75a:	bf08      	it	eq
 800c75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c760:	f380 8809 	msr	PSP, r0
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	f3af 8000 	nop.w

0800c770 <pxCurrentTCBConst>:
 800c770:	2400107c 	.word	0x2400107c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop

0800c778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	607b      	str	r3, [r7, #4]
}
 800c790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c792:	f7ff fe4b 	bl	800c42c <xTaskIncrementTick>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c79c:	4b06      	ldr	r3, [pc, #24]	; (800c7b8 <xPortSysTickHandler+0x40>)
 800c79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <pianoMain>:
long Time_playinf = 0;

static TS_State_t TS_State;

void pianoMain()
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	af00      	add	r7, sp, #0
  BSP_LCD_GetXSize(0, &x_size);
 800c7c0:	490e      	ldr	r1, [pc, #56]	; (800c7fc <pianoMain+0x40>)
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f7f5 fe96 	bl	80024f4 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800c7c8:	490d      	ldr	r1, [pc, #52]	; (800c800 <pianoMain+0x44>)
 800c7ca:	2000      	movs	r0, #0
 800c7cc:	f7f5 feb0 	bl	8002530 <BSP_LCD_GetYSize>

  MX_TIM2_Init();
 800c7d0:	f000 fbc8 	bl	800cf64 <MX_TIM2_Init>

  Draw_Menu();
 800c7d4:	f000 f818 	bl	800c808 <Draw_Menu>

  // define time for random
  Time_playinf = HAL_GetTick();
 800c7d8:	f7f6 ffec 	bl	80037b4 <HAL_GetTick>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	4b08      	ldr	r3, [pc, #32]	; (800c804 <pianoMain+0x48>)
 800c7e2:	601a      	str	r2, [r3, #0]
  while (1)
  {
      if ((HAL_GetTick() - Time_playinf) > 1000)
 800c7e4:	f7f6 ffe6 	bl	80037b4 <HAL_GetTick>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4a06      	ldr	r2, [pc, #24]	; (800c804 <pianoMain+0x48>)
 800c7ec:	6812      	ldr	r2, [r2, #0]
 800c7ee:	1a9b      	subs	r3, r3, r2
 800c7f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7f4:	d9f6      	bls.n	800c7e4 <pianoMain+0x28>
      {
        GetPosition();
 800c7f6:	f000 f907 	bl	800ca08 <GetPosition>
      if ((HAL_GetTick() - Time_playinf) > 1000)
 800c7fa:	e7f3      	b.n	800c7e4 <pianoMain+0x28>
 800c7fc:	24001560 	.word	0x24001560
 800c800:	24001564 	.word	0x24001564
 800c804:	2400156c 	.word	0x2400156c

0800c808 <Draw_Menu>:
  }
}


static void Draw_Menu(void)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af02      	add	r7, sp, #8
  /* Set background Layer */
  UTIL_LCD_SetLayer(0);
 800c80e:	2000      	movs	r0, #0
 800c810:	f7f4 f812 	bl	8000838 <UTIL_LCD_SetLayer>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800c814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c818:	f7f4 f898 	bl	800094c <UTIL_LCD_Clear>

  // border around screen
  UTIL_LCD_DrawRect(0, 0, x_size - 2, 2, UTIL_LCD_COLOR_BLACK);
 800c81c:	4b4b      	ldr	r3, [pc, #300]	; (800c94c <Draw_Menu+0x144>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	1e9a      	subs	r2, r3, #2
 800c822:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	2302      	movs	r3, #2
 800c82a:	2100      	movs	r1, #0
 800c82c:	2000      	movs	r0, #0
 800c82e:	f7f4 f8a3 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(0, 0, 2, y_size, UTIL_LCD_COLOR_BLACK);
 800c832:	4b47      	ldr	r3, [pc, #284]	; (800c950 <Draw_Menu+0x148>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c83a:	9200      	str	r2, [sp, #0]
 800c83c:	2202      	movs	r2, #2
 800c83e:	2100      	movs	r1, #0
 800c840:	2000      	movs	r0, #0
 800c842:	f7f4 f899 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(x_size - 2, 1, 2, y_size, UTIL_LCD_COLOR_BLACK);
 800c846:	4b41      	ldr	r3, [pc, #260]	; (800c94c <Draw_Menu+0x144>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	1e98      	subs	r0, r3, #2
 800c84c:	4b40      	ldr	r3, [pc, #256]	; (800c950 <Draw_Menu+0x148>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800c854:	9200      	str	r2, [sp, #0]
 800c856:	2202      	movs	r2, #2
 800c858:	2101      	movs	r1, #1
 800c85a:	f7f4 f88d 	bl	8000978 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(1, y_size - 2, x_size, 2, UTIL_LCD_COLOR_BLACK);
 800c85e:	4b3c      	ldr	r3, [pc, #240]	; (800c950 <Draw_Menu+0x148>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	1e99      	subs	r1, r3, #2
 800c864:	4b39      	ldr	r3, [pc, #228]	; (800c94c <Draw_Menu+0x144>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	2302      	movs	r3, #2
 800c870:	2001      	movs	r0, #1
 800c872:	f7f4 f881 	bl	8000978 <UTIL_LCD_DrawRect>
 //DRAW KEYS
  x_move = 0;
 800c876:	4b37      	ldr	r3, [pc, #220]	; (800c954 <Draw_Menu+0x14c>)
 800c878:	2200      	movs	r2, #0
 800c87a:	801a      	strh	r2, [r3, #0]
  y_move = 0;
 800c87c:	4b36      	ldr	r3, [pc, #216]	; (800c958 <Draw_Menu+0x150>)
 800c87e:	2200      	movs	r2, #0
 800c880:	801a      	strh	r2, [r3, #0]
  //while (y_move < 11)
  //{
    while (x_move < 11)
 800c882:	e02b      	b.n	800c8dc <Draw_Menu+0xd4>
    {
      // draws a squear
      UTIL_LCD_FillRect(20 + (x_move * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_WHITE);
 800c884:	4b33      	ldr	r3, [pc, #204]	; (800c954 <Draw_Menu+0x14c>)
 800c886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c88a:	461a      	mov	r2, r3
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	3314      	adds	r3, #20
 800c896:	4618      	mov	r0, r3
 800c898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	23ca      	movs	r3, #202	; 0xca
 800c8a0:	2228      	movs	r2, #40	; 0x28
 800c8a2:	212b      	movs	r1, #43	; 0x2b
 800c8a4:	f7f4 f892 	bl	80009cc <UTIL_LCD_FillRect>
      UTIL_LCD_DrawRect(20 + (x_move * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800c8a8:	4b2a      	ldr	r3, [pc, #168]	; (800c954 <Draw_Menu+0x14c>)
 800c8aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	4b27      	ldr	r3, [pc, #156]	; (800c95c <Draw_Menu+0x154>)
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	23ca      	movs	r3, #202	; 0xca
 800c8c2:	2228      	movs	r2, #40	; 0x28
 800c8c4:	212b      	movs	r1, #43	; 0x2b
 800c8c6:	f7f4 f857 	bl	8000978 <UTIL_LCD_DrawRect>
      x_move++;
 800c8ca:	4b22      	ldr	r3, [pc, #136]	; (800c954 <Draw_Menu+0x14c>)
 800c8cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	b21a      	sxth	r2, r3
 800c8d8:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <Draw_Menu+0x14c>)
 800c8da:	801a      	strh	r2, [r3, #0]
    while (x_move < 11)
 800c8dc:	4b1d      	ldr	r3, [pc, #116]	; (800c954 <Draw_Menu+0x14c>)
 800c8de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8e2:	2b0a      	cmp	r3, #10
 800c8e4:	ddce      	ble.n	800c884 <Draw_Menu+0x7c>
    }
    x_move = 0;
 800c8e6:	4b1b      	ldr	r3, [pc, #108]	; (800c954 <Draw_Menu+0x14c>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	801a      	strh	r2, [r3, #0]
    while (x_move < 10)
 800c8ec:	e024      	b.n	800c938 <Draw_Menu+0x130>
        {
    	if(x_move != 3 && x_move!= 6){
 800c8ee:	4b19      	ldr	r3, [pc, #100]	; (800c954 <Draw_Menu+0x14c>)
 800c8f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8f4:	2b03      	cmp	r3, #3
 800c8f6:	d016      	beq.n	800c926 <Draw_Menu+0x11e>
 800c8f8:	4b16      	ldr	r3, [pc, #88]	; (800c954 <Draw_Menu+0x14c>)
 800c8fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8fe:	2b06      	cmp	r3, #6
 800c900:	d011      	beq.n	800c926 <Draw_Menu+0x11e>
    		UTIL_LCD_FillRect(50 + (x_move * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c902:	4b14      	ldr	r3, [pc, #80]	; (800c954 <Draw_Menu+0x14c>)
 800c904:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c908:	461a      	mov	r2, r3
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	3332      	adds	r3, #50	; 0x32
 800c914:	4618      	mov	r0, r3
 800c916:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	2366      	movs	r3, #102	; 0x66
 800c91e:	2219      	movs	r2, #25
 800c920:	212b      	movs	r1, #43	; 0x2b
 800c922:	f7f4 f853 	bl	80009cc <UTIL_LCD_FillRect>
    	}
          x_move++;
 800c926:	4b0b      	ldr	r3, [pc, #44]	; (800c954 <Draw_Menu+0x14c>)
 800c928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	3301      	adds	r3, #1
 800c930:	b29b      	uxth	r3, r3
 800c932:	b21a      	sxth	r2, r3
 800c934:	4b07      	ldr	r3, [pc, #28]	; (800c954 <Draw_Menu+0x14c>)
 800c936:	801a      	strh	r2, [r3, #0]
    while (x_move < 10)
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <Draw_Menu+0x14c>)
 800c93a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c93e:	2b09      	cmp	r3, #9
 800c940:	ddd5      	ble.n	800c8ee <Draw_Menu+0xe6>
        }

}
 800c942:	bf00      	nop
 800c944:	bf00      	nop
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	24001560 	.word	0x24001560
 800c950:	24001564 	.word	0x24001564
 800c954:	24001568 	.word	0x24001568
 800c958:	2400156a 	.word	0x2400156a
 800c95c:	ffd3d3d3 	.word	0xffd3d3d3

0800c960 <reDraw>:

static void reDraw()
{
 800c960:	b580      	push	{r7, lr}
 800c962:	af00      	add	r7, sp, #0
	clean(-1,-1);
 800c964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c96c:	f000 f904 	bl	800cb78 <clean>
}
 800c970:	bf00      	nop
 800c972:	bd80      	pop	{r7, pc}

0800c974 <colorWhite>:
static void colorWhite(int index)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af02      	add	r7, sp, #8
 800c97a:	6078      	str	r0, [r7, #4]

	UTIL_LCD_FillRect(20 + (index * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	4613      	mov	r3, r2
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	4413      	add	r3, r2
 800c984:	00db      	lsls	r3, r3, #3
 800c986:	3314      	adds	r3, #20
 800c988:	4618      	mov	r0, r3
 800c98a:	4b1e      	ldr	r3, [pc, #120]	; (800ca04 <colorWhite+0x90>)
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	23ca      	movs	r3, #202	; 0xca
 800c990:	2228      	movs	r2, #40	; 0x28
 800c992:	212b      	movs	r1, #43	; 0x2b
 800c994:	f7f4 f81a 	bl	80009cc <UTIL_LCD_FillRect>
	if((index) != 3 && (index)!= 6 && (index)<10){
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b03      	cmp	r3, #3
 800c99c:	d014      	beq.n	800c9c8 <colorWhite+0x54>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b06      	cmp	r3, #6
 800c9a2:	d011      	beq.n	800c9c8 <colorWhite+0x54>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b09      	cmp	r3, #9
 800c9a8:	dc0e      	bgt.n	800c9c8 <colorWhite+0x54>
		UTIL_LCD_FillRect(50 + ((index) * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	009b      	lsls	r3, r3, #2
 800c9b0:	4413      	add	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	3332      	adds	r3, #50	; 0x32
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	2366      	movs	r3, #102	; 0x66
 800c9c0:	2219      	movs	r2, #25
 800c9c2:	212b      	movs	r1, #43	; 0x2b
 800c9c4:	f7f4 f802 	bl	80009cc <UTIL_LCD_FillRect>
	}
	if((index-1) != 3 && (index-1) != 6 && (index-1)>=0){
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	d015      	beq.n	800c9fa <colorWhite+0x86>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b07      	cmp	r3, #7
 800c9d2:	d012      	beq.n	800c9fa <colorWhite+0x86>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	dd0f      	ble.n	800c9fa <colorWhite+0x86>
		UTIL_LCD_FillRect(50 + ((index-1)* 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	1e5a      	subs	r2, r3, #1
 800c9de:	4613      	mov	r3, r2
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	3332      	adds	r3, #50	; 0x32
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	2366      	movs	r3, #102	; 0x66
 800c9f2:	2219      	movs	r2, #25
 800c9f4:	212b      	movs	r1, #43	; 0x2b
 800c9f6:	f7f3 ffe9 	bl	80009cc <UTIL_LCD_FillRect>
	}

}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	ffd3d3d3 	.word	0xffd3d3d3

0800ca08 <GetPosition>:
static void GetPosition()
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	af00      	add	r7, sp, #0

  /* Get Touch screen position */
  BSP_TS_GetState(0, &TS_State);
 800ca0c:	4950      	ldr	r1, [pc, #320]	; (800cb50 <GetPosition+0x148>)
 800ca0e:	2000      	movs	r0, #0
 800ca10:	f7f6 fcd2 	bl	80033b8 <BSP_TS_GetState>

  /* Read the coordinate */

  x = TS_State.TouchX;
 800ca14:	4b4e      	ldr	r3, [pc, #312]	; (800cb50 <GetPosition+0x148>)
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	b29a      	uxth	r2, r3
 800ca1a:	4b4e      	ldr	r3, [pc, #312]	; (800cb54 <GetPosition+0x14c>)
 800ca1c:	801a      	strh	r2, [r3, #0]
  y = TS_State.TouchY;
 800ca1e:	4b4c      	ldr	r3, [pc, #304]	; (800cb50 <GetPosition+0x148>)
 800ca20:	689b      	ldr	r3, [r3, #8]
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	4b4c      	ldr	r3, [pc, #304]	; (800cb58 <GetPosition+0x150>)
 800ca26:	801a      	strh	r2, [r3, #0]


  if (!TS_State.TouchDetected)
 800ca28:	4b49      	ldr	r3, [pc, #292]	; (800cb50 <GetPosition+0x148>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d115      	bne.n	800ca5c <GetPosition+0x54>
  {
	if(isPlaing == 1){
 800ca30:	4b4a      	ldr	r3, [pc, #296]	; (800cb5c <GetPosition+0x154>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d10c      	bne.n	800ca52 <GetPosition+0x4a>
		reDraw();
 800ca38:	f7ff ff92 	bl	800c960 <reDraw>
		isPlaing = 0;
 800ca3c:	4b47      	ldr	r3, [pc, #284]	; (800cb5c <GetPosition+0x154>)
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]
		colorPlay=-1;
 800ca42:	4b47      	ldr	r3, [pc, #284]	; (800cb60 <GetPosition+0x158>)
 800ca44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca48:	601a      	str	r2, [r3, #0]
		noteNum=-1;
 800ca4a:	4b46      	ldr	r3, [pc, #280]	; (800cb64 <GetPosition+0x15c>)
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca50:	601a      	str	r2, [r3, #0]
	}
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4); // stop generation of pwm
 800ca52:	210c      	movs	r1, #12
 800ca54:	4844      	ldr	r0, [pc, #272]	; (800cb68 <GetPosition+0x160>)
 800ca56:	f7fd fc67 	bl	800a328 <HAL_TIM_PWM_Stop>
    return;
 800ca5a:	e077      	b.n	800cb4c <GetPosition+0x144>
  }

  Px = x; Py = y;
 800ca5c:	4b3d      	ldr	r3, [pc, #244]	; (800cb54 <GetPosition+0x14c>)
 800ca5e:	881a      	ldrh	r2, [r3, #0]
 800ca60:	4b42      	ldr	r3, [pc, #264]	; (800cb6c <GetPosition+0x164>)
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	4b3c      	ldr	r3, [pc, #240]	; (800cb58 <GetPosition+0x150>)
 800ca66:	881a      	ldrh	r2, [r3, #0]
 800ca68:	4b41      	ldr	r3, [pc, #260]	; (800cb70 <GetPosition+0x168>)
 800ca6a:	801a      	strh	r2, [r3, #0]
  if ((x > 20) && (x < 460) && (y > 43) && (y < 263))
 800ca6c:	4b39      	ldr	r3, [pc, #228]	; (800cb54 <GetPosition+0x14c>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	2b14      	cmp	r3, #20
 800ca72:	d96b      	bls.n	800cb4c <GetPosition+0x144>
 800ca74:	4b37      	ldr	r3, [pc, #220]	; (800cb54 <GetPosition+0x14c>)
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800ca7c:	d266      	bcs.n	800cb4c <GetPosition+0x144>
 800ca7e:	4b36      	ldr	r3, [pc, #216]	; (800cb58 <GetPosition+0x150>)
 800ca80:	881b      	ldrh	r3, [r3, #0]
 800ca82:	2b2b      	cmp	r3, #43	; 0x2b
 800ca84:	d962      	bls.n	800cb4c <GetPosition+0x144>
 800ca86:	4b34      	ldr	r3, [pc, #208]	; (800cb58 <GetPosition+0x150>)
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800ca8e:	d85d      	bhi.n	800cb4c <GetPosition+0x144>
  {
	isPlaing = 1;
 800ca90:	4b32      	ldr	r3, [pc, #200]	; (800cb5c <GetPosition+0x154>)
 800ca92:	2201      	movs	r2, #1
 800ca94:	601a      	str	r2, [r3, #0]
	if(y<140){
 800ca96:	4b30      	ldr	r3, [pc, #192]	; (800cb58 <GetPosition+0x150>)
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	2b8b      	cmp	r3, #139	; 0x8b
 800ca9c:	d830      	bhi.n	800cb00 <GetPosition+0xf8>
		x=x-50;
 800ca9e:	4b2d      	ldr	r3, [pc, #180]	; (800cb54 <GetPosition+0x14c>)
 800caa0:	881b      	ldrh	r3, [r3, #0]
 800caa2:	3b32      	subs	r3, #50	; 0x32
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	4b2b      	ldr	r3, [pc, #172]	; (800cb54 <GetPosition+0x14c>)
 800caa8:	801a      	strh	r2, [r3, #0]
		x=x/40;
 800caaa:	4b2a      	ldr	r3, [pc, #168]	; (800cb54 <GetPosition+0x14c>)
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	4a31      	ldr	r2, [pc, #196]	; (800cb74 <GetPosition+0x16c>)
 800cab0:	fba2 2303 	umull	r2, r3, r2, r3
 800cab4:	095b      	lsrs	r3, r3, #5
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	4b26      	ldr	r3, [pc, #152]	; (800cb54 <GetPosition+0x14c>)
 800caba:	801a      	strh	r2, [r3, #0]
		clean(x,0);
 800cabc:	4b25      	ldr	r3, [pc, #148]	; (800cb54 <GetPosition+0x14c>)
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	b25b      	sxtb	r3, r3
 800cac2:	2100      	movs	r1, #0
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 f857 	bl	800cb78 <clean>
		PlayBlack(x);
 800caca:	4b22      	ldr	r3, [pc, #136]	; (800cb54 <GetPosition+0x14c>)
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	b25b      	sxtb	r3, r3
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f8f5 	bl	800ccc0 <PlayBlack>
		if(x!=3&&x!=6 && x>=0 && x<10){
 800cad6:	4b1f      	ldr	r3, [pc, #124]	; (800cb54 <GetPosition+0x14c>)
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	2b03      	cmp	r3, #3
 800cadc:	d035      	beq.n	800cb4a <GetPosition+0x142>
 800cade:	4b1d      	ldr	r3, [pc, #116]	; (800cb54 <GetPosition+0x14c>)
 800cae0:	881b      	ldrh	r3, [r3, #0]
 800cae2:	2b06      	cmp	r3, #6
 800cae4:	d031      	beq.n	800cb4a <GetPosition+0x142>
 800cae6:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <GetPosition+0x14c>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	2b09      	cmp	r3, #9
 800caec:	d82d      	bhi.n	800cb4a <GetPosition+0x142>
			colorPlay = 0;
 800caee:	4b1c      	ldr	r3, [pc, #112]	; (800cb60 <GetPosition+0x158>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
			noteNum = x;
 800caf4:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <GetPosition+0x14c>)
 800caf6:	881b      	ldrh	r3, [r3, #0]
 800caf8:	461a      	mov	r2, r3
 800cafa:	4b1a      	ldr	r3, [pc, #104]	; (800cb64 <GetPosition+0x15c>)
 800cafc:	601a      	str	r2, [r3, #0]
		}
		return;
 800cafe:	e024      	b.n	800cb4a <GetPosition+0x142>
	}
	x=x-20;
 800cb00:	4b14      	ldr	r3, [pc, #80]	; (800cb54 <GetPosition+0x14c>)
 800cb02:	881b      	ldrh	r3, [r3, #0]
 800cb04:	3b14      	subs	r3, #20
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	4b12      	ldr	r3, [pc, #72]	; (800cb54 <GetPosition+0x14c>)
 800cb0a:	801a      	strh	r2, [r3, #0]
	x=x/40;
 800cb0c:	4b11      	ldr	r3, [pc, #68]	; (800cb54 <GetPosition+0x14c>)
 800cb0e:	881b      	ldrh	r3, [r3, #0]
 800cb10:	4a18      	ldr	r2, [pc, #96]	; (800cb74 <GetPosition+0x16c>)
 800cb12:	fba2 2303 	umull	r2, r3, r2, r3
 800cb16:	095b      	lsrs	r3, r3, #5
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	4b0e      	ldr	r3, [pc, #56]	; (800cb54 <GetPosition+0x14c>)
 800cb1c:	801a      	strh	r2, [r3, #0]
	clean(x,0);
 800cb1e:	4b0d      	ldr	r3, [pc, #52]	; (800cb54 <GetPosition+0x14c>)
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	b25b      	sxtb	r3, r3
 800cb24:	2100      	movs	r1, #0
 800cb26:	4618      	mov	r0, r3
 800cb28:	f000 f826 	bl	800cb78 <clean>
	PlayWhite(x);
 800cb2c:	4b09      	ldr	r3, [pc, #36]	; (800cb54 <GetPosition+0x14c>)
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	b25b      	sxtb	r3, r3
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f95a 	bl	800cdec <PlayWhite>
	colorPlay = 1;
 800cb38:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <GetPosition+0x158>)
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]
	noteNum = x;
 800cb3e:	4b05      	ldr	r3, [pc, #20]	; (800cb54 <GetPosition+0x14c>)
 800cb40:	881b      	ldrh	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <GetPosition+0x15c>)
 800cb46:	601a      	str	r2, [r3, #0]
	return;
 800cb48:	e000      	b.n	800cb4c <GetPosition+0x144>
		return;
 800cb4a:	bf00      	nop
  }

}
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	24001570 	.word	0x24001570
 800cb54:	24001558 	.word	0x24001558
 800cb58:	2400155a 	.word	0x2400155a
 800cb5c:	24001554 	.word	0x24001554
 800cb60:	24000048 	.word	0x24000048
 800cb64:	2400004c 	.word	0x2400004c
 800cb68:	24001508 	.word	0x24001508
 800cb6c:	2400155c 	.word	0x2400155c
 800cb70:	2400155e 	.word	0x2400155e
 800cb74:	cccccccd 	.word	0xcccccccd

0800cb78 <clean>:
static void clean(int8_t x, int col){
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af02      	add	r7, sp, #8
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
	if(colorPlay == -1 &&  noteNum == -1){return;}
 800cb84:	4b4b      	ldr	r3, [pc, #300]	; (800ccb4 <clean+0x13c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb8c:	d105      	bne.n	800cb9a <clean+0x22>
 800cb8e:	4b4a      	ldr	r3, [pc, #296]	; (800ccb8 <clean+0x140>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb96:	f000 8089 	beq.w	800ccac <clean+0x134>
	if(colorPlay != col ||  noteNum != x){
 800cb9a:	4b46      	ldr	r3, [pc, #280]	; (800ccb4 <clean+0x13c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d105      	bne.n	800cbb0 <clean+0x38>
 800cba4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cba8:	4b43      	ldr	r3, [pc, #268]	; (800ccb8 <clean+0x140>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d07e      	beq.n	800ccae <clean+0x136>
		if(colorPlay==0){
 800cbb0:	4b40      	ldr	r3, [pc, #256]	; (800ccb4 <clean+0x13c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d118      	bne.n	800cbea <clean+0x72>
			UTIL_LCD_FillRect(50 + (noteNum * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cbb8:	4b3f      	ldr	r3, [pc, #252]	; (800ccb8 <clean+0x140>)
 800cbba:	681a      	ldr	r2, [r3, #0]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	3332      	adds	r3, #50	; 0x32
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	2366      	movs	r3, #102	; 0x66
 800cbd0:	2219      	movs	r2, #25
 800cbd2:	212b      	movs	r1, #43	; 0x2b
 800cbd4:	f7f3 fefa 	bl	80009cc <UTIL_LCD_FillRect>
			colorPlay=-1;
 800cbd8:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <clean+0x13c>)
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbde:	601a      	str	r2, [r3, #0]
			noteNum=-1;
 800cbe0:	4b35      	ldr	r3, [pc, #212]	; (800ccb8 <clean+0x140>)
 800cbe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbe6:	601a      	str	r2, [r3, #0]
			return;
 800cbe8:	e061      	b.n	800ccae <clean+0x136>
		}
			UTIL_LCD_FillRect(20 + (noteNum * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_WHITE);
 800cbea:	4b33      	ldr	r3, [pc, #204]	; (800ccb8 <clean+0x140>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	00db      	lsls	r3, r3, #3
 800cbf6:	3314      	adds	r3, #20
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	23ca      	movs	r3, #202	; 0xca
 800cc02:	2228      	movs	r2, #40	; 0x28
 800cc04:	212b      	movs	r1, #43	; 0x2b
 800cc06:	f7f3 fee1 	bl	80009cc <UTIL_LCD_FillRect>
			UTIL_LCD_DrawRect(20 + (noteNum * 40), 43 ,40, 2+200, UTIL_LCD_COLOR_LIGHTGRAY);
 800cc0a:	4b2b      	ldr	r3, [pc, #172]	; (800ccb8 <clean+0x140>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	00db      	lsls	r3, r3, #3
 800cc16:	3314      	adds	r3, #20
 800cc18:	4618      	mov	r0, r3
 800cc1a:	4b28      	ldr	r3, [pc, #160]	; (800ccbc <clean+0x144>)
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	23ca      	movs	r3, #202	; 0xca
 800cc20:	2228      	movs	r2, #40	; 0x28
 800cc22:	212b      	movs	r1, #43	; 0x2b
 800cc24:	f7f3 fea8 	bl	8000978 <UTIL_LCD_DrawRect>
			if((noteNum) != 3 && (noteNum)!= 6 && (noteNum)<10){
 800cc28:	4b23      	ldr	r3, [pc, #140]	; (800ccb8 <clean+0x140>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	d017      	beq.n	800cc60 <clean+0xe8>
 800cc30:	4b21      	ldr	r3, [pc, #132]	; (800ccb8 <clean+0x140>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b06      	cmp	r3, #6
 800cc36:	d013      	beq.n	800cc60 <clean+0xe8>
 800cc38:	4b1f      	ldr	r3, [pc, #124]	; (800ccb8 <clean+0x140>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b09      	cmp	r3, #9
 800cc3e:	dc0f      	bgt.n	800cc60 <clean+0xe8>
				UTIL_LCD_FillRect(50 + ((noteNum) * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cc40:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <clean+0x140>)
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	00db      	lsls	r3, r3, #3
 800cc4c:	3332      	adds	r3, #50	; 0x32
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	2366      	movs	r3, #102	; 0x66
 800cc58:	2219      	movs	r2, #25
 800cc5a:	212b      	movs	r1, #43	; 0x2b
 800cc5c:	f7f3 feb6 	bl	80009cc <UTIL_LCD_FillRect>
			}
			if((noteNum-1) != 3 && (noteNum-1) != 6 && (noteNum-1)>=0){
 800cc60:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <clean+0x140>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d018      	beq.n	800cc9a <clean+0x122>
 800cc68:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <clean+0x140>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2b07      	cmp	r3, #7
 800cc6e:	d014      	beq.n	800cc9a <clean+0x122>
 800cc70:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <clean+0x140>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	dd10      	ble.n	800cc9a <clean+0x122>
				UTIL_LCD_FillRect(50 + ((noteNum-1)* 40), 43 ,25, 2+100, UTIL_LCD_COLOR_BLACK);
 800cc78:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <clean+0x140>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	1e5a      	subs	r2, r3, #1
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	3332      	adds	r3, #50	; 0x32
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	2366      	movs	r3, #102	; 0x66
 800cc92:	2219      	movs	r2, #25
 800cc94:	212b      	movs	r1, #43	; 0x2b
 800cc96:	f7f3 fe99 	bl	80009cc <UTIL_LCD_FillRect>
			}
			colorPlay=-1;
 800cc9a:	4b06      	ldr	r3, [pc, #24]	; (800ccb4 <clean+0x13c>)
 800cc9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cca0:	601a      	str	r2, [r3, #0]
			noteNum=-1;
 800cca2:	4b05      	ldr	r3, [pc, #20]	; (800ccb8 <clean+0x140>)
 800cca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e000      	b.n	800ccae <clean+0x136>
	if(colorPlay == -1 &&  noteNum == -1){return;}
 800ccac:	bf00      	nop
	}
}
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	24000048 	.word	0x24000048
 800ccb8:	2400004c 	.word	0x2400004c
 800ccbc:	ffd3d3d3 	.word	0xffd3d3d3

0800ccc0 <PlayBlack>:


static void PlayBlack(int8_t x){
 800ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc2:	b099      	sub	sp, #100	; 0x64
 800ccc4:	af12      	add	r7, sp, #72	; 0x48
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	71fb      	strb	r3, [r7, #7]
	if(x<10 && x != 3 && x != 6)
 800ccca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	dc16      	bgt.n	800cd00 <PlayBlack+0x40>
 800ccd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d012      	beq.n	800cd00 <PlayBlack+0x40>
 800ccda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccde:	2b06      	cmp	r3, #6
 800cce0:	d00e      	beq.n	800cd00 <PlayBlack+0x40>
		UTIL_LCD_FillRect(50 + (x * 40), 43 ,25, 2+100, UTIL_LCD_COLOR_ST_GRAY_LIGHT);
 800cce2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800cce6:	4613      	mov	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4413      	add	r3, r2
 800ccec:	00db      	lsls	r3, r3, #3
 800ccee:	3332      	adds	r3, #50	; 0x32
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	4b3b      	ldr	r3, [pc, #236]	; (800cde0 <PlayBlack+0x120>)
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	2366      	movs	r3, #102	; 0x66
 800ccf8:	2219      	movs	r2, #25
 800ccfa:	212b      	movs	r1, #43	; 0x2b
 800ccfc:	f7f3 fe66 	bl	80009cc <UTIL_LCD_FillRect>
			int ARR_period;
			int NoteFreq;
			int Delaymsecs;
			  switch(x){
 800cd00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd04:	2b09      	cmp	r3, #9
 800cd06:	d866      	bhi.n	800cdd6 <PlayBlack+0x116>
 800cd08:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <PlayBlack+0x50>)
 800cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0e:	bf00      	nop
 800cd10:	0800cd39 	.word	0x0800cd39
 800cd14:	0800cd41 	.word	0x0800cd41
 800cd18:	0800cd49 	.word	0x0800cd49
 800cd1c:	0800cdd7 	.word	0x0800cdd7
 800cd20:	0800cd51 	.word	0x0800cd51
 800cd24:	0800cd59 	.word	0x0800cd59
 800cd28:	0800cdd7 	.word	0x0800cdd7
 800cd2c:	0800cd61 	.word	0x0800cd61
 800cd30:	0800cd69 	.word	0x0800cd69
 800cd34:	0800cd71 	.word	0x0800cd71
			  	 case 0:
			  		NoteFreq = NOTE_FS4;
 800cd38:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800cd3c:	617b      	str	r3, [r7, #20]
			  		break;
 800cd3e:	e01b      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 1:
			  		NoteFreq = NOTE_GS4;
 800cd40:	f240 139f 	movw	r3, #415	; 0x19f
 800cd44:	617b      	str	r3, [r7, #20]
			  		break;
 800cd46:	e017      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 2:
			  		NoteFreq = NOTE_AS4;
 800cd48:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 800cd4c:	617b      	str	r3, [r7, #20]
			  		break;
 800cd4e:	e013      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 4:
			  		NoteFreq = NOTE_CS5;
 800cd50:	f240 232a 	movw	r3, #554	; 0x22a
 800cd54:	617b      	str	r3, [r7, #20]
			  		break;
 800cd56:	e00f      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 5:
			  		NoteFreq = NOTE_DS5;
 800cd58:	f240 236e 	movw	r3, #622	; 0x26e
 800cd5c:	617b      	str	r3, [r7, #20]
			  		break;
 800cd5e:	e00b      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 7:
			  		NoteFreq = NOTE_FS5;
 800cd60:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 800cd64:	617b      	str	r3, [r7, #20]
			  		break;
 800cd66:	e007      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 8:
			  		NoteFreq = NOTE_GS5;
 800cd68:	f240 333f 	movw	r3, #831	; 0x33f
 800cd6c:	617b      	str	r3, [r7, #20]
			  		break;
 800cd6e:	e003      	b.n	800cd78 <PlayBlack+0xb8>
			  	case 9:
			  		NoteFreq = NOTE_AS5;
 800cd70:	f44f 7369 	mov.w	r3, #932	; 0x3a4
 800cd74:	617b      	str	r3, [r7, #20]
			  		break;
 800cd76:	bf00      	nop
			  	default:
			  		return;
			  }
			  			  if (NoteFreq == 0) NoteFreq = 1;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <PlayBlack+0xc2>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	617b      	str	r3, [r7, #20]

			  			  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800cd82:	4a18      	ldr	r2, [pc, #96]	; (800cde4 <PlayBlack+0x124>)
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	fb92 f3f3 	sdiv	r3, r2, r3
 800cd8a:	613b      	str	r3, [r7, #16]
			      		  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da00      	bge.n	800cd98 <PlayBlack+0xd8>
 800cd96:	3301      	adds	r3, #1
 800cd98:	105b      	asrs	r3, r3, #1
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	4e12      	ldr	r6, [pc, #72]	; (800cde8 <PlayBlack+0x128>)
 800cd9e:	9311      	str	r3, [sp, #68]	; 0x44
 800cda0:	9210      	str	r2, [sp, #64]	; 0x40
 800cda2:	230c      	movs	r3, #12
 800cda4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cda6:	466d      	mov	r5, sp
 800cda8:	f106 0410 	add.w	r4, r6, #16
 800cdac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cdb8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cdbc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cdc0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cdc4:	f000 f89e 	bl	800cf04 <setPWM>

			  			  Delaymsecs = 150;
 800cdc8:	2396      	movs	r3, #150	; 0x96
 800cdca:	60fb      	str	r3, [r7, #12]

			  		  	  HAL_Delay(Delaymsecs);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7f6 fcfc 	bl	80037cc <HAL_Delay>
 800cdd4:	e000      	b.n	800cdd8 <PlayBlack+0x118>
			  		return;
 800cdd6:	bf00      	nop


}
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	ffb9c4ca 	.word	0xffb9c4ca
 800cde4:	000f4240 	.word	0x000f4240
 800cde8:	24001508 	.word	0x24001508

0800cdec <PlayWhite>:
static void PlayWhite(int8_t x){
 800cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdee:	b099      	sub	sp, #100	; 0x64
 800cdf0:	af12      	add	r7, sp, #72	; 0x48
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
	colorWhite(x);
 800cdf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff fdba 	bl	800c974 <colorWhite>

		int ARR_period;
		int NoteFreq;
		int Delaymsecs;

		switch(x){
 800ce00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce04:	2b0a      	cmp	r3, #10
 800ce06:	d874      	bhi.n	800cef2 <PlayWhite+0x106>
 800ce08:	a201      	add	r2, pc, #4	; (adr r2, 800ce10 <PlayWhite+0x24>)
 800ce0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0e:	bf00      	nop
 800ce10:	0800ce3d 	.word	0x0800ce3d
 800ce14:	0800ce45 	.word	0x0800ce45
 800ce18:	0800ce4d 	.word	0x0800ce4d
 800ce1c:	0800ce55 	.word	0x0800ce55
 800ce20:	0800ce5d 	.word	0x0800ce5d
 800ce24:	0800ce65 	.word	0x0800ce65
 800ce28:	0800ce6d 	.word	0x0800ce6d
 800ce2c:	0800ce75 	.word	0x0800ce75
 800ce30:	0800ce7d 	.word	0x0800ce7d
 800ce34:	0800ce85 	.word	0x0800ce85
 800ce38:	0800ce8d 	.word	0x0800ce8d
			case 0:
				NoteFreq = NOTE_F4;
 800ce3c:	f240 135d 	movw	r3, #349	; 0x15d
 800ce40:	617b      	str	r3, [r7, #20]
				break;
 800ce42:	e027      	b.n	800ce94 <PlayWhite+0xa8>
			case 1:
				NoteFreq = NOTE_G4;
 800ce44:	f44f 73c4 	mov.w	r3, #392	; 0x188
 800ce48:	617b      	str	r3, [r7, #20]
				break;
 800ce4a:	e023      	b.n	800ce94 <PlayWhite+0xa8>
			case 2:
				NoteFreq = NOTE_A4;
 800ce4c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800ce50:	617b      	str	r3, [r7, #20]
				break;
 800ce52:	e01f      	b.n	800ce94 <PlayWhite+0xa8>
			case 3:
				NoteFreq = NOTE_B4;
 800ce54:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
 800ce58:	617b      	str	r3, [r7, #20]
				break;
 800ce5a:	e01b      	b.n	800ce94 <PlayWhite+0xa8>
			case 4:
				NoteFreq = NOTE_C5;
 800ce5c:	f240 230b 	movw	r3, #523	; 0x20b
 800ce60:	617b      	str	r3, [r7, #20]
				break;
 800ce62:	e017      	b.n	800ce94 <PlayWhite+0xa8>
			case 5:
				NoteFreq = NOTE_D5;
 800ce64:	f240 234b 	movw	r3, #587	; 0x24b
 800ce68:	617b      	str	r3, [r7, #20]
				break;
 800ce6a:	e013      	b.n	800ce94 <PlayWhite+0xa8>
			case 6:
				NoteFreq = NOTE_E5;
 800ce6c:	f240 2393 	movw	r3, #659	; 0x293
 800ce70:	617b      	str	r3, [r7, #20]
				break;
 800ce72:	e00f      	b.n	800ce94 <PlayWhite+0xa8>
			case 7:
				NoteFreq = NOTE_F5;
 800ce74:	f240 23ba 	movw	r3, #698	; 0x2ba
 800ce78:	617b      	str	r3, [r7, #20]
				break;
 800ce7a:	e00b      	b.n	800ce94 <PlayWhite+0xa8>
			case 8:
				NoteFreq = NOTE_G5;
 800ce7c:	f44f 7344 	mov.w	r3, #784	; 0x310
 800ce80:	617b      	str	r3, [r7, #20]
				break;
 800ce82:	e007      	b.n	800ce94 <PlayWhite+0xa8>
			case 9:
				NoteFreq = NOTE_A5;
 800ce84:	f44f 735c 	mov.w	r3, #880	; 0x370
 800ce88:	617b      	str	r3, [r7, #20]
				break;
 800ce8a:	e003      	b.n	800ce94 <PlayWhite+0xa8>
			case 10:
				NoteFreq = NOTE_B5;
 800ce8c:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800ce90:	617b      	str	r3, [r7, #20]
				break;
 800ce92:	bf00      	nop
			default:
				return;
			}

	  if (NoteFreq == 0) NoteFreq = 1;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <PlayWhite+0xb2>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	617b      	str	r3, [r7, #20]

	  ARR_period = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 800ce9e:	4a17      	ldr	r2, [pc, #92]	; (800cefc <PlayWhite+0x110>)
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	fb92 f3f3 	sdiv	r3, r2, r3
 800cea6:	613b      	str	r3, [r7, #16]
	  setPWM(htim2, TIM_CHANNEL_4, ARR_period, ARR_period/2);
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	da00      	bge.n	800ceb4 <PlayWhite+0xc8>
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	105b      	asrs	r3, r3, #1
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	4e11      	ldr	r6, [pc, #68]	; (800cf00 <PlayWhite+0x114>)
 800ceba:	9311      	str	r3, [sp, #68]	; 0x44
 800cebc:	9210      	str	r2, [sp, #64]	; 0x40
 800cebe:	230c      	movs	r3, #12
 800cec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cec2:	466d      	mov	r5, sp
 800cec4:	f106 0410 	add.w	r4, r6, #16
 800cec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ceca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ced0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ced2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ced4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ced8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800cedc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800cee0:	f000 f810 	bl	800cf04 <setPWM>

	  Delaymsecs = 150;
 800cee4:	2396      	movs	r3, #150	; 0x96
 800cee6:	60fb      	str	r3, [r7, #12]
  	  HAL_Delay(Delaymsecs);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7f6 fc6e 	bl	80037cc <HAL_Delay>
 800cef0:	e000      	b.n	800cef4 <PlayWhite+0x108>
				return;
 800cef2:	bf00      	nop
}
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefa:	bf00      	nop
 800cefc:	000f4240 	.word	0x000f4240
 800cf00:	24001508 	.word	0x24001508

0800cf04 <setPWM>:

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 800cf04:	b084      	sub	sp, #16
 800cf06:	b580      	push	{r7, lr}
 800cf08:	b088      	sub	sp, #32
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800cf10:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800cf14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf16:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf1a:	f7fd fa05 	bl	800a328 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 800cf1e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800cf22:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800cf24:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf28:	f7fd f828 	bl	8009f7c <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cf2c:	2360      	movs	r3, #96	; 0x60
 800cf2e:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 800cf30:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800cf34:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800cf3e:	1d3b      	adds	r3, r7, #4
 800cf40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800cf42:	4619      	mov	r1, r3
 800cf44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf48:	f7fd fba4 	bl	800a694 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 800cf4c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800cf4e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf52:	f7fd f8db 	bl	800a10c <HAL_TIM_PWM_Start>
}
 800cf56:	bf00      	nop
 800cf58:	3720      	adds	r7, #32
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf60:	b004      	add	sp, #16
 800cf62:	4770      	bx	lr

0800cf64 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b08e      	sub	sp, #56	; 0x38
 800cf68:	af00      	add	r7, sp, #0
	 /* USER CODE BEGIN TIM2_Init 0 */

	  /* USER CODE END TIM2_Init 0 */

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]
 800cf72:	605a      	str	r2, [r3, #4]
 800cf74:	609a      	str	r2, [r3, #8]
 800cf76:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf78:	f107 031c 	add.w	r3, r7, #28
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	609a      	str	r2, [r3, #8]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800cf84:	463b      	mov	r3, r7
 800cf86:	2200      	movs	r2, #0
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	605a      	str	r2, [r3, #4]
 800cf8c:	609a      	str	r2, [r3, #8]
 800cf8e:	60da      	str	r2, [r3, #12]
 800cf90:	611a      	str	r2, [r3, #16]
 800cf92:	615a      	str	r2, [r3, #20]
 800cf94:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM2_Init 1 */

	  /* USER CODE END TIM2_Init 1 */
	  htim2.Instance = TIM2;
 800cf96:	4b2d      	ldr	r3, [pc, #180]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cf98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf9c:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 63;
 800cf9e:	4b2b      	ldr	r3, [pc, #172]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfa0:	223f      	movs	r2, #63	; 0x3f
 800cfa2:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cfa4:	4b29      	ldr	r3, [pc, #164]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 4294967295;
 800cfaa:	4b28      	ldr	r3, [pc, #160]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfb0:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cfb2:	4b26      	ldr	r3, [pc, #152]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cfb8:	4b24      	ldr	r3, [pc, #144]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800cfbe:	4823      	ldr	r0, [pc, #140]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfc0:	f7fc ff85 	bl	8009ece <HAL_TIM_Base_Init>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <MX_TIM2_Init+0x6a>
	  {
	    Error_Handler();
 800cfca:	f7f3 fb29 	bl	8000620 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cfce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfd2:	62bb      	str	r3, [r7, #40]	; 0x28
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800cfd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfd8:	4619      	mov	r1, r3
 800cfda:	481c      	ldr	r0, [pc, #112]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfdc:	f7fd fc6e 	bl	800a8bc <HAL_TIM_ConfigClockSource>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <MX_TIM2_Init+0x86>
	  {
	    Error_Handler();
 800cfe6:	f7f3 fb1b 	bl	8000620 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800cfea:	4818      	ldr	r0, [pc, #96]	; (800d04c <MX_TIM2_Init+0xe8>)
 800cfec:	f7fc ffc6 	bl	8009f7c <HAL_TIM_PWM_Init>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <MX_TIM2_Init+0x96>
	  {
	    Error_Handler();
 800cff6:	f7f3 fb13 	bl	8000620 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cffa:	2300      	movs	r3, #0
 800cffc:	61fb      	str	r3, [r7, #28]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cffe:	2300      	movs	r3, #0
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d002:	f107 031c 	add.w	r3, r7, #28
 800d006:	4619      	mov	r1, r3
 800d008:	4810      	ldr	r0, [pc, #64]	; (800d04c <MX_TIM2_Init+0xe8>)
 800d00a:	f7fe f9b5 	bl	800b378 <HAL_TIMEx_MasterConfigSynchronization>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <MX_TIM2_Init+0xb4>
	  {
	    Error_Handler();
 800d014:	f7f3 fb04 	bl	8000620 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d018:	2360      	movs	r3, #96	; 0x60
 800d01a:	603b      	str	r3, [r7, #0]
	  sConfigOC.Pulse = 0;
 800d01c:	2300      	movs	r3, #0
 800d01e:	607b      	str	r3, [r7, #4]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d020:	2300      	movs	r3, #0
 800d022:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d024:	2300      	movs	r3, #0
 800d026:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d028:	463b      	mov	r3, r7
 800d02a:	220c      	movs	r2, #12
 800d02c:	4619      	mov	r1, r3
 800d02e:	4807      	ldr	r0, [pc, #28]	; (800d04c <MX_TIM2_Init+0xe8>)
 800d030:	f7fd fb30 	bl	800a694 <HAL_TIM_PWM_ConfigChannel>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d001      	beq.n	800d03e <MX_TIM2_Init+0xda>
	  {
	    Error_Handler();
 800d03a:	f7f3 faf1 	bl	8000620 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM2_Init 2 */

	  /* USER CODE END TIM2_Init 2 */
	  HAL_TIM_MspPostInit(&htim2);
 800d03e:	4803      	ldr	r0, [pc, #12]	; (800d04c <MX_TIM2_Init+0xe8>)
 800d040:	f7f3 fd5c 	bl	8000afc <HAL_TIM_MspPostInit>


}
 800d044:	bf00      	nop
 800d046:	3738      	adds	r7, #56	; 0x38
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	24001508 	.word	0x24001508

0800d050 <__errno>:
 800d050:	4b01      	ldr	r3, [pc, #4]	; (800d058 <__errno+0x8>)
 800d052:	6818      	ldr	r0, [r3, #0]
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	24000050 	.word	0x24000050

0800d05c <__libc_init_array>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	4d0d      	ldr	r5, [pc, #52]	; (800d094 <__libc_init_array+0x38>)
 800d060:	4c0d      	ldr	r4, [pc, #52]	; (800d098 <__libc_init_array+0x3c>)
 800d062:	1b64      	subs	r4, r4, r5
 800d064:	10a4      	asrs	r4, r4, #2
 800d066:	2600      	movs	r6, #0
 800d068:	42a6      	cmp	r6, r4
 800d06a:	d109      	bne.n	800d080 <__libc_init_array+0x24>
 800d06c:	4d0b      	ldr	r5, [pc, #44]	; (800d09c <__libc_init_array+0x40>)
 800d06e:	4c0c      	ldr	r4, [pc, #48]	; (800d0a0 <__libc_init_array+0x44>)
 800d070:	f001 f87c 	bl	800e16c <_init>
 800d074:	1b64      	subs	r4, r4, r5
 800d076:	10a4      	asrs	r4, r4, #2
 800d078:	2600      	movs	r6, #0
 800d07a:	42a6      	cmp	r6, r4
 800d07c:	d105      	bne.n	800d08a <__libc_init_array+0x2e>
 800d07e:	bd70      	pop	{r4, r5, r6, pc}
 800d080:	f855 3b04 	ldr.w	r3, [r5], #4
 800d084:	4798      	blx	r3
 800d086:	3601      	adds	r6, #1
 800d088:	e7ee      	b.n	800d068 <__libc_init_array+0xc>
 800d08a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d08e:	4798      	blx	r3
 800d090:	3601      	adds	r6, #1
 800d092:	e7f2      	b.n	800d07a <__libc_init_array+0x1e>
 800d094:	0800e394 	.word	0x0800e394
 800d098:	0800e394 	.word	0x0800e394
 800d09c:	0800e394 	.word	0x0800e394
 800d0a0:	0800e398 	.word	0x0800e398

0800d0a4 <memset>:
 800d0a4:	4402      	add	r2, r0
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d100      	bne.n	800d0ae <memset+0xa>
 800d0ac:	4770      	bx	lr
 800d0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d0b2:	e7f9      	b.n	800d0a8 <memset+0x4>

0800d0b4 <srand>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4b10      	ldr	r3, [pc, #64]	; (800d0f8 <srand+0x44>)
 800d0b8:	681d      	ldr	r5, [r3, #0]
 800d0ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d0bc:	4604      	mov	r4, r0
 800d0be:	b9b3      	cbnz	r3, 800d0ee <srand+0x3a>
 800d0c0:	2018      	movs	r0, #24
 800d0c2:	f000 faa1 	bl	800d608 <malloc>
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	63a8      	str	r0, [r5, #56]	; 0x38
 800d0ca:	b920      	cbnz	r0, 800d0d6 <srand+0x22>
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <srand+0x48>)
 800d0ce:	480c      	ldr	r0, [pc, #48]	; (800d100 <srand+0x4c>)
 800d0d0:	2142      	movs	r1, #66	; 0x42
 800d0d2:	f000 f837 	bl	800d144 <__assert_func>
 800d0d6:	490b      	ldr	r1, [pc, #44]	; (800d104 <srand+0x50>)
 800d0d8:	4b0b      	ldr	r3, [pc, #44]	; (800d108 <srand+0x54>)
 800d0da:	e9c0 1300 	strd	r1, r3, [r0]
 800d0de:	4b0b      	ldr	r3, [pc, #44]	; (800d10c <srand+0x58>)
 800d0e0:	6083      	str	r3, [r0, #8]
 800d0e2:	230b      	movs	r3, #11
 800d0e4:	8183      	strh	r3, [r0, #12]
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	2001      	movs	r0, #1
 800d0ea:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d0ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	611c      	str	r4, [r3, #16]
 800d0f4:	615a      	str	r2, [r3, #20]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	24000050 	.word	0x24000050
 800d0fc:	0800e250 	.word	0x0800e250
 800d100:	0800e267 	.word	0x0800e267
 800d104:	abcd330e 	.word	0xabcd330e
 800d108:	e66d1234 	.word	0xe66d1234
 800d10c:	0005deec 	.word	0x0005deec

0800d110 <time>:
 800d110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d112:	4b0b      	ldr	r3, [pc, #44]	; (800d140 <time+0x30>)
 800d114:	2200      	movs	r2, #0
 800d116:	4669      	mov	r1, sp
 800d118:	4604      	mov	r4, r0
 800d11a:	6818      	ldr	r0, [r3, #0]
 800d11c:	f000 f9fa 	bl	800d514 <_gettimeofday_r>
 800d120:	2800      	cmp	r0, #0
 800d122:	bfbe      	ittt	lt
 800d124:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800d128:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d12c:	e9cd 2300 	strdlt	r2, r3, [sp]
 800d130:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d134:	b10c      	cbz	r4, 800d13a <time+0x2a>
 800d136:	e9c4 0100 	strd	r0, r1, [r4]
 800d13a:	b004      	add	sp, #16
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	bf00      	nop
 800d140:	24000050 	.word	0x24000050

0800d144 <__assert_func>:
 800d144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d146:	4614      	mov	r4, r2
 800d148:	461a      	mov	r2, r3
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <__assert_func+0x2c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4605      	mov	r5, r0
 800d150:	68d8      	ldr	r0, [r3, #12]
 800d152:	b14c      	cbz	r4, 800d168 <__assert_func+0x24>
 800d154:	4b07      	ldr	r3, [pc, #28]	; (800d174 <__assert_func+0x30>)
 800d156:	9100      	str	r1, [sp, #0]
 800d158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d15c:	4906      	ldr	r1, [pc, #24]	; (800d178 <__assert_func+0x34>)
 800d15e:	462b      	mov	r3, r5
 800d160:	f000 f9a6 	bl	800d4b0 <fiprintf>
 800d164:	f000 ff4c 	bl	800e000 <abort>
 800d168:	4b04      	ldr	r3, [pc, #16]	; (800d17c <__assert_func+0x38>)
 800d16a:	461c      	mov	r4, r3
 800d16c:	e7f3      	b.n	800d156 <__assert_func+0x12>
 800d16e:	bf00      	nop
 800d170:	24000050 	.word	0x24000050
 800d174:	0800e2c2 	.word	0x0800e2c2
 800d178:	0800e2cf 	.word	0x0800e2cf
 800d17c:	0800e2fd 	.word	0x0800e2fd

0800d180 <__sflush_r>:
 800d180:	898a      	ldrh	r2, [r1, #12]
 800d182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d186:	4605      	mov	r5, r0
 800d188:	0710      	lsls	r0, r2, #28
 800d18a:	460c      	mov	r4, r1
 800d18c:	d458      	bmi.n	800d240 <__sflush_r+0xc0>
 800d18e:	684b      	ldr	r3, [r1, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	dc05      	bgt.n	800d1a0 <__sflush_r+0x20>
 800d194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d196:	2b00      	cmp	r3, #0
 800d198:	dc02      	bgt.n	800d1a0 <__sflush_r+0x20>
 800d19a:	2000      	movs	r0, #0
 800d19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1a2:	2e00      	cmp	r6, #0
 800d1a4:	d0f9      	beq.n	800d19a <__sflush_r+0x1a>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1ac:	682f      	ldr	r7, [r5, #0]
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	d032      	beq.n	800d218 <__sflush_r+0x98>
 800d1b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	075a      	lsls	r2, r3, #29
 800d1b8:	d505      	bpl.n	800d1c6 <__sflush_r+0x46>
 800d1ba:	6863      	ldr	r3, [r4, #4]
 800d1bc:	1ac0      	subs	r0, r0, r3
 800d1be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1c0:	b10b      	cbz	r3, 800d1c6 <__sflush_r+0x46>
 800d1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1c4:	1ac0      	subs	r0, r0, r3
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1cc:	6a21      	ldr	r1, [r4, #32]
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	47b0      	blx	r6
 800d1d2:	1c43      	adds	r3, r0, #1
 800d1d4:	89a3      	ldrh	r3, [r4, #12]
 800d1d6:	d106      	bne.n	800d1e6 <__sflush_r+0x66>
 800d1d8:	6829      	ldr	r1, [r5, #0]
 800d1da:	291d      	cmp	r1, #29
 800d1dc:	d82c      	bhi.n	800d238 <__sflush_r+0xb8>
 800d1de:	4a2a      	ldr	r2, [pc, #168]	; (800d288 <__sflush_r+0x108>)
 800d1e0:	40ca      	lsrs	r2, r1
 800d1e2:	07d6      	lsls	r6, r2, #31
 800d1e4:	d528      	bpl.n	800d238 <__sflush_r+0xb8>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	6062      	str	r2, [r4, #4]
 800d1ea:	04d9      	lsls	r1, r3, #19
 800d1ec:	6922      	ldr	r2, [r4, #16]
 800d1ee:	6022      	str	r2, [r4, #0]
 800d1f0:	d504      	bpl.n	800d1fc <__sflush_r+0x7c>
 800d1f2:	1c42      	adds	r2, r0, #1
 800d1f4:	d101      	bne.n	800d1fa <__sflush_r+0x7a>
 800d1f6:	682b      	ldr	r3, [r5, #0]
 800d1f8:	b903      	cbnz	r3, 800d1fc <__sflush_r+0x7c>
 800d1fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1fe:	602f      	str	r7, [r5, #0]
 800d200:	2900      	cmp	r1, #0
 800d202:	d0ca      	beq.n	800d19a <__sflush_r+0x1a>
 800d204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d208:	4299      	cmp	r1, r3
 800d20a:	d002      	beq.n	800d212 <__sflush_r+0x92>
 800d20c:	4628      	mov	r0, r5
 800d20e:	f000 fa03 	bl	800d618 <_free_r>
 800d212:	2000      	movs	r0, #0
 800d214:	6360      	str	r0, [r4, #52]	; 0x34
 800d216:	e7c1      	b.n	800d19c <__sflush_r+0x1c>
 800d218:	6a21      	ldr	r1, [r4, #32]
 800d21a:	2301      	movs	r3, #1
 800d21c:	4628      	mov	r0, r5
 800d21e:	47b0      	blx	r6
 800d220:	1c41      	adds	r1, r0, #1
 800d222:	d1c7      	bne.n	800d1b4 <__sflush_r+0x34>
 800d224:	682b      	ldr	r3, [r5, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d0c4      	beq.n	800d1b4 <__sflush_r+0x34>
 800d22a:	2b1d      	cmp	r3, #29
 800d22c:	d001      	beq.n	800d232 <__sflush_r+0xb2>
 800d22e:	2b16      	cmp	r3, #22
 800d230:	d101      	bne.n	800d236 <__sflush_r+0xb6>
 800d232:	602f      	str	r7, [r5, #0]
 800d234:	e7b1      	b.n	800d19a <__sflush_r+0x1a>
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d23c:	81a3      	strh	r3, [r4, #12]
 800d23e:	e7ad      	b.n	800d19c <__sflush_r+0x1c>
 800d240:	690f      	ldr	r7, [r1, #16]
 800d242:	2f00      	cmp	r7, #0
 800d244:	d0a9      	beq.n	800d19a <__sflush_r+0x1a>
 800d246:	0793      	lsls	r3, r2, #30
 800d248:	680e      	ldr	r6, [r1, #0]
 800d24a:	bf08      	it	eq
 800d24c:	694b      	ldreq	r3, [r1, #20]
 800d24e:	600f      	str	r7, [r1, #0]
 800d250:	bf18      	it	ne
 800d252:	2300      	movne	r3, #0
 800d254:	eba6 0807 	sub.w	r8, r6, r7
 800d258:	608b      	str	r3, [r1, #8]
 800d25a:	f1b8 0f00 	cmp.w	r8, #0
 800d25e:	dd9c      	ble.n	800d19a <__sflush_r+0x1a>
 800d260:	6a21      	ldr	r1, [r4, #32]
 800d262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d264:	4643      	mov	r3, r8
 800d266:	463a      	mov	r2, r7
 800d268:	4628      	mov	r0, r5
 800d26a:	47b0      	blx	r6
 800d26c:	2800      	cmp	r0, #0
 800d26e:	dc06      	bgt.n	800d27e <__sflush_r+0xfe>
 800d270:	89a3      	ldrh	r3, [r4, #12]
 800d272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d276:	81a3      	strh	r3, [r4, #12]
 800d278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d27c:	e78e      	b.n	800d19c <__sflush_r+0x1c>
 800d27e:	4407      	add	r7, r0
 800d280:	eba8 0800 	sub.w	r8, r8, r0
 800d284:	e7e9      	b.n	800d25a <__sflush_r+0xda>
 800d286:	bf00      	nop
 800d288:	20400001 	.word	0x20400001

0800d28c <_fflush_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	690b      	ldr	r3, [r1, #16]
 800d290:	4605      	mov	r5, r0
 800d292:	460c      	mov	r4, r1
 800d294:	b913      	cbnz	r3, 800d29c <_fflush_r+0x10>
 800d296:	2500      	movs	r5, #0
 800d298:	4628      	mov	r0, r5
 800d29a:	bd38      	pop	{r3, r4, r5, pc}
 800d29c:	b118      	cbz	r0, 800d2a6 <_fflush_r+0x1a>
 800d29e:	6983      	ldr	r3, [r0, #24]
 800d2a0:	b90b      	cbnz	r3, 800d2a6 <_fflush_r+0x1a>
 800d2a2:	f000 f887 	bl	800d3b4 <__sinit>
 800d2a6:	4b14      	ldr	r3, [pc, #80]	; (800d2f8 <_fflush_r+0x6c>)
 800d2a8:	429c      	cmp	r4, r3
 800d2aa:	d11b      	bne.n	800d2e4 <_fflush_r+0x58>
 800d2ac:	686c      	ldr	r4, [r5, #4]
 800d2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d0ef      	beq.n	800d296 <_fflush_r+0xa>
 800d2b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2b8:	07d0      	lsls	r0, r2, #31
 800d2ba:	d404      	bmi.n	800d2c6 <_fflush_r+0x3a>
 800d2bc:	0599      	lsls	r1, r3, #22
 800d2be:	d402      	bmi.n	800d2c6 <_fflush_r+0x3a>
 800d2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c2:	f000 f93a 	bl	800d53a <__retarget_lock_acquire_recursive>
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	f7ff ff59 	bl	800d180 <__sflush_r>
 800d2ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2d0:	07da      	lsls	r2, r3, #31
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	d4e0      	bmi.n	800d298 <_fflush_r+0xc>
 800d2d6:	89a3      	ldrh	r3, [r4, #12]
 800d2d8:	059b      	lsls	r3, r3, #22
 800d2da:	d4dd      	bmi.n	800d298 <_fflush_r+0xc>
 800d2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2de:	f000 f92d 	bl	800d53c <__retarget_lock_release_recursive>
 800d2e2:	e7d9      	b.n	800d298 <_fflush_r+0xc>
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <_fflush_r+0x70>)
 800d2e6:	429c      	cmp	r4, r3
 800d2e8:	d101      	bne.n	800d2ee <_fflush_r+0x62>
 800d2ea:	68ac      	ldr	r4, [r5, #8]
 800d2ec:	e7df      	b.n	800d2ae <_fflush_r+0x22>
 800d2ee:	4b04      	ldr	r3, [pc, #16]	; (800d300 <_fflush_r+0x74>)
 800d2f0:	429c      	cmp	r4, r3
 800d2f2:	bf08      	it	eq
 800d2f4:	68ec      	ldreq	r4, [r5, #12]
 800d2f6:	e7da      	b.n	800d2ae <_fflush_r+0x22>
 800d2f8:	0800e320 	.word	0x0800e320
 800d2fc:	0800e340 	.word	0x0800e340
 800d300:	0800e300 	.word	0x0800e300

0800d304 <std>:
 800d304:	2300      	movs	r3, #0
 800d306:	b510      	push	{r4, lr}
 800d308:	4604      	mov	r4, r0
 800d30a:	e9c0 3300 	strd	r3, r3, [r0]
 800d30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d312:	6083      	str	r3, [r0, #8]
 800d314:	8181      	strh	r1, [r0, #12]
 800d316:	6643      	str	r3, [r0, #100]	; 0x64
 800d318:	81c2      	strh	r2, [r0, #14]
 800d31a:	6183      	str	r3, [r0, #24]
 800d31c:	4619      	mov	r1, r3
 800d31e:	2208      	movs	r2, #8
 800d320:	305c      	adds	r0, #92	; 0x5c
 800d322:	f7ff febf 	bl	800d0a4 <memset>
 800d326:	4b05      	ldr	r3, [pc, #20]	; (800d33c <std+0x38>)
 800d328:	6263      	str	r3, [r4, #36]	; 0x24
 800d32a:	4b05      	ldr	r3, [pc, #20]	; (800d340 <std+0x3c>)
 800d32c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d32e:	4b05      	ldr	r3, [pc, #20]	; (800d344 <std+0x40>)
 800d330:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d332:	4b05      	ldr	r3, [pc, #20]	; (800d348 <std+0x44>)
 800d334:	6224      	str	r4, [r4, #32]
 800d336:	6323      	str	r3, [r4, #48]	; 0x30
 800d338:	bd10      	pop	{r4, pc}
 800d33a:	bf00      	nop
 800d33c:	0800ddd5 	.word	0x0800ddd5
 800d340:	0800ddf7 	.word	0x0800ddf7
 800d344:	0800de2f 	.word	0x0800de2f
 800d348:	0800de53 	.word	0x0800de53

0800d34c <_cleanup_r>:
 800d34c:	4901      	ldr	r1, [pc, #4]	; (800d354 <_cleanup_r+0x8>)
 800d34e:	f000 b8c1 	b.w	800d4d4 <_fwalk_reent>
 800d352:	bf00      	nop
 800d354:	0800d28d 	.word	0x0800d28d

0800d358 <__sfmoreglue>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	2268      	movs	r2, #104	; 0x68
 800d35c:	1e4d      	subs	r5, r1, #1
 800d35e:	4355      	muls	r5, r2
 800d360:	460e      	mov	r6, r1
 800d362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d366:	f000 f9c3 	bl	800d6f0 <_malloc_r>
 800d36a:	4604      	mov	r4, r0
 800d36c:	b140      	cbz	r0, 800d380 <__sfmoreglue+0x28>
 800d36e:	2100      	movs	r1, #0
 800d370:	e9c0 1600 	strd	r1, r6, [r0]
 800d374:	300c      	adds	r0, #12
 800d376:	60a0      	str	r0, [r4, #8]
 800d378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d37c:	f7ff fe92 	bl	800d0a4 <memset>
 800d380:	4620      	mov	r0, r4
 800d382:	bd70      	pop	{r4, r5, r6, pc}

0800d384 <__sfp_lock_acquire>:
 800d384:	4801      	ldr	r0, [pc, #4]	; (800d38c <__sfp_lock_acquire+0x8>)
 800d386:	f000 b8d8 	b.w	800d53a <__retarget_lock_acquire_recursive>
 800d38a:	bf00      	nop
 800d38c:	2400157d 	.word	0x2400157d

0800d390 <__sfp_lock_release>:
 800d390:	4801      	ldr	r0, [pc, #4]	; (800d398 <__sfp_lock_release+0x8>)
 800d392:	f000 b8d3 	b.w	800d53c <__retarget_lock_release_recursive>
 800d396:	bf00      	nop
 800d398:	2400157d 	.word	0x2400157d

0800d39c <__sinit_lock_acquire>:
 800d39c:	4801      	ldr	r0, [pc, #4]	; (800d3a4 <__sinit_lock_acquire+0x8>)
 800d39e:	f000 b8cc 	b.w	800d53a <__retarget_lock_acquire_recursive>
 800d3a2:	bf00      	nop
 800d3a4:	2400157e 	.word	0x2400157e

0800d3a8 <__sinit_lock_release>:
 800d3a8:	4801      	ldr	r0, [pc, #4]	; (800d3b0 <__sinit_lock_release+0x8>)
 800d3aa:	f000 b8c7 	b.w	800d53c <__retarget_lock_release_recursive>
 800d3ae:	bf00      	nop
 800d3b0:	2400157e 	.word	0x2400157e

0800d3b4 <__sinit>:
 800d3b4:	b510      	push	{r4, lr}
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	f7ff fff0 	bl	800d39c <__sinit_lock_acquire>
 800d3bc:	69a3      	ldr	r3, [r4, #24]
 800d3be:	b11b      	cbz	r3, 800d3c8 <__sinit+0x14>
 800d3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3c4:	f7ff bff0 	b.w	800d3a8 <__sinit_lock_release>
 800d3c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800d3ce:	4b13      	ldr	r3, [pc, #76]	; (800d41c <__sinit+0x68>)
 800d3d0:	4a13      	ldr	r2, [pc, #76]	; (800d420 <__sinit+0x6c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3d6:	42a3      	cmp	r3, r4
 800d3d8:	bf04      	itt	eq
 800d3da:	2301      	moveq	r3, #1
 800d3dc:	61a3      	streq	r3, [r4, #24]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f820 	bl	800d424 <__sfp>
 800d3e4:	6060      	str	r0, [r4, #4]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 f81c 	bl	800d424 <__sfp>
 800d3ec:	60a0      	str	r0, [r4, #8]
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f000 f818 	bl	800d424 <__sfp>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	60e0      	str	r0, [r4, #12]
 800d3f8:	2104      	movs	r1, #4
 800d3fa:	6860      	ldr	r0, [r4, #4]
 800d3fc:	f7ff ff82 	bl	800d304 <std>
 800d400:	68a0      	ldr	r0, [r4, #8]
 800d402:	2201      	movs	r2, #1
 800d404:	2109      	movs	r1, #9
 800d406:	f7ff ff7d 	bl	800d304 <std>
 800d40a:	68e0      	ldr	r0, [r4, #12]
 800d40c:	2202      	movs	r2, #2
 800d40e:	2112      	movs	r1, #18
 800d410:	f7ff ff78 	bl	800d304 <std>
 800d414:	2301      	movs	r3, #1
 800d416:	61a3      	str	r3, [r4, #24]
 800d418:	e7d2      	b.n	800d3c0 <__sinit+0xc>
 800d41a:	bf00      	nop
 800d41c:	0800e24c 	.word	0x0800e24c
 800d420:	0800d34d 	.word	0x0800d34d

0800d424 <__sfp>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	4607      	mov	r7, r0
 800d428:	f7ff ffac 	bl	800d384 <__sfp_lock_acquire>
 800d42c:	4b1e      	ldr	r3, [pc, #120]	; (800d4a8 <__sfp+0x84>)
 800d42e:	681e      	ldr	r6, [r3, #0]
 800d430:	69b3      	ldr	r3, [r6, #24]
 800d432:	b913      	cbnz	r3, 800d43a <__sfp+0x16>
 800d434:	4630      	mov	r0, r6
 800d436:	f7ff ffbd 	bl	800d3b4 <__sinit>
 800d43a:	3648      	adds	r6, #72	; 0x48
 800d43c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d440:	3b01      	subs	r3, #1
 800d442:	d503      	bpl.n	800d44c <__sfp+0x28>
 800d444:	6833      	ldr	r3, [r6, #0]
 800d446:	b30b      	cbz	r3, 800d48c <__sfp+0x68>
 800d448:	6836      	ldr	r6, [r6, #0]
 800d44a:	e7f7      	b.n	800d43c <__sfp+0x18>
 800d44c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d450:	b9d5      	cbnz	r5, 800d488 <__sfp+0x64>
 800d452:	4b16      	ldr	r3, [pc, #88]	; (800d4ac <__sfp+0x88>)
 800d454:	60e3      	str	r3, [r4, #12]
 800d456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d45a:	6665      	str	r5, [r4, #100]	; 0x64
 800d45c:	f000 f86c 	bl	800d538 <__retarget_lock_init_recursive>
 800d460:	f7ff ff96 	bl	800d390 <__sfp_lock_release>
 800d464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d46c:	6025      	str	r5, [r4, #0]
 800d46e:	61a5      	str	r5, [r4, #24]
 800d470:	2208      	movs	r2, #8
 800d472:	4629      	mov	r1, r5
 800d474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d478:	f7ff fe14 	bl	800d0a4 <memset>
 800d47c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d484:	4620      	mov	r0, r4
 800d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d488:	3468      	adds	r4, #104	; 0x68
 800d48a:	e7d9      	b.n	800d440 <__sfp+0x1c>
 800d48c:	2104      	movs	r1, #4
 800d48e:	4638      	mov	r0, r7
 800d490:	f7ff ff62 	bl	800d358 <__sfmoreglue>
 800d494:	4604      	mov	r4, r0
 800d496:	6030      	str	r0, [r6, #0]
 800d498:	2800      	cmp	r0, #0
 800d49a:	d1d5      	bne.n	800d448 <__sfp+0x24>
 800d49c:	f7ff ff78 	bl	800d390 <__sfp_lock_release>
 800d4a0:	230c      	movs	r3, #12
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	e7ee      	b.n	800d484 <__sfp+0x60>
 800d4a6:	bf00      	nop
 800d4a8:	0800e24c 	.word	0x0800e24c
 800d4ac:	ffff0001 	.word	0xffff0001

0800d4b0 <fiprintf>:
 800d4b0:	b40e      	push	{r1, r2, r3}
 800d4b2:	b503      	push	{r0, r1, lr}
 800d4b4:	4601      	mov	r1, r0
 800d4b6:	ab03      	add	r3, sp, #12
 800d4b8:	4805      	ldr	r0, [pc, #20]	; (800d4d0 <fiprintf+0x20>)
 800d4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4be:	6800      	ldr	r0, [r0, #0]
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	f000 f9b3 	bl	800d82c <_vfiprintf_r>
 800d4c6:	b002      	add	sp, #8
 800d4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4cc:	b003      	add	sp, #12
 800d4ce:	4770      	bx	lr
 800d4d0:	24000050 	.word	0x24000050

0800d4d4 <_fwalk_reent>:
 800d4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d8:	4606      	mov	r6, r0
 800d4da:	4688      	mov	r8, r1
 800d4dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4e0:	2700      	movs	r7, #0
 800d4e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4e6:	f1b9 0901 	subs.w	r9, r9, #1
 800d4ea:	d505      	bpl.n	800d4f8 <_fwalk_reent+0x24>
 800d4ec:	6824      	ldr	r4, [r4, #0]
 800d4ee:	2c00      	cmp	r4, #0
 800d4f0:	d1f7      	bne.n	800d4e2 <_fwalk_reent+0xe>
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f8:	89ab      	ldrh	r3, [r5, #12]
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d907      	bls.n	800d50e <_fwalk_reent+0x3a>
 800d4fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d502:	3301      	adds	r3, #1
 800d504:	d003      	beq.n	800d50e <_fwalk_reent+0x3a>
 800d506:	4629      	mov	r1, r5
 800d508:	4630      	mov	r0, r6
 800d50a:	47c0      	blx	r8
 800d50c:	4307      	orrs	r7, r0
 800d50e:	3568      	adds	r5, #104	; 0x68
 800d510:	e7e9      	b.n	800d4e6 <_fwalk_reent+0x12>
	...

0800d514 <_gettimeofday_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	4d07      	ldr	r5, [pc, #28]	; (800d534 <_gettimeofday_r+0x20>)
 800d518:	2300      	movs	r3, #0
 800d51a:	4604      	mov	r4, r0
 800d51c:	4608      	mov	r0, r1
 800d51e:	4611      	mov	r1, r2
 800d520:	602b      	str	r3, [r5, #0]
 800d522:	f000 fe1b 	bl	800e15c <_gettimeofday>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	d102      	bne.n	800d530 <_gettimeofday_r+0x1c>
 800d52a:	682b      	ldr	r3, [r5, #0]
 800d52c:	b103      	cbz	r3, 800d530 <_gettimeofday_r+0x1c>
 800d52e:	6023      	str	r3, [r4, #0]
 800d530:	bd38      	pop	{r3, r4, r5, pc}
 800d532:	bf00      	nop
 800d534:	24001588 	.word	0x24001588

0800d538 <__retarget_lock_init_recursive>:
 800d538:	4770      	bx	lr

0800d53a <__retarget_lock_acquire_recursive>:
 800d53a:	4770      	bx	lr

0800d53c <__retarget_lock_release_recursive>:
 800d53c:	4770      	bx	lr

0800d53e <__swhatbuf_r>:
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	460e      	mov	r6, r1
 800d542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d546:	2900      	cmp	r1, #0
 800d548:	b096      	sub	sp, #88	; 0x58
 800d54a:	4614      	mov	r4, r2
 800d54c:	461d      	mov	r5, r3
 800d54e:	da08      	bge.n	800d562 <__swhatbuf_r+0x24>
 800d550:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d554:	2200      	movs	r2, #0
 800d556:	602a      	str	r2, [r5, #0]
 800d558:	061a      	lsls	r2, r3, #24
 800d55a:	d410      	bmi.n	800d57e <__swhatbuf_r+0x40>
 800d55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d560:	e00e      	b.n	800d580 <__swhatbuf_r+0x42>
 800d562:	466a      	mov	r2, sp
 800d564:	f000 fd64 	bl	800e030 <_fstat_r>
 800d568:	2800      	cmp	r0, #0
 800d56a:	dbf1      	blt.n	800d550 <__swhatbuf_r+0x12>
 800d56c:	9a01      	ldr	r2, [sp, #4]
 800d56e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d572:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d576:	425a      	negs	r2, r3
 800d578:	415a      	adcs	r2, r3
 800d57a:	602a      	str	r2, [r5, #0]
 800d57c:	e7ee      	b.n	800d55c <__swhatbuf_r+0x1e>
 800d57e:	2340      	movs	r3, #64	; 0x40
 800d580:	2000      	movs	r0, #0
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	b016      	add	sp, #88	; 0x58
 800d586:	bd70      	pop	{r4, r5, r6, pc}

0800d588 <__smakebuf_r>:
 800d588:	898b      	ldrh	r3, [r1, #12]
 800d58a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d58c:	079d      	lsls	r5, r3, #30
 800d58e:	4606      	mov	r6, r0
 800d590:	460c      	mov	r4, r1
 800d592:	d507      	bpl.n	800d5a4 <__smakebuf_r+0x1c>
 800d594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	2301      	movs	r3, #1
 800d59e:	6163      	str	r3, [r4, #20]
 800d5a0:	b002      	add	sp, #8
 800d5a2:	bd70      	pop	{r4, r5, r6, pc}
 800d5a4:	ab01      	add	r3, sp, #4
 800d5a6:	466a      	mov	r2, sp
 800d5a8:	f7ff ffc9 	bl	800d53e <__swhatbuf_r>
 800d5ac:	9900      	ldr	r1, [sp, #0]
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f000 f89d 	bl	800d6f0 <_malloc_r>
 800d5b6:	b948      	cbnz	r0, 800d5cc <__smakebuf_r+0x44>
 800d5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5bc:	059a      	lsls	r2, r3, #22
 800d5be:	d4ef      	bmi.n	800d5a0 <__smakebuf_r+0x18>
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	f043 0302 	orr.w	r3, r3, #2
 800d5c8:	81a3      	strh	r3, [r4, #12]
 800d5ca:	e7e3      	b.n	800d594 <__smakebuf_r+0xc>
 800d5cc:	4b0d      	ldr	r3, [pc, #52]	; (800d604 <__smakebuf_r+0x7c>)
 800d5ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	6020      	str	r0, [r4, #0]
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	9b00      	ldr	r3, [sp, #0]
 800d5dc:	6163      	str	r3, [r4, #20]
 800d5de:	9b01      	ldr	r3, [sp, #4]
 800d5e0:	6120      	str	r0, [r4, #16]
 800d5e2:	b15b      	cbz	r3, 800d5fc <__smakebuf_r+0x74>
 800d5e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 fd33 	bl	800e054 <_isatty_r>
 800d5ee:	b128      	cbz	r0, 800d5fc <__smakebuf_r+0x74>
 800d5f0:	89a3      	ldrh	r3, [r4, #12]
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	f043 0301 	orr.w	r3, r3, #1
 800d5fa:	81a3      	strh	r3, [r4, #12]
 800d5fc:	89a0      	ldrh	r0, [r4, #12]
 800d5fe:	4305      	orrs	r5, r0
 800d600:	81a5      	strh	r5, [r4, #12]
 800d602:	e7cd      	b.n	800d5a0 <__smakebuf_r+0x18>
 800d604:	0800d34d 	.word	0x0800d34d

0800d608 <malloc>:
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <malloc+0xc>)
 800d60a:	4601      	mov	r1, r0
 800d60c:	6818      	ldr	r0, [r3, #0]
 800d60e:	f000 b86f 	b.w	800d6f0 <_malloc_r>
 800d612:	bf00      	nop
 800d614:	24000050 	.word	0x24000050

0800d618 <_free_r>:
 800d618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d61a:	2900      	cmp	r1, #0
 800d61c:	d044      	beq.n	800d6a8 <_free_r+0x90>
 800d61e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d622:	9001      	str	r0, [sp, #4]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f1a1 0404 	sub.w	r4, r1, #4
 800d62a:	bfb8      	it	lt
 800d62c:	18e4      	addlt	r4, r4, r3
 800d62e:	f000 fd33 	bl	800e098 <__malloc_lock>
 800d632:	4a1e      	ldr	r2, [pc, #120]	; (800d6ac <_free_r+0x94>)
 800d634:	9801      	ldr	r0, [sp, #4]
 800d636:	6813      	ldr	r3, [r2, #0]
 800d638:	b933      	cbnz	r3, 800d648 <_free_r+0x30>
 800d63a:	6063      	str	r3, [r4, #4]
 800d63c:	6014      	str	r4, [r2, #0]
 800d63e:	b003      	add	sp, #12
 800d640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d644:	f000 bd2e 	b.w	800e0a4 <__malloc_unlock>
 800d648:	42a3      	cmp	r3, r4
 800d64a:	d908      	bls.n	800d65e <_free_r+0x46>
 800d64c:	6825      	ldr	r5, [r4, #0]
 800d64e:	1961      	adds	r1, r4, r5
 800d650:	428b      	cmp	r3, r1
 800d652:	bf01      	itttt	eq
 800d654:	6819      	ldreq	r1, [r3, #0]
 800d656:	685b      	ldreq	r3, [r3, #4]
 800d658:	1949      	addeq	r1, r1, r5
 800d65a:	6021      	streq	r1, [r4, #0]
 800d65c:	e7ed      	b.n	800d63a <_free_r+0x22>
 800d65e:	461a      	mov	r2, r3
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	b10b      	cbz	r3, 800d668 <_free_r+0x50>
 800d664:	42a3      	cmp	r3, r4
 800d666:	d9fa      	bls.n	800d65e <_free_r+0x46>
 800d668:	6811      	ldr	r1, [r2, #0]
 800d66a:	1855      	adds	r5, r2, r1
 800d66c:	42a5      	cmp	r5, r4
 800d66e:	d10b      	bne.n	800d688 <_free_r+0x70>
 800d670:	6824      	ldr	r4, [r4, #0]
 800d672:	4421      	add	r1, r4
 800d674:	1854      	adds	r4, r2, r1
 800d676:	42a3      	cmp	r3, r4
 800d678:	6011      	str	r1, [r2, #0]
 800d67a:	d1e0      	bne.n	800d63e <_free_r+0x26>
 800d67c:	681c      	ldr	r4, [r3, #0]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	6053      	str	r3, [r2, #4]
 800d682:	4421      	add	r1, r4
 800d684:	6011      	str	r1, [r2, #0]
 800d686:	e7da      	b.n	800d63e <_free_r+0x26>
 800d688:	d902      	bls.n	800d690 <_free_r+0x78>
 800d68a:	230c      	movs	r3, #12
 800d68c:	6003      	str	r3, [r0, #0]
 800d68e:	e7d6      	b.n	800d63e <_free_r+0x26>
 800d690:	6825      	ldr	r5, [r4, #0]
 800d692:	1961      	adds	r1, r4, r5
 800d694:	428b      	cmp	r3, r1
 800d696:	bf04      	itt	eq
 800d698:	6819      	ldreq	r1, [r3, #0]
 800d69a:	685b      	ldreq	r3, [r3, #4]
 800d69c:	6063      	str	r3, [r4, #4]
 800d69e:	bf04      	itt	eq
 800d6a0:	1949      	addeq	r1, r1, r5
 800d6a2:	6021      	streq	r1, [r4, #0]
 800d6a4:	6054      	str	r4, [r2, #4]
 800d6a6:	e7ca      	b.n	800d63e <_free_r+0x26>
 800d6a8:	b003      	add	sp, #12
 800d6aa:	bd30      	pop	{r4, r5, pc}
 800d6ac:	24001580 	.word	0x24001580

0800d6b0 <sbrk_aligned>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	4e0e      	ldr	r6, [pc, #56]	; (800d6ec <sbrk_aligned+0x3c>)
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	6831      	ldr	r1, [r6, #0]
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	b911      	cbnz	r1, 800d6c2 <sbrk_aligned+0x12>
 800d6bc:	f000 fb7a 	bl	800ddb4 <_sbrk_r>
 800d6c0:	6030      	str	r0, [r6, #0]
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f000 fb75 	bl	800ddb4 <_sbrk_r>
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d00a      	beq.n	800d6e4 <sbrk_aligned+0x34>
 800d6ce:	1cc4      	adds	r4, r0, #3
 800d6d0:	f024 0403 	bic.w	r4, r4, #3
 800d6d4:	42a0      	cmp	r0, r4
 800d6d6:	d007      	beq.n	800d6e8 <sbrk_aligned+0x38>
 800d6d8:	1a21      	subs	r1, r4, r0
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f000 fb6a 	bl	800ddb4 <_sbrk_r>
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	d101      	bne.n	800d6e8 <sbrk_aligned+0x38>
 800d6e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	24001584 	.word	0x24001584

0800d6f0 <_malloc_r>:
 800d6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f4:	1ccd      	adds	r5, r1, #3
 800d6f6:	f025 0503 	bic.w	r5, r5, #3
 800d6fa:	3508      	adds	r5, #8
 800d6fc:	2d0c      	cmp	r5, #12
 800d6fe:	bf38      	it	cc
 800d700:	250c      	movcc	r5, #12
 800d702:	2d00      	cmp	r5, #0
 800d704:	4607      	mov	r7, r0
 800d706:	db01      	blt.n	800d70c <_malloc_r+0x1c>
 800d708:	42a9      	cmp	r1, r5
 800d70a:	d905      	bls.n	800d718 <_malloc_r+0x28>
 800d70c:	230c      	movs	r3, #12
 800d70e:	603b      	str	r3, [r7, #0]
 800d710:	2600      	movs	r6, #0
 800d712:	4630      	mov	r0, r6
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	4e2e      	ldr	r6, [pc, #184]	; (800d7d4 <_malloc_r+0xe4>)
 800d71a:	f000 fcbd 	bl	800e098 <__malloc_lock>
 800d71e:	6833      	ldr	r3, [r6, #0]
 800d720:	461c      	mov	r4, r3
 800d722:	bb34      	cbnz	r4, 800d772 <_malloc_r+0x82>
 800d724:	4629      	mov	r1, r5
 800d726:	4638      	mov	r0, r7
 800d728:	f7ff ffc2 	bl	800d6b0 <sbrk_aligned>
 800d72c:	1c43      	adds	r3, r0, #1
 800d72e:	4604      	mov	r4, r0
 800d730:	d14d      	bne.n	800d7ce <_malloc_r+0xde>
 800d732:	6834      	ldr	r4, [r6, #0]
 800d734:	4626      	mov	r6, r4
 800d736:	2e00      	cmp	r6, #0
 800d738:	d140      	bne.n	800d7bc <_malloc_r+0xcc>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	4631      	mov	r1, r6
 800d73e:	4638      	mov	r0, r7
 800d740:	eb04 0803 	add.w	r8, r4, r3
 800d744:	f000 fb36 	bl	800ddb4 <_sbrk_r>
 800d748:	4580      	cmp	r8, r0
 800d74a:	d13a      	bne.n	800d7c2 <_malloc_r+0xd2>
 800d74c:	6821      	ldr	r1, [r4, #0]
 800d74e:	3503      	adds	r5, #3
 800d750:	1a6d      	subs	r5, r5, r1
 800d752:	f025 0503 	bic.w	r5, r5, #3
 800d756:	3508      	adds	r5, #8
 800d758:	2d0c      	cmp	r5, #12
 800d75a:	bf38      	it	cc
 800d75c:	250c      	movcc	r5, #12
 800d75e:	4629      	mov	r1, r5
 800d760:	4638      	mov	r0, r7
 800d762:	f7ff ffa5 	bl	800d6b0 <sbrk_aligned>
 800d766:	3001      	adds	r0, #1
 800d768:	d02b      	beq.n	800d7c2 <_malloc_r+0xd2>
 800d76a:	6823      	ldr	r3, [r4, #0]
 800d76c:	442b      	add	r3, r5
 800d76e:	6023      	str	r3, [r4, #0]
 800d770:	e00e      	b.n	800d790 <_malloc_r+0xa0>
 800d772:	6822      	ldr	r2, [r4, #0]
 800d774:	1b52      	subs	r2, r2, r5
 800d776:	d41e      	bmi.n	800d7b6 <_malloc_r+0xc6>
 800d778:	2a0b      	cmp	r2, #11
 800d77a:	d916      	bls.n	800d7aa <_malloc_r+0xba>
 800d77c:	1961      	adds	r1, r4, r5
 800d77e:	42a3      	cmp	r3, r4
 800d780:	6025      	str	r5, [r4, #0]
 800d782:	bf18      	it	ne
 800d784:	6059      	strne	r1, [r3, #4]
 800d786:	6863      	ldr	r3, [r4, #4]
 800d788:	bf08      	it	eq
 800d78a:	6031      	streq	r1, [r6, #0]
 800d78c:	5162      	str	r2, [r4, r5]
 800d78e:	604b      	str	r3, [r1, #4]
 800d790:	4638      	mov	r0, r7
 800d792:	f104 060b 	add.w	r6, r4, #11
 800d796:	f000 fc85 	bl	800e0a4 <__malloc_unlock>
 800d79a:	f026 0607 	bic.w	r6, r6, #7
 800d79e:	1d23      	adds	r3, r4, #4
 800d7a0:	1af2      	subs	r2, r6, r3
 800d7a2:	d0b6      	beq.n	800d712 <_malloc_r+0x22>
 800d7a4:	1b9b      	subs	r3, r3, r6
 800d7a6:	50a3      	str	r3, [r4, r2]
 800d7a8:	e7b3      	b.n	800d712 <_malloc_r+0x22>
 800d7aa:	6862      	ldr	r2, [r4, #4]
 800d7ac:	42a3      	cmp	r3, r4
 800d7ae:	bf0c      	ite	eq
 800d7b0:	6032      	streq	r2, [r6, #0]
 800d7b2:	605a      	strne	r2, [r3, #4]
 800d7b4:	e7ec      	b.n	800d790 <_malloc_r+0xa0>
 800d7b6:	4623      	mov	r3, r4
 800d7b8:	6864      	ldr	r4, [r4, #4]
 800d7ba:	e7b2      	b.n	800d722 <_malloc_r+0x32>
 800d7bc:	4634      	mov	r4, r6
 800d7be:	6876      	ldr	r6, [r6, #4]
 800d7c0:	e7b9      	b.n	800d736 <_malloc_r+0x46>
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	603b      	str	r3, [r7, #0]
 800d7c6:	4638      	mov	r0, r7
 800d7c8:	f000 fc6c 	bl	800e0a4 <__malloc_unlock>
 800d7cc:	e7a1      	b.n	800d712 <_malloc_r+0x22>
 800d7ce:	6025      	str	r5, [r4, #0]
 800d7d0:	e7de      	b.n	800d790 <_malloc_r+0xa0>
 800d7d2:	bf00      	nop
 800d7d4:	24001580 	.word	0x24001580

0800d7d8 <__sfputc_r>:
 800d7d8:	6893      	ldr	r3, [r2, #8]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	b410      	push	{r4}
 800d7e0:	6093      	str	r3, [r2, #8]
 800d7e2:	da08      	bge.n	800d7f6 <__sfputc_r+0x1e>
 800d7e4:	6994      	ldr	r4, [r2, #24]
 800d7e6:	42a3      	cmp	r3, r4
 800d7e8:	db01      	blt.n	800d7ee <__sfputc_r+0x16>
 800d7ea:	290a      	cmp	r1, #10
 800d7ec:	d103      	bne.n	800d7f6 <__sfputc_r+0x1e>
 800d7ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7f2:	f000 bb33 	b.w	800de5c <__swbuf_r>
 800d7f6:	6813      	ldr	r3, [r2, #0]
 800d7f8:	1c58      	adds	r0, r3, #1
 800d7fa:	6010      	str	r0, [r2, #0]
 800d7fc:	7019      	strb	r1, [r3, #0]
 800d7fe:	4608      	mov	r0, r1
 800d800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <__sfputs_r>:
 800d806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d808:	4606      	mov	r6, r0
 800d80a:	460f      	mov	r7, r1
 800d80c:	4614      	mov	r4, r2
 800d80e:	18d5      	adds	r5, r2, r3
 800d810:	42ac      	cmp	r4, r5
 800d812:	d101      	bne.n	800d818 <__sfputs_r+0x12>
 800d814:	2000      	movs	r0, #0
 800d816:	e007      	b.n	800d828 <__sfputs_r+0x22>
 800d818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81c:	463a      	mov	r2, r7
 800d81e:	4630      	mov	r0, r6
 800d820:	f7ff ffda 	bl	800d7d8 <__sfputc_r>
 800d824:	1c43      	adds	r3, r0, #1
 800d826:	d1f3      	bne.n	800d810 <__sfputs_r+0xa>
 800d828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d82c <_vfiprintf_r>:
 800d82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d830:	460d      	mov	r5, r1
 800d832:	b09d      	sub	sp, #116	; 0x74
 800d834:	4614      	mov	r4, r2
 800d836:	4698      	mov	r8, r3
 800d838:	4606      	mov	r6, r0
 800d83a:	b118      	cbz	r0, 800d844 <_vfiprintf_r+0x18>
 800d83c:	6983      	ldr	r3, [r0, #24]
 800d83e:	b90b      	cbnz	r3, 800d844 <_vfiprintf_r+0x18>
 800d840:	f7ff fdb8 	bl	800d3b4 <__sinit>
 800d844:	4b89      	ldr	r3, [pc, #548]	; (800da6c <_vfiprintf_r+0x240>)
 800d846:	429d      	cmp	r5, r3
 800d848:	d11b      	bne.n	800d882 <_vfiprintf_r+0x56>
 800d84a:	6875      	ldr	r5, [r6, #4]
 800d84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d84e:	07d9      	lsls	r1, r3, #31
 800d850:	d405      	bmi.n	800d85e <_vfiprintf_r+0x32>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	059a      	lsls	r2, r3, #22
 800d856:	d402      	bmi.n	800d85e <_vfiprintf_r+0x32>
 800d858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d85a:	f7ff fe6e 	bl	800d53a <__retarget_lock_acquire_recursive>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	071b      	lsls	r3, r3, #28
 800d862:	d501      	bpl.n	800d868 <_vfiprintf_r+0x3c>
 800d864:	692b      	ldr	r3, [r5, #16]
 800d866:	b9eb      	cbnz	r3, 800d8a4 <_vfiprintf_r+0x78>
 800d868:	4629      	mov	r1, r5
 800d86a:	4630      	mov	r0, r6
 800d86c:	f000 fb5a 	bl	800df24 <__swsetup_r>
 800d870:	b1c0      	cbz	r0, 800d8a4 <_vfiprintf_r+0x78>
 800d872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d874:	07dc      	lsls	r4, r3, #31
 800d876:	d50e      	bpl.n	800d896 <_vfiprintf_r+0x6a>
 800d878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d87c:	b01d      	add	sp, #116	; 0x74
 800d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d882:	4b7b      	ldr	r3, [pc, #492]	; (800da70 <_vfiprintf_r+0x244>)
 800d884:	429d      	cmp	r5, r3
 800d886:	d101      	bne.n	800d88c <_vfiprintf_r+0x60>
 800d888:	68b5      	ldr	r5, [r6, #8]
 800d88a:	e7df      	b.n	800d84c <_vfiprintf_r+0x20>
 800d88c:	4b79      	ldr	r3, [pc, #484]	; (800da74 <_vfiprintf_r+0x248>)
 800d88e:	429d      	cmp	r5, r3
 800d890:	bf08      	it	eq
 800d892:	68f5      	ldreq	r5, [r6, #12]
 800d894:	e7da      	b.n	800d84c <_vfiprintf_r+0x20>
 800d896:	89ab      	ldrh	r3, [r5, #12]
 800d898:	0598      	lsls	r0, r3, #22
 800d89a:	d4ed      	bmi.n	800d878 <_vfiprintf_r+0x4c>
 800d89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d89e:	f7ff fe4d 	bl	800d53c <__retarget_lock_release_recursive>
 800d8a2:	e7e9      	b.n	800d878 <_vfiprintf_r+0x4c>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8b2:	2330      	movs	r3, #48	; 0x30
 800d8b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da78 <_vfiprintf_r+0x24c>
 800d8b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8bc:	f04f 0901 	mov.w	r9, #1
 800d8c0:	4623      	mov	r3, r4
 800d8c2:	469a      	mov	sl, r3
 800d8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8c8:	b10a      	cbz	r2, 800d8ce <_vfiprintf_r+0xa2>
 800d8ca:	2a25      	cmp	r2, #37	; 0x25
 800d8cc:	d1f9      	bne.n	800d8c2 <_vfiprintf_r+0x96>
 800d8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800d8d2:	d00b      	beq.n	800d8ec <_vfiprintf_r+0xc0>
 800d8d4:	465b      	mov	r3, fp
 800d8d6:	4622      	mov	r2, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7ff ff93 	bl	800d806 <__sfputs_r>
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	f000 80aa 	beq.w	800da3a <_vfiprintf_r+0x20e>
 800d8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8e8:	445a      	add	r2, fp
 800d8ea:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	f000 80a2 	beq.w	800da3a <_vfiprintf_r+0x20e>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d900:	f10a 0a01 	add.w	sl, sl, #1
 800d904:	9304      	str	r3, [sp, #16]
 800d906:	9307      	str	r3, [sp, #28]
 800d908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d90c:	931a      	str	r3, [sp, #104]	; 0x68
 800d90e:	4654      	mov	r4, sl
 800d910:	2205      	movs	r2, #5
 800d912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d916:	4858      	ldr	r0, [pc, #352]	; (800da78 <_vfiprintf_r+0x24c>)
 800d918:	f7f2 fce2 	bl	80002e0 <memchr>
 800d91c:	9a04      	ldr	r2, [sp, #16]
 800d91e:	b9d8      	cbnz	r0, 800d958 <_vfiprintf_r+0x12c>
 800d920:	06d1      	lsls	r1, r2, #27
 800d922:	bf44      	itt	mi
 800d924:	2320      	movmi	r3, #32
 800d926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d92a:	0713      	lsls	r3, r2, #28
 800d92c:	bf44      	itt	mi
 800d92e:	232b      	movmi	r3, #43	; 0x2b
 800d930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d934:	f89a 3000 	ldrb.w	r3, [sl]
 800d938:	2b2a      	cmp	r3, #42	; 0x2a
 800d93a:	d015      	beq.n	800d968 <_vfiprintf_r+0x13c>
 800d93c:	9a07      	ldr	r2, [sp, #28]
 800d93e:	4654      	mov	r4, sl
 800d940:	2000      	movs	r0, #0
 800d942:	f04f 0c0a 	mov.w	ip, #10
 800d946:	4621      	mov	r1, r4
 800d948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d94c:	3b30      	subs	r3, #48	; 0x30
 800d94e:	2b09      	cmp	r3, #9
 800d950:	d94e      	bls.n	800d9f0 <_vfiprintf_r+0x1c4>
 800d952:	b1b0      	cbz	r0, 800d982 <_vfiprintf_r+0x156>
 800d954:	9207      	str	r2, [sp, #28]
 800d956:	e014      	b.n	800d982 <_vfiprintf_r+0x156>
 800d958:	eba0 0308 	sub.w	r3, r0, r8
 800d95c:	fa09 f303 	lsl.w	r3, r9, r3
 800d960:	4313      	orrs	r3, r2
 800d962:	9304      	str	r3, [sp, #16]
 800d964:	46a2      	mov	sl, r4
 800d966:	e7d2      	b.n	800d90e <_vfiprintf_r+0xe2>
 800d968:	9b03      	ldr	r3, [sp, #12]
 800d96a:	1d19      	adds	r1, r3, #4
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	9103      	str	r1, [sp, #12]
 800d970:	2b00      	cmp	r3, #0
 800d972:	bfbb      	ittet	lt
 800d974:	425b      	neglt	r3, r3
 800d976:	f042 0202 	orrlt.w	r2, r2, #2
 800d97a:	9307      	strge	r3, [sp, #28]
 800d97c:	9307      	strlt	r3, [sp, #28]
 800d97e:	bfb8      	it	lt
 800d980:	9204      	strlt	r2, [sp, #16]
 800d982:	7823      	ldrb	r3, [r4, #0]
 800d984:	2b2e      	cmp	r3, #46	; 0x2e
 800d986:	d10c      	bne.n	800d9a2 <_vfiprintf_r+0x176>
 800d988:	7863      	ldrb	r3, [r4, #1]
 800d98a:	2b2a      	cmp	r3, #42	; 0x2a
 800d98c:	d135      	bne.n	800d9fa <_vfiprintf_r+0x1ce>
 800d98e:	9b03      	ldr	r3, [sp, #12]
 800d990:	1d1a      	adds	r2, r3, #4
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	9203      	str	r2, [sp, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	bfb8      	it	lt
 800d99a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d99e:	3402      	adds	r4, #2
 800d9a0:	9305      	str	r3, [sp, #20]
 800d9a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da88 <_vfiprintf_r+0x25c>
 800d9a6:	7821      	ldrb	r1, [r4, #0]
 800d9a8:	2203      	movs	r2, #3
 800d9aa:	4650      	mov	r0, sl
 800d9ac:	f7f2 fc98 	bl	80002e0 <memchr>
 800d9b0:	b140      	cbz	r0, 800d9c4 <_vfiprintf_r+0x198>
 800d9b2:	2340      	movs	r3, #64	; 0x40
 800d9b4:	eba0 000a 	sub.w	r0, r0, sl
 800d9b8:	fa03 f000 	lsl.w	r0, r3, r0
 800d9bc:	9b04      	ldr	r3, [sp, #16]
 800d9be:	4303      	orrs	r3, r0
 800d9c0:	3401      	adds	r4, #1
 800d9c2:	9304      	str	r3, [sp, #16]
 800d9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c8:	482c      	ldr	r0, [pc, #176]	; (800da7c <_vfiprintf_r+0x250>)
 800d9ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9ce:	2206      	movs	r2, #6
 800d9d0:	f7f2 fc86 	bl	80002e0 <memchr>
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	d03f      	beq.n	800da58 <_vfiprintf_r+0x22c>
 800d9d8:	4b29      	ldr	r3, [pc, #164]	; (800da80 <_vfiprintf_r+0x254>)
 800d9da:	bb1b      	cbnz	r3, 800da24 <_vfiprintf_r+0x1f8>
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	3307      	adds	r3, #7
 800d9e0:	f023 0307 	bic.w	r3, r3, #7
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	9303      	str	r3, [sp, #12]
 800d9e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ea:	443b      	add	r3, r7
 800d9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ee:	e767      	b.n	800d8c0 <_vfiprintf_r+0x94>
 800d9f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	2001      	movs	r0, #1
 800d9f8:	e7a5      	b.n	800d946 <_vfiprintf_r+0x11a>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	3401      	adds	r4, #1
 800d9fe:	9305      	str	r3, [sp, #20]
 800da00:	4619      	mov	r1, r3
 800da02:	f04f 0c0a 	mov.w	ip, #10
 800da06:	4620      	mov	r0, r4
 800da08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da0c:	3a30      	subs	r2, #48	; 0x30
 800da0e:	2a09      	cmp	r2, #9
 800da10:	d903      	bls.n	800da1a <_vfiprintf_r+0x1ee>
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0c5      	beq.n	800d9a2 <_vfiprintf_r+0x176>
 800da16:	9105      	str	r1, [sp, #20]
 800da18:	e7c3      	b.n	800d9a2 <_vfiprintf_r+0x176>
 800da1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800da1e:	4604      	mov	r4, r0
 800da20:	2301      	movs	r3, #1
 800da22:	e7f0      	b.n	800da06 <_vfiprintf_r+0x1da>
 800da24:	ab03      	add	r3, sp, #12
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	462a      	mov	r2, r5
 800da2a:	4b16      	ldr	r3, [pc, #88]	; (800da84 <_vfiprintf_r+0x258>)
 800da2c:	a904      	add	r1, sp, #16
 800da2e:	4630      	mov	r0, r6
 800da30:	f3af 8000 	nop.w
 800da34:	4607      	mov	r7, r0
 800da36:	1c78      	adds	r0, r7, #1
 800da38:	d1d6      	bne.n	800d9e8 <_vfiprintf_r+0x1bc>
 800da3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da3c:	07d9      	lsls	r1, r3, #31
 800da3e:	d405      	bmi.n	800da4c <_vfiprintf_r+0x220>
 800da40:	89ab      	ldrh	r3, [r5, #12]
 800da42:	059a      	lsls	r2, r3, #22
 800da44:	d402      	bmi.n	800da4c <_vfiprintf_r+0x220>
 800da46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da48:	f7ff fd78 	bl	800d53c <__retarget_lock_release_recursive>
 800da4c:	89ab      	ldrh	r3, [r5, #12]
 800da4e:	065b      	lsls	r3, r3, #25
 800da50:	f53f af12 	bmi.w	800d878 <_vfiprintf_r+0x4c>
 800da54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da56:	e711      	b.n	800d87c <_vfiprintf_r+0x50>
 800da58:	ab03      	add	r3, sp, #12
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	462a      	mov	r2, r5
 800da5e:	4b09      	ldr	r3, [pc, #36]	; (800da84 <_vfiprintf_r+0x258>)
 800da60:	a904      	add	r1, sp, #16
 800da62:	4630      	mov	r0, r6
 800da64:	f000 f880 	bl	800db68 <_printf_i>
 800da68:	e7e4      	b.n	800da34 <_vfiprintf_r+0x208>
 800da6a:	bf00      	nop
 800da6c:	0800e320 	.word	0x0800e320
 800da70:	0800e340 	.word	0x0800e340
 800da74:	0800e300 	.word	0x0800e300
 800da78:	0800e360 	.word	0x0800e360
 800da7c:	0800e36a 	.word	0x0800e36a
 800da80:	00000000 	.word	0x00000000
 800da84:	0800d807 	.word	0x0800d807
 800da88:	0800e366 	.word	0x0800e366

0800da8c <_printf_common>:
 800da8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da90:	4616      	mov	r6, r2
 800da92:	4699      	mov	r9, r3
 800da94:	688a      	ldr	r2, [r1, #8]
 800da96:	690b      	ldr	r3, [r1, #16]
 800da98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da9c:	4293      	cmp	r3, r2
 800da9e:	bfb8      	it	lt
 800daa0:	4613      	movlt	r3, r2
 800daa2:	6033      	str	r3, [r6, #0]
 800daa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daa8:	4607      	mov	r7, r0
 800daaa:	460c      	mov	r4, r1
 800daac:	b10a      	cbz	r2, 800dab2 <_printf_common+0x26>
 800daae:	3301      	adds	r3, #1
 800dab0:	6033      	str	r3, [r6, #0]
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	0699      	lsls	r1, r3, #26
 800dab6:	bf42      	ittt	mi
 800dab8:	6833      	ldrmi	r3, [r6, #0]
 800daba:	3302      	addmi	r3, #2
 800dabc:	6033      	strmi	r3, [r6, #0]
 800dabe:	6825      	ldr	r5, [r4, #0]
 800dac0:	f015 0506 	ands.w	r5, r5, #6
 800dac4:	d106      	bne.n	800dad4 <_printf_common+0x48>
 800dac6:	f104 0a19 	add.w	sl, r4, #25
 800daca:	68e3      	ldr	r3, [r4, #12]
 800dacc:	6832      	ldr	r2, [r6, #0]
 800dace:	1a9b      	subs	r3, r3, r2
 800dad0:	42ab      	cmp	r3, r5
 800dad2:	dc26      	bgt.n	800db22 <_printf_common+0x96>
 800dad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dad8:	1e13      	subs	r3, r2, #0
 800dada:	6822      	ldr	r2, [r4, #0]
 800dadc:	bf18      	it	ne
 800dade:	2301      	movne	r3, #1
 800dae0:	0692      	lsls	r2, r2, #26
 800dae2:	d42b      	bmi.n	800db3c <_printf_common+0xb0>
 800dae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dae8:	4649      	mov	r1, r9
 800daea:	4638      	mov	r0, r7
 800daec:	47c0      	blx	r8
 800daee:	3001      	adds	r0, #1
 800daf0:	d01e      	beq.n	800db30 <_printf_common+0xa4>
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	68e5      	ldr	r5, [r4, #12]
 800daf6:	6832      	ldr	r2, [r6, #0]
 800daf8:	f003 0306 	and.w	r3, r3, #6
 800dafc:	2b04      	cmp	r3, #4
 800dafe:	bf08      	it	eq
 800db00:	1aad      	subeq	r5, r5, r2
 800db02:	68a3      	ldr	r3, [r4, #8]
 800db04:	6922      	ldr	r2, [r4, #16]
 800db06:	bf0c      	ite	eq
 800db08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db0c:	2500      	movne	r5, #0
 800db0e:	4293      	cmp	r3, r2
 800db10:	bfc4      	itt	gt
 800db12:	1a9b      	subgt	r3, r3, r2
 800db14:	18ed      	addgt	r5, r5, r3
 800db16:	2600      	movs	r6, #0
 800db18:	341a      	adds	r4, #26
 800db1a:	42b5      	cmp	r5, r6
 800db1c:	d11a      	bne.n	800db54 <_printf_common+0xc8>
 800db1e:	2000      	movs	r0, #0
 800db20:	e008      	b.n	800db34 <_printf_common+0xa8>
 800db22:	2301      	movs	r3, #1
 800db24:	4652      	mov	r2, sl
 800db26:	4649      	mov	r1, r9
 800db28:	4638      	mov	r0, r7
 800db2a:	47c0      	blx	r8
 800db2c:	3001      	adds	r0, #1
 800db2e:	d103      	bne.n	800db38 <_printf_common+0xac>
 800db30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db38:	3501      	adds	r5, #1
 800db3a:	e7c6      	b.n	800daca <_printf_common+0x3e>
 800db3c:	18e1      	adds	r1, r4, r3
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	2030      	movs	r0, #48	; 0x30
 800db42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db46:	4422      	add	r2, r4
 800db48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db50:	3302      	adds	r3, #2
 800db52:	e7c7      	b.n	800dae4 <_printf_common+0x58>
 800db54:	2301      	movs	r3, #1
 800db56:	4622      	mov	r2, r4
 800db58:	4649      	mov	r1, r9
 800db5a:	4638      	mov	r0, r7
 800db5c:	47c0      	blx	r8
 800db5e:	3001      	adds	r0, #1
 800db60:	d0e6      	beq.n	800db30 <_printf_common+0xa4>
 800db62:	3601      	adds	r6, #1
 800db64:	e7d9      	b.n	800db1a <_printf_common+0x8e>
	...

0800db68 <_printf_i>:
 800db68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	7e0f      	ldrb	r7, [r1, #24]
 800db6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db70:	2f78      	cmp	r7, #120	; 0x78
 800db72:	4691      	mov	r9, r2
 800db74:	4680      	mov	r8, r0
 800db76:	460c      	mov	r4, r1
 800db78:	469a      	mov	sl, r3
 800db7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db7e:	d807      	bhi.n	800db90 <_printf_i+0x28>
 800db80:	2f62      	cmp	r7, #98	; 0x62
 800db82:	d80a      	bhi.n	800db9a <_printf_i+0x32>
 800db84:	2f00      	cmp	r7, #0
 800db86:	f000 80d8 	beq.w	800dd3a <_printf_i+0x1d2>
 800db8a:	2f58      	cmp	r7, #88	; 0x58
 800db8c:	f000 80a3 	beq.w	800dcd6 <_printf_i+0x16e>
 800db90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db98:	e03a      	b.n	800dc10 <_printf_i+0xa8>
 800db9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db9e:	2b15      	cmp	r3, #21
 800dba0:	d8f6      	bhi.n	800db90 <_printf_i+0x28>
 800dba2:	a101      	add	r1, pc, #4	; (adr r1, 800dba8 <_printf_i+0x40>)
 800dba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dba8:	0800dc01 	.word	0x0800dc01
 800dbac:	0800dc15 	.word	0x0800dc15
 800dbb0:	0800db91 	.word	0x0800db91
 800dbb4:	0800db91 	.word	0x0800db91
 800dbb8:	0800db91 	.word	0x0800db91
 800dbbc:	0800db91 	.word	0x0800db91
 800dbc0:	0800dc15 	.word	0x0800dc15
 800dbc4:	0800db91 	.word	0x0800db91
 800dbc8:	0800db91 	.word	0x0800db91
 800dbcc:	0800db91 	.word	0x0800db91
 800dbd0:	0800db91 	.word	0x0800db91
 800dbd4:	0800dd21 	.word	0x0800dd21
 800dbd8:	0800dc45 	.word	0x0800dc45
 800dbdc:	0800dd03 	.word	0x0800dd03
 800dbe0:	0800db91 	.word	0x0800db91
 800dbe4:	0800db91 	.word	0x0800db91
 800dbe8:	0800dd43 	.word	0x0800dd43
 800dbec:	0800db91 	.word	0x0800db91
 800dbf0:	0800dc45 	.word	0x0800dc45
 800dbf4:	0800db91 	.word	0x0800db91
 800dbf8:	0800db91 	.word	0x0800db91
 800dbfc:	0800dd0b 	.word	0x0800dd0b
 800dc00:	682b      	ldr	r3, [r5, #0]
 800dc02:	1d1a      	adds	r2, r3, #4
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	602a      	str	r2, [r5, #0]
 800dc08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc10:	2301      	movs	r3, #1
 800dc12:	e0a3      	b.n	800dd5c <_printf_i+0x1f4>
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	6829      	ldr	r1, [r5, #0]
 800dc18:	0606      	lsls	r6, r0, #24
 800dc1a:	f101 0304 	add.w	r3, r1, #4
 800dc1e:	d50a      	bpl.n	800dc36 <_printf_i+0xce>
 800dc20:	680e      	ldr	r6, [r1, #0]
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	2e00      	cmp	r6, #0
 800dc26:	da03      	bge.n	800dc30 <_printf_i+0xc8>
 800dc28:	232d      	movs	r3, #45	; 0x2d
 800dc2a:	4276      	negs	r6, r6
 800dc2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc30:	485e      	ldr	r0, [pc, #376]	; (800ddac <_printf_i+0x244>)
 800dc32:	230a      	movs	r3, #10
 800dc34:	e019      	b.n	800dc6a <_printf_i+0x102>
 800dc36:	680e      	ldr	r6, [r1, #0]
 800dc38:	602b      	str	r3, [r5, #0]
 800dc3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc3e:	bf18      	it	ne
 800dc40:	b236      	sxthne	r6, r6
 800dc42:	e7ef      	b.n	800dc24 <_printf_i+0xbc>
 800dc44:	682b      	ldr	r3, [r5, #0]
 800dc46:	6820      	ldr	r0, [r4, #0]
 800dc48:	1d19      	adds	r1, r3, #4
 800dc4a:	6029      	str	r1, [r5, #0]
 800dc4c:	0601      	lsls	r1, r0, #24
 800dc4e:	d501      	bpl.n	800dc54 <_printf_i+0xec>
 800dc50:	681e      	ldr	r6, [r3, #0]
 800dc52:	e002      	b.n	800dc5a <_printf_i+0xf2>
 800dc54:	0646      	lsls	r6, r0, #25
 800dc56:	d5fb      	bpl.n	800dc50 <_printf_i+0xe8>
 800dc58:	881e      	ldrh	r6, [r3, #0]
 800dc5a:	4854      	ldr	r0, [pc, #336]	; (800ddac <_printf_i+0x244>)
 800dc5c:	2f6f      	cmp	r7, #111	; 0x6f
 800dc5e:	bf0c      	ite	eq
 800dc60:	2308      	moveq	r3, #8
 800dc62:	230a      	movne	r3, #10
 800dc64:	2100      	movs	r1, #0
 800dc66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc6a:	6865      	ldr	r5, [r4, #4]
 800dc6c:	60a5      	str	r5, [r4, #8]
 800dc6e:	2d00      	cmp	r5, #0
 800dc70:	bfa2      	ittt	ge
 800dc72:	6821      	ldrge	r1, [r4, #0]
 800dc74:	f021 0104 	bicge.w	r1, r1, #4
 800dc78:	6021      	strge	r1, [r4, #0]
 800dc7a:	b90e      	cbnz	r6, 800dc80 <_printf_i+0x118>
 800dc7c:	2d00      	cmp	r5, #0
 800dc7e:	d04d      	beq.n	800dd1c <_printf_i+0x1b4>
 800dc80:	4615      	mov	r5, r2
 800dc82:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc86:	fb03 6711 	mls	r7, r3, r1, r6
 800dc8a:	5dc7      	ldrb	r7, [r0, r7]
 800dc8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc90:	4637      	mov	r7, r6
 800dc92:	42bb      	cmp	r3, r7
 800dc94:	460e      	mov	r6, r1
 800dc96:	d9f4      	bls.n	800dc82 <_printf_i+0x11a>
 800dc98:	2b08      	cmp	r3, #8
 800dc9a:	d10b      	bne.n	800dcb4 <_printf_i+0x14c>
 800dc9c:	6823      	ldr	r3, [r4, #0]
 800dc9e:	07de      	lsls	r6, r3, #31
 800dca0:	d508      	bpl.n	800dcb4 <_printf_i+0x14c>
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	6861      	ldr	r1, [r4, #4]
 800dca6:	4299      	cmp	r1, r3
 800dca8:	bfde      	ittt	le
 800dcaa:	2330      	movle	r3, #48	; 0x30
 800dcac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dcb0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dcb4:	1b52      	subs	r2, r2, r5
 800dcb6:	6122      	str	r2, [r4, #16]
 800dcb8:	f8cd a000 	str.w	sl, [sp]
 800dcbc:	464b      	mov	r3, r9
 800dcbe:	aa03      	add	r2, sp, #12
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	4640      	mov	r0, r8
 800dcc4:	f7ff fee2 	bl	800da8c <_printf_common>
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d14c      	bne.n	800dd66 <_printf_i+0x1fe>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcd0:	b004      	add	sp, #16
 800dcd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd6:	4835      	ldr	r0, [pc, #212]	; (800ddac <_printf_i+0x244>)
 800dcd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dcdc:	6829      	ldr	r1, [r5, #0]
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dce4:	6029      	str	r1, [r5, #0]
 800dce6:	061d      	lsls	r5, r3, #24
 800dce8:	d514      	bpl.n	800dd14 <_printf_i+0x1ac>
 800dcea:	07df      	lsls	r7, r3, #31
 800dcec:	bf44      	itt	mi
 800dcee:	f043 0320 	orrmi.w	r3, r3, #32
 800dcf2:	6023      	strmi	r3, [r4, #0]
 800dcf4:	b91e      	cbnz	r6, 800dcfe <_printf_i+0x196>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	f023 0320 	bic.w	r3, r3, #32
 800dcfc:	6023      	str	r3, [r4, #0]
 800dcfe:	2310      	movs	r3, #16
 800dd00:	e7b0      	b.n	800dc64 <_printf_i+0xfc>
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	f043 0320 	orr.w	r3, r3, #32
 800dd08:	6023      	str	r3, [r4, #0]
 800dd0a:	2378      	movs	r3, #120	; 0x78
 800dd0c:	4828      	ldr	r0, [pc, #160]	; (800ddb0 <_printf_i+0x248>)
 800dd0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dd12:	e7e3      	b.n	800dcdc <_printf_i+0x174>
 800dd14:	0659      	lsls	r1, r3, #25
 800dd16:	bf48      	it	mi
 800dd18:	b2b6      	uxthmi	r6, r6
 800dd1a:	e7e6      	b.n	800dcea <_printf_i+0x182>
 800dd1c:	4615      	mov	r5, r2
 800dd1e:	e7bb      	b.n	800dc98 <_printf_i+0x130>
 800dd20:	682b      	ldr	r3, [r5, #0]
 800dd22:	6826      	ldr	r6, [r4, #0]
 800dd24:	6961      	ldr	r1, [r4, #20]
 800dd26:	1d18      	adds	r0, r3, #4
 800dd28:	6028      	str	r0, [r5, #0]
 800dd2a:	0635      	lsls	r5, r6, #24
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	d501      	bpl.n	800dd34 <_printf_i+0x1cc>
 800dd30:	6019      	str	r1, [r3, #0]
 800dd32:	e002      	b.n	800dd3a <_printf_i+0x1d2>
 800dd34:	0670      	lsls	r0, r6, #25
 800dd36:	d5fb      	bpl.n	800dd30 <_printf_i+0x1c8>
 800dd38:	8019      	strh	r1, [r3, #0]
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6123      	str	r3, [r4, #16]
 800dd3e:	4615      	mov	r5, r2
 800dd40:	e7ba      	b.n	800dcb8 <_printf_i+0x150>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	1d1a      	adds	r2, r3, #4
 800dd46:	602a      	str	r2, [r5, #0]
 800dd48:	681d      	ldr	r5, [r3, #0]
 800dd4a:	6862      	ldr	r2, [r4, #4]
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4628      	mov	r0, r5
 800dd50:	f7f2 fac6 	bl	80002e0 <memchr>
 800dd54:	b108      	cbz	r0, 800dd5a <_printf_i+0x1f2>
 800dd56:	1b40      	subs	r0, r0, r5
 800dd58:	6060      	str	r0, [r4, #4]
 800dd5a:	6863      	ldr	r3, [r4, #4]
 800dd5c:	6123      	str	r3, [r4, #16]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd64:	e7a8      	b.n	800dcb8 <_printf_i+0x150>
 800dd66:	6923      	ldr	r3, [r4, #16]
 800dd68:	462a      	mov	r2, r5
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	47d0      	blx	sl
 800dd70:	3001      	adds	r0, #1
 800dd72:	d0ab      	beq.n	800dccc <_printf_i+0x164>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	079b      	lsls	r3, r3, #30
 800dd78:	d413      	bmi.n	800dda2 <_printf_i+0x23a>
 800dd7a:	68e0      	ldr	r0, [r4, #12]
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	4298      	cmp	r0, r3
 800dd80:	bfb8      	it	lt
 800dd82:	4618      	movlt	r0, r3
 800dd84:	e7a4      	b.n	800dcd0 <_printf_i+0x168>
 800dd86:	2301      	movs	r3, #1
 800dd88:	4632      	mov	r2, r6
 800dd8a:	4649      	mov	r1, r9
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	47d0      	blx	sl
 800dd90:	3001      	adds	r0, #1
 800dd92:	d09b      	beq.n	800dccc <_printf_i+0x164>
 800dd94:	3501      	adds	r5, #1
 800dd96:	68e3      	ldr	r3, [r4, #12]
 800dd98:	9903      	ldr	r1, [sp, #12]
 800dd9a:	1a5b      	subs	r3, r3, r1
 800dd9c:	42ab      	cmp	r3, r5
 800dd9e:	dcf2      	bgt.n	800dd86 <_printf_i+0x21e>
 800dda0:	e7eb      	b.n	800dd7a <_printf_i+0x212>
 800dda2:	2500      	movs	r5, #0
 800dda4:	f104 0619 	add.w	r6, r4, #25
 800dda8:	e7f5      	b.n	800dd96 <_printf_i+0x22e>
 800ddaa:	bf00      	nop
 800ddac:	0800e371 	.word	0x0800e371
 800ddb0:	0800e382 	.word	0x0800e382

0800ddb4 <_sbrk_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d06      	ldr	r5, [pc, #24]	; (800ddd0 <_sbrk_r+0x1c>)
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4604      	mov	r4, r0
 800ddbc:	4608      	mov	r0, r1
 800ddbe:	602b      	str	r3, [r5, #0]
 800ddc0:	f7f2 ff58 	bl	8000c74 <_sbrk>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d102      	bne.n	800ddce <_sbrk_r+0x1a>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	b103      	cbz	r3, 800ddce <_sbrk_r+0x1a>
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	24001588 	.word	0x24001588

0800ddd4 <__sread>:
 800ddd4:	b510      	push	{r4, lr}
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dddc:	f000 f968 	bl	800e0b0 <_read_r>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	bfab      	itete	ge
 800dde4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dde6:	89a3      	ldrhlt	r3, [r4, #12]
 800dde8:	181b      	addge	r3, r3, r0
 800ddea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddee:	bfac      	ite	ge
 800ddf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddf2:	81a3      	strhlt	r3, [r4, #12]
 800ddf4:	bd10      	pop	{r4, pc}

0800ddf6 <__swrite>:
 800ddf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfa:	461f      	mov	r7, r3
 800ddfc:	898b      	ldrh	r3, [r1, #12]
 800ddfe:	05db      	lsls	r3, r3, #23
 800de00:	4605      	mov	r5, r0
 800de02:	460c      	mov	r4, r1
 800de04:	4616      	mov	r6, r2
 800de06:	d505      	bpl.n	800de14 <__swrite+0x1e>
 800de08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de0c:	2302      	movs	r3, #2
 800de0e:	2200      	movs	r2, #0
 800de10:	f000 f930 	bl	800e074 <_lseek_r>
 800de14:	89a3      	ldrh	r3, [r4, #12]
 800de16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	4632      	mov	r2, r6
 800de22:	463b      	mov	r3, r7
 800de24:	4628      	mov	r0, r5
 800de26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de2a:	f000 b869 	b.w	800df00 <_write_r>

0800de2e <__sseek>:
 800de2e:	b510      	push	{r4, lr}
 800de30:	460c      	mov	r4, r1
 800de32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de36:	f000 f91d 	bl	800e074 <_lseek_r>
 800de3a:	1c43      	adds	r3, r0, #1
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	bf15      	itete	ne
 800de40:	6560      	strne	r0, [r4, #84]	; 0x54
 800de42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de4a:	81a3      	strheq	r3, [r4, #12]
 800de4c:	bf18      	it	ne
 800de4e:	81a3      	strhne	r3, [r4, #12]
 800de50:	bd10      	pop	{r4, pc}

0800de52 <__sclose>:
 800de52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de56:	f000 b8db 	b.w	800e010 <_close_r>
	...

0800de5c <__swbuf_r>:
 800de5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de5e:	460e      	mov	r6, r1
 800de60:	4614      	mov	r4, r2
 800de62:	4605      	mov	r5, r0
 800de64:	b118      	cbz	r0, 800de6e <__swbuf_r+0x12>
 800de66:	6983      	ldr	r3, [r0, #24]
 800de68:	b90b      	cbnz	r3, 800de6e <__swbuf_r+0x12>
 800de6a:	f7ff faa3 	bl	800d3b4 <__sinit>
 800de6e:	4b21      	ldr	r3, [pc, #132]	; (800def4 <__swbuf_r+0x98>)
 800de70:	429c      	cmp	r4, r3
 800de72:	d12b      	bne.n	800decc <__swbuf_r+0x70>
 800de74:	686c      	ldr	r4, [r5, #4]
 800de76:	69a3      	ldr	r3, [r4, #24]
 800de78:	60a3      	str	r3, [r4, #8]
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	071a      	lsls	r2, r3, #28
 800de7e:	d52f      	bpl.n	800dee0 <__swbuf_r+0x84>
 800de80:	6923      	ldr	r3, [r4, #16]
 800de82:	b36b      	cbz	r3, 800dee0 <__swbuf_r+0x84>
 800de84:	6923      	ldr	r3, [r4, #16]
 800de86:	6820      	ldr	r0, [r4, #0]
 800de88:	1ac0      	subs	r0, r0, r3
 800de8a:	6963      	ldr	r3, [r4, #20]
 800de8c:	b2f6      	uxtb	r6, r6
 800de8e:	4283      	cmp	r3, r0
 800de90:	4637      	mov	r7, r6
 800de92:	dc04      	bgt.n	800de9e <__swbuf_r+0x42>
 800de94:	4621      	mov	r1, r4
 800de96:	4628      	mov	r0, r5
 800de98:	f7ff f9f8 	bl	800d28c <_fflush_r>
 800de9c:	bb30      	cbnz	r0, 800deec <__swbuf_r+0x90>
 800de9e:	68a3      	ldr	r3, [r4, #8]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	60a3      	str	r3, [r4, #8]
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	1c5a      	adds	r2, r3, #1
 800dea8:	6022      	str	r2, [r4, #0]
 800deaa:	701e      	strb	r6, [r3, #0]
 800deac:	6963      	ldr	r3, [r4, #20]
 800deae:	3001      	adds	r0, #1
 800deb0:	4283      	cmp	r3, r0
 800deb2:	d004      	beq.n	800debe <__swbuf_r+0x62>
 800deb4:	89a3      	ldrh	r3, [r4, #12]
 800deb6:	07db      	lsls	r3, r3, #31
 800deb8:	d506      	bpl.n	800dec8 <__swbuf_r+0x6c>
 800deba:	2e0a      	cmp	r6, #10
 800debc:	d104      	bne.n	800dec8 <__swbuf_r+0x6c>
 800debe:	4621      	mov	r1, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	f7ff f9e3 	bl	800d28c <_fflush_r>
 800dec6:	b988      	cbnz	r0, 800deec <__swbuf_r+0x90>
 800dec8:	4638      	mov	r0, r7
 800deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800decc:	4b0a      	ldr	r3, [pc, #40]	; (800def8 <__swbuf_r+0x9c>)
 800dece:	429c      	cmp	r4, r3
 800ded0:	d101      	bne.n	800ded6 <__swbuf_r+0x7a>
 800ded2:	68ac      	ldr	r4, [r5, #8]
 800ded4:	e7cf      	b.n	800de76 <__swbuf_r+0x1a>
 800ded6:	4b09      	ldr	r3, [pc, #36]	; (800defc <__swbuf_r+0xa0>)
 800ded8:	429c      	cmp	r4, r3
 800deda:	bf08      	it	eq
 800dedc:	68ec      	ldreq	r4, [r5, #12]
 800dede:	e7ca      	b.n	800de76 <__swbuf_r+0x1a>
 800dee0:	4621      	mov	r1, r4
 800dee2:	4628      	mov	r0, r5
 800dee4:	f000 f81e 	bl	800df24 <__swsetup_r>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d0cb      	beq.n	800de84 <__swbuf_r+0x28>
 800deec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800def0:	e7ea      	b.n	800dec8 <__swbuf_r+0x6c>
 800def2:	bf00      	nop
 800def4:	0800e320 	.word	0x0800e320
 800def8:	0800e340 	.word	0x0800e340
 800defc:	0800e300 	.word	0x0800e300

0800df00 <_write_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4d07      	ldr	r5, [pc, #28]	; (800df20 <_write_r+0x20>)
 800df04:	4604      	mov	r4, r0
 800df06:	4608      	mov	r0, r1
 800df08:	4611      	mov	r1, r2
 800df0a:	2200      	movs	r2, #0
 800df0c:	602a      	str	r2, [r5, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	f7f2 fc10 	bl	8000734 <_write>
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	d102      	bne.n	800df1e <_write_r+0x1e>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	b103      	cbz	r3, 800df1e <_write_r+0x1e>
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	bd38      	pop	{r3, r4, r5, pc}
 800df20:	24001588 	.word	0x24001588

0800df24 <__swsetup_r>:
 800df24:	4b32      	ldr	r3, [pc, #200]	; (800dff0 <__swsetup_r+0xcc>)
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	681d      	ldr	r5, [r3, #0]
 800df2a:	4606      	mov	r6, r0
 800df2c:	460c      	mov	r4, r1
 800df2e:	b125      	cbz	r5, 800df3a <__swsetup_r+0x16>
 800df30:	69ab      	ldr	r3, [r5, #24]
 800df32:	b913      	cbnz	r3, 800df3a <__swsetup_r+0x16>
 800df34:	4628      	mov	r0, r5
 800df36:	f7ff fa3d 	bl	800d3b4 <__sinit>
 800df3a:	4b2e      	ldr	r3, [pc, #184]	; (800dff4 <__swsetup_r+0xd0>)
 800df3c:	429c      	cmp	r4, r3
 800df3e:	d10f      	bne.n	800df60 <__swsetup_r+0x3c>
 800df40:	686c      	ldr	r4, [r5, #4]
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df48:	0719      	lsls	r1, r3, #28
 800df4a:	d42c      	bmi.n	800dfa6 <__swsetup_r+0x82>
 800df4c:	06dd      	lsls	r5, r3, #27
 800df4e:	d411      	bmi.n	800df74 <__swsetup_r+0x50>
 800df50:	2309      	movs	r3, #9
 800df52:	6033      	str	r3, [r6, #0]
 800df54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df5e:	e03e      	b.n	800dfde <__swsetup_r+0xba>
 800df60:	4b25      	ldr	r3, [pc, #148]	; (800dff8 <__swsetup_r+0xd4>)
 800df62:	429c      	cmp	r4, r3
 800df64:	d101      	bne.n	800df6a <__swsetup_r+0x46>
 800df66:	68ac      	ldr	r4, [r5, #8]
 800df68:	e7eb      	b.n	800df42 <__swsetup_r+0x1e>
 800df6a:	4b24      	ldr	r3, [pc, #144]	; (800dffc <__swsetup_r+0xd8>)
 800df6c:	429c      	cmp	r4, r3
 800df6e:	bf08      	it	eq
 800df70:	68ec      	ldreq	r4, [r5, #12]
 800df72:	e7e6      	b.n	800df42 <__swsetup_r+0x1e>
 800df74:	0758      	lsls	r0, r3, #29
 800df76:	d512      	bpl.n	800df9e <__swsetup_r+0x7a>
 800df78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df7a:	b141      	cbz	r1, 800df8e <__swsetup_r+0x6a>
 800df7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df80:	4299      	cmp	r1, r3
 800df82:	d002      	beq.n	800df8a <__swsetup_r+0x66>
 800df84:	4630      	mov	r0, r6
 800df86:	f7ff fb47 	bl	800d618 <_free_r>
 800df8a:	2300      	movs	r3, #0
 800df8c:	6363      	str	r3, [r4, #52]	; 0x34
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df94:	81a3      	strh	r3, [r4, #12]
 800df96:	2300      	movs	r3, #0
 800df98:	6063      	str	r3, [r4, #4]
 800df9a:	6923      	ldr	r3, [r4, #16]
 800df9c:	6023      	str	r3, [r4, #0]
 800df9e:	89a3      	ldrh	r3, [r4, #12]
 800dfa0:	f043 0308 	orr.w	r3, r3, #8
 800dfa4:	81a3      	strh	r3, [r4, #12]
 800dfa6:	6923      	ldr	r3, [r4, #16]
 800dfa8:	b94b      	cbnz	r3, 800dfbe <__swsetup_r+0x9a>
 800dfaa:	89a3      	ldrh	r3, [r4, #12]
 800dfac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dfb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfb4:	d003      	beq.n	800dfbe <__swsetup_r+0x9a>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7ff fae5 	bl	800d588 <__smakebuf_r>
 800dfbe:	89a0      	ldrh	r0, [r4, #12]
 800dfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfc4:	f010 0301 	ands.w	r3, r0, #1
 800dfc8:	d00a      	beq.n	800dfe0 <__swsetup_r+0xbc>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60a3      	str	r3, [r4, #8]
 800dfce:	6963      	ldr	r3, [r4, #20]
 800dfd0:	425b      	negs	r3, r3
 800dfd2:	61a3      	str	r3, [r4, #24]
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	b943      	cbnz	r3, 800dfea <__swsetup_r+0xc6>
 800dfd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfdc:	d1ba      	bne.n	800df54 <__swsetup_r+0x30>
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	0781      	lsls	r1, r0, #30
 800dfe2:	bf58      	it	pl
 800dfe4:	6963      	ldrpl	r3, [r4, #20]
 800dfe6:	60a3      	str	r3, [r4, #8]
 800dfe8:	e7f4      	b.n	800dfd4 <__swsetup_r+0xb0>
 800dfea:	2000      	movs	r0, #0
 800dfec:	e7f7      	b.n	800dfde <__swsetup_r+0xba>
 800dfee:	bf00      	nop
 800dff0:	24000050 	.word	0x24000050
 800dff4:	0800e320 	.word	0x0800e320
 800dff8:	0800e340 	.word	0x0800e340
 800dffc:	0800e300 	.word	0x0800e300

0800e000 <abort>:
 800e000:	b508      	push	{r3, lr}
 800e002:	2006      	movs	r0, #6
 800e004:	f000 f88e 	bl	800e124 <raise>
 800e008:	2001      	movs	r0, #1
 800e00a:	f7f2 fe28 	bl	8000c5e <_exit>
	...

0800e010 <_close_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4d06      	ldr	r5, [pc, #24]	; (800e02c <_close_r+0x1c>)
 800e014:	2300      	movs	r3, #0
 800e016:	4604      	mov	r4, r0
 800e018:	4608      	mov	r0, r1
 800e01a:	602b      	str	r3, [r5, #0]
 800e01c:	f7f2 fb1e 	bl	800065c <_close>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d102      	bne.n	800e02a <_close_r+0x1a>
 800e024:	682b      	ldr	r3, [r5, #0]
 800e026:	b103      	cbz	r3, 800e02a <_close_r+0x1a>
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	bd38      	pop	{r3, r4, r5, pc}
 800e02c:	24001588 	.word	0x24001588

0800e030 <_fstat_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d07      	ldr	r5, [pc, #28]	; (800e050 <_fstat_r+0x20>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	4611      	mov	r1, r2
 800e03c:	602b      	str	r3, [r5, #0]
 800e03e:	f7f2 fb35 	bl	80006ac <_fstat>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d102      	bne.n	800e04c <_fstat_r+0x1c>
 800e046:	682b      	ldr	r3, [r5, #0]
 800e048:	b103      	cbz	r3, 800e04c <_fstat_r+0x1c>
 800e04a:	6023      	str	r3, [r4, #0]
 800e04c:	bd38      	pop	{r3, r4, r5, pc}
 800e04e:	bf00      	nop
 800e050:	24001588 	.word	0x24001588

0800e054 <_isatty_r>:
 800e054:	b538      	push	{r3, r4, r5, lr}
 800e056:	4d06      	ldr	r5, [pc, #24]	; (800e070 <_isatty_r+0x1c>)
 800e058:	2300      	movs	r3, #0
 800e05a:	4604      	mov	r4, r0
 800e05c:	4608      	mov	r0, r1
 800e05e:	602b      	str	r3, [r5, #0]
 800e060:	f7f2 fae6 	bl	8000630 <_isatty>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_isatty_r+0x1a>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_isatty_r+0x1a>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	24001588 	.word	0x24001588

0800e074 <_lseek_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d07      	ldr	r5, [pc, #28]	; (800e094 <_lseek_r+0x20>)
 800e078:	4604      	mov	r4, r0
 800e07a:	4608      	mov	r0, r1
 800e07c:	4611      	mov	r1, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	602a      	str	r2, [r5, #0]
 800e082:	461a      	mov	r2, r3
 800e084:	f7f2 fb01 	bl	800068a <_lseek>
 800e088:	1c43      	adds	r3, r0, #1
 800e08a:	d102      	bne.n	800e092 <_lseek_r+0x1e>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	b103      	cbz	r3, 800e092 <_lseek_r+0x1e>
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	bd38      	pop	{r3, r4, r5, pc}
 800e094:	24001588 	.word	0x24001588

0800e098 <__malloc_lock>:
 800e098:	4801      	ldr	r0, [pc, #4]	; (800e0a0 <__malloc_lock+0x8>)
 800e09a:	f7ff ba4e 	b.w	800d53a <__retarget_lock_acquire_recursive>
 800e09e:	bf00      	nop
 800e0a0:	2400157c 	.word	0x2400157c

0800e0a4 <__malloc_unlock>:
 800e0a4:	4801      	ldr	r0, [pc, #4]	; (800e0ac <__malloc_unlock+0x8>)
 800e0a6:	f7ff ba49 	b.w	800d53c <__retarget_lock_release_recursive>
 800e0aa:	bf00      	nop
 800e0ac:	2400157c 	.word	0x2400157c

0800e0b0 <_read_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d07      	ldr	r5, [pc, #28]	; (800e0d0 <_read_r+0x20>)
 800e0b4:	4604      	mov	r4, r0
 800e0b6:	4608      	mov	r0, r1
 800e0b8:	4611      	mov	r1, r2
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	602a      	str	r2, [r5, #0]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	f7f2 fb10 	bl	80006e4 <_read>
 800e0c4:	1c43      	adds	r3, r0, #1
 800e0c6:	d102      	bne.n	800e0ce <_read_r+0x1e>
 800e0c8:	682b      	ldr	r3, [r5, #0]
 800e0ca:	b103      	cbz	r3, 800e0ce <_read_r+0x1e>
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	bd38      	pop	{r3, r4, r5, pc}
 800e0d0:	24001588 	.word	0x24001588

0800e0d4 <_raise_r>:
 800e0d4:	291f      	cmp	r1, #31
 800e0d6:	b538      	push	{r3, r4, r5, lr}
 800e0d8:	4604      	mov	r4, r0
 800e0da:	460d      	mov	r5, r1
 800e0dc:	d904      	bls.n	800e0e8 <_raise_r+0x14>
 800e0de:	2316      	movs	r3, #22
 800e0e0:	6003      	str	r3, [r0, #0]
 800e0e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0e6:	bd38      	pop	{r3, r4, r5, pc}
 800e0e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0ea:	b112      	cbz	r2, 800e0f2 <_raise_r+0x1e>
 800e0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0f0:	b94b      	cbnz	r3, 800e106 <_raise_r+0x32>
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 f830 	bl	800e158 <_getpid_r>
 800e0f8:	462a      	mov	r2, r5
 800e0fa:	4601      	mov	r1, r0
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e102:	f000 b817 	b.w	800e134 <_kill_r>
 800e106:	2b01      	cmp	r3, #1
 800e108:	d00a      	beq.n	800e120 <_raise_r+0x4c>
 800e10a:	1c59      	adds	r1, r3, #1
 800e10c:	d103      	bne.n	800e116 <_raise_r+0x42>
 800e10e:	2316      	movs	r3, #22
 800e110:	6003      	str	r3, [r0, #0]
 800e112:	2001      	movs	r0, #1
 800e114:	e7e7      	b.n	800e0e6 <_raise_r+0x12>
 800e116:	2400      	movs	r4, #0
 800e118:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e11c:	4628      	mov	r0, r5
 800e11e:	4798      	blx	r3
 800e120:	2000      	movs	r0, #0
 800e122:	e7e0      	b.n	800e0e6 <_raise_r+0x12>

0800e124 <raise>:
 800e124:	4b02      	ldr	r3, [pc, #8]	; (800e130 <raise+0xc>)
 800e126:	4601      	mov	r1, r0
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	f7ff bfd3 	b.w	800e0d4 <_raise_r>
 800e12e:	bf00      	nop
 800e130:	24000050 	.word	0x24000050

0800e134 <_kill_r>:
 800e134:	b538      	push	{r3, r4, r5, lr}
 800e136:	4d07      	ldr	r5, [pc, #28]	; (800e154 <_kill_r+0x20>)
 800e138:	2300      	movs	r3, #0
 800e13a:	4604      	mov	r4, r0
 800e13c:	4608      	mov	r0, r1
 800e13e:	4611      	mov	r1, r2
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	f7f2 fd7c 	bl	8000c3e <_kill>
 800e146:	1c43      	adds	r3, r0, #1
 800e148:	d102      	bne.n	800e150 <_kill_r+0x1c>
 800e14a:	682b      	ldr	r3, [r5, #0]
 800e14c:	b103      	cbz	r3, 800e150 <_kill_r+0x1c>
 800e14e:	6023      	str	r3, [r4, #0]
 800e150:	bd38      	pop	{r3, r4, r5, pc}
 800e152:	bf00      	nop
 800e154:	24001588 	.word	0x24001588

0800e158 <_getpid_r>:
 800e158:	f7f2 bd69 	b.w	8000c2e <_getpid>

0800e15c <_gettimeofday>:
 800e15c:	4b02      	ldr	r3, [pc, #8]	; (800e168 <_gettimeofday+0xc>)
 800e15e:	2258      	movs	r2, #88	; 0x58
 800e160:	601a      	str	r2, [r3, #0]
 800e162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e166:	4770      	bx	lr
 800e168:	24001588 	.word	0x24001588

0800e16c <_init>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	bf00      	nop
 800e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e172:	bc08      	pop	{r3}
 800e174:	469e      	mov	lr, r3
 800e176:	4770      	bx	lr

0800e178 <_fini>:
 800e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17a:	bf00      	nop
 800e17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17e:	bc08      	pop	{r3}
 800e180:	469e      	mov	lr, r3
 800e182:	4770      	bx	lr
